//ActionScript 3.0
//  package battle
//    package display
//      package common
//        class BlackBox
package battle.display.common
{
    import flash.display.*;

    public class BlackBox extends flash.display.Shape
    {
        public function BlackBox()
        {
            super();
            graphics.beginFill(0, 0.9);
            graphics.drawRect(0, 0, 800, 480);
            graphics.endFill();
            return;
        }
    }
}


//        class CenterLineInfo
package battle.display.common
{
    import a24.tween.*;
    import flash.display.*;
    import flash.events.*;
    import res.battle.images.*;
    import res.images.battle.*;

    public class CenterLineInfo extends flash.display.Sprite
    {
        public function CenterLineInfo(arg1:Number=400, arg2:Number=240)
        {
            _bgSprite = new flash.display.Sprite();
            _textSprite = new flash.display.Sprite();
            _subTextSprite = new flash.display.Sprite();
            super();
            addChild(_bgSprite);
            addChild(_textSprite);
            addChild(_subTextSprite);
            this.x = arg1;
            this.y = arg2;
            return;
        }

        public function createView(arg1:int):void
        {
            var loc3:*=null;
            var loc2:*=null;
            _state = arg1;
            _bgSprite.removeChildren();
            _textSprite.removeChildren();
            _subTextSprite.removeChildren();
            var loc1:*=null;
        }

        public function play():void
        {
        }

        private function _play1():void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(_textSprite).x(100).alpha(0), a24.tween.Tween24.tween(_bgSprite, 0.3).scaleY(1), a24.tween.Tween24.func(function ():void
            {
                dispatchEvent(new flash.events.Event("CenterLineView::EVENT_ANIMATION_KEY1"));
                return;
            }), a24.tween.Tween24.tween(_textSprite, 0.3).x(60).alpha(1), a24.tween.Tween24.tween(_textSprite, 0.35).x(-60), a24.tween.Tween24.func(function ():void
            {
                dispatchEvent(new flash.events.Event("CenterLineView::EVENT_ANIMATION_KEY2"));
                return;
            }), a24.tween.Tween24.tween(_textSprite, 0.5).x(-100).alpha(0), a24.tween.Tween24.tween(_bgSprite, 0.3).scaleY(0)).onComplete(function ():void
            {
                dispatchEvent(new flash.events.Event("CenterLineView::EVENT_ANIMATION_END"));
                return;
            }).play()
            return;
        }

        private function _play2():void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(_textSprite).x(-311).alpha(0), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_bgSprite, 0.3).scaleY(1), a24.tween.Tween24.tween(_textSprite, 0.1).alpha(1).delay(0.25), a24.tween.Tween24.tween(_textSprite, 0.2).x(-184).delay(0.35)), a24.tween.Tween24.func(function ():void
            {
                dispatchEvent(new flash.events.Event("CenterLineView::EVENT_ANIMATION_KEY1"));
                return;
            }), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_textSprite, 0.75).x(-123), a24.tween.Tween24.prop(_subTextSprite).xy(0, 73).visible(true).delay(0.2)), a24.tween.Tween24.func(function ():void
            {
                dispatchEvent(new flash.events.Event("CenterLineView::EVENT_ANIMATION_KEY2"));
                return;
            }), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_textSprite, 0.35).alpha(0).x(7), a24.tween.Tween24.tween(_bgSprite, 0.3).scaleY(0).delay(0.3), a24.tween.Tween24.tween(_subTextSprite, 0.3).x(-400).alpha(0).delay(0.15))).onComplete(function ():void
            {
                dispatchEvent(new flash.events.Event("CenterLineView::EVENT_ANIMATION_END"));
                return;
            }).play()
            return;
        }

        public static const EVENT_ANIMATION_KEY1:String="CenterLineView::EVENT_ANIMATION_KEY1";

        public static const EVENT_ANIMATION_KEY2:String="CenterLineView::EVENT_ANIMATION_KEY2";

        public static const EVENT_ANIMATION_END:String="CenterLineView::EVENT_ANIMATION_END";

        public static const MESSAGE_SAKUTEKI_KAISHI:int=0;

        public static const MESSAGE_TEKIKANTANI_HAKKEN:int=1;

        public static const MESSAGE_TEKIKANTANI_HAKKEN_2:int=2;

        public static const MESSAGE_TEKIKANTANI_HAKKEN_DEKIZU:int=3;

        public static const MESSAGE_SAKUTEKIKI_MIKITOU:int=4;

        public static const MESSAGE_TEKIKANTAI_MIYU:int=5;

        public static const MESSAGE_RAIGEKI_KAISHI:int=6;

        private var _bgSprite:flash.display.Sprite;

        private var _textSprite:flash.display.Sprite;

        private var _subTextSprite:flash.display.Sprite;

        private var _state:int=0;
    }
}


//        class DamageNumberView
package battle.display.common
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import flash.geom.*;
    import res.battle.movieclips.*;

    public class DamageNumberView extends flash.display.Sprite
    {
        public function DamageNumberView(arg1:flash.geom.Point)
        {
            super();
            x = arg1.x + 59;
            y = arg1.y + 7;
            _view = new res.battle.movieclips.DamageNumberMC();
            _view.stop();
            addChild(_view);
            visible = false;
            return;
        }

        public function createAnimationTween(arg1:int, arg2:Boolean, arg3:int, arg4:Number):a24.tween.Tween24
        {
            this.damage = arg1;
            this.hitstate = arg3;
            return getTween(arg4);
        }

        public function getTween(arg1:Number):a24.tween.Tween24
        {
            var loc6:*=0;
            var loc4:*=hitstate == 2;
            if (damage <= 0)
            {
                loc4 = false;
            }
            if (damage < 15)
            {
                loc4 = false;
            }
            if (40 <= damage)
            {
                loc4 = true;
            }
            if (damage == 0)
            {
                hitstate = 0;
            }
            var loc3:*=Math.min(damage, 9999);
            var loc7:*=10;
            var loc8:*=10;
            var loc1:*=10;
            var loc2:*=10;
            if (hitstate != 0)
            {
                loc7 = Math.floor(loc3 / 1000);
                loc6 = loc3 % 1000;
                loc8 = Math.floor(loc6 / 100);
                loc6 = loc3 % 100;
                loc1 = Math.floor(loc6 / 10);
                loc2 = loc6 % 10;
                if (loc7 == 0)
                {
                    loc7 = 10;
                    if (loc8 == 0)
                    {
                        loc8 = 10;
                        if (loc1 == 0)
                        {
                            loc1 = 10;
                            if (loc2 == 0)
                            {
                                loc2 = 11;
                            }
                        }
                    }
                }
            }
            else
            {
                loc2 = 11;
            }
            _view.k1.gotoAndStop(loc7 + 1 + (loc4 ? 12 : 0));
            _view.k2.gotoAndStop(loc8 + 1 + (loc4 ? 12 : 0));
            _view.k3.gotoAndStop(loc1 + 1 + (loc4 ? 12 : 0));
            _view.k4.gotoAndStop(loc2 + 1 + (loc4 ? 12 : 0));
            _view.critdisp.visible = loc4;
            var loc5:*=a24.tween.Tween24.serial(a24.tween.Tween24.visible(true, this), common.util.MCUtil.frameTween(_view, 1, 36), a24.tween.Tween24.removeChild(this));
            if (arg1 >= 0)
            {
                return a24.tween.Tween24.parallel(a24.tween.Tween24.func(loc5.play), a24.tween.Tween24.wait(arg1));
            }
            return loc5;
        }

        private var _view:res.battle.movieclips.DamageNumberMC;

        public var damage:int=0;

        public var hitstate:int=1;
    }
}


//        class RaderView
package battle.display.common
{
    import a24.tween.*;
    import battle.views.effects.plane.*;
    import common.debug.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import res.battle.*;
    import res.battle.images.*;

    public class RaderView extends flash.display.Sprite
    {
        public function RaderView(arg1:Boolean=false)
        {
            _wave1 = new flash.display.Sprite();
            _wave2 = new flash.display.Sprite();
            _bg = new flash.display.Sprite();
            _formationPointsLayer = new flash.display.Sprite();
            _touchPlaneLayer = new flash.display.Sprite();
            super();
            _isEnemy = arg1;
            _wave1 = common.util.Util.createImageResourceWithCentering(res.battle.images.ImgRaderWave);
            _wave2 = common.util.Util.createImageResourceWithCentering(res.battle.images.ImgRaderWave);
            _bg = common.util.Util.createImageResourceWithCentering(res.battle.images.ImgRaderBG);
            _wave1.alpha = 0;
            var loc1:*;
            _wave1.scaleY = loc1 = 0;
            _wave1.scaleX = loc1;
            _wave2.alpha = 0;
            _wave2.scaleY = loc1 = 0;
            _wave2.scaleX = loc1;
            _bg.scaleY = loc1 = 0;
            _bg.scaleX = loc1;
            addChild(_wave1);
            addChild(_wave2);
            addChild(_bg);
            addChild(_formationPointsLayer);
            addChild(_touchPlaneLayer);
            return;
        }

        public function isShow():Boolean
        {
            return _isShow;
        }

        public function isJinShow():Boolean
        {
            return _isJinShow;
        }

        public function finalize():void
        {
            removeChildren();
            _formationPointsLayer.removeChildren();
            return;
        }

        public function getTweenShow(arg1:int=0, arg2:int=0, arg3:Number=0.8):a24.tween.Tween24
        {
            var loc1:*=null;
            _formationPointsLayer.removeChildren();
            _formationPoints1 = new res.battle.MCFormation();
            _formationPoints1.stop();
            _formationPoints1.alpha = 0;
            var loc2:*;
            _formationPoints1.scaleY = loc2 = 0.65;
            _formationPoints1.scaleX = loc2;
            _formationPointsLayer.addChild(_formationPoints1);
            if (arg2 > 0)
            {
                _isShow = true;
                _isJinShow = true;
                loc1 = a24.tween.Tween24.serial(a24.tween.Tween24.tween(_bg, arg3).scale(1), a24.tween.Tween24.tween(_formationPoints1, 0.4).alpha(1), _createShipPointShowTween(arg1, arg2, _formationPoints1));
            }
            else
            {
                _isShow = true;
                loc1 = a24.tween.Tween24.serial(a24.tween.Tween24.tween(_bg, arg3).scale(1));
            }
            return loc1;
        }

        public function getTweenShowCombined(arg1:int, arg2:int, arg3:int, arg4:int, arg5:Number=0.8):a24.tween.Tween24
        {
            var loc3:*=null;
            var loc1:*=0;
            var loc2:*=0;
            _formationPointsLayer.removeChildren();
            _formationPoints1 = new res.battle.MCCombinedMainFormation();
            _formationPoints1.stop();
            _formationPoints1.alpha = 0;
            _formationPointsLayer.addChild(_formationPoints1);
            _formationPoints2 = new res.battle.MCCombinedSubFormation();
            _formationPoints2.stop();
            _formationPoints2.alpha = 0;
            _formationPointsLayer.addChild(_formationPoints2);
            if (arg2 > 0 && arg3 > 0)
            {
                _isShow = true;
                _isJinShow = true;
                if (arg4 != 1)
                {
                    if (arg4 != 2)
                    {
                        loc1 = 6;
                    }
                    else
                    {
                        loc1 = 3;
                    }
                }
                else
                {
                    loc1 = 4;
                }
                loc2 = 5;
                loc3 = a24.tween.Tween24.serial(a24.tween.Tween24.tween(_bg, arg5).scale(1), a24.tween.Tween24.tween([_formationPoints1, _formationPoints2], 0.4).alpha(1), _createShipPointShowTween(arg1 - 10, arg2, _formationPoints1, loc1), _createShipPointShowTween(arg1 - 10, arg3, _formationPoints2, loc2));
            }
            else
            {
                _isShow = true;
                loc3 = a24.tween.Tween24.serial(a24.tween.Tween24.tween(_bg, arg5).scale(1));
            }
            return loc3;
        }

        public function wave():void
        {
            if (_waveAnimationNow == true)
            {
                return;
            }
            if (_isShow == false)
            {
                return;
            }
            _waveAnimationNow = true;
            a24.tween.Tween24.parallel(a24.tween.Tween24.serial(a24.tween.Tween24.prop(_wave1).alpha(1), a24.tween.Tween24.tween(_wave1, 0.8).alpha(1).scale(1), a24.tween.Tween24.tween(_wave1, 0.2).alpha(0).scale(1.2), a24.tween.Tween24.prop(_wave1).scale(0).alpha(0)), a24.tween.Tween24.serial(a24.tween.Tween24.prop(_wave2).alpha(1), a24.tween.Tween24.tween(_wave2, 0.8).alpha(1).scale(1), a24.tween.Tween24.tween(_wave2, 0.2).alpha(0).scale(1.2), a24.tween.Tween24.prop(_wave2).scale(0).alpha(0)).delay(0.4)).onComplete(function ():void
            {
                _waveAnimationNow = false;
                dispatchEvent(new flash.events.Event("RaderView::EVENT_ANIMATION_END_WAVE"));
                return;
            }).play()
            return;
        }

        public function showTouchPlane(arg1:int, arg2:Boolean):void
        {
            var loc1:*=new battle.views.effects.plane.TouchPlane(arg1, !_isEnemy, arg2);
            a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "触接発生:" + (_isEnemy ? "相手側" : "味方側")), loc1.getTweenInitialize(), a24.tween.Tween24.addChild(_touchPlaneLayer, loc1), a24.tween.Tween24.func(loc1.animationStart)).play();
            return;
        }

        public function hideTouchPlane():void
        {
            var loc1:*=null;
            if (_touchPlaneLayer.numChildren > 0 && _touchPlaneLayer.getChildAt(0) is battle.views.effects.plane.TouchPlane)
            {
                loc1 = _touchPlaneLayer.getChildAt(0) as battle.views.effects.plane.TouchPlane;
                loc1.animationEnd();
            }
            else
            {
                _touchPlaneLayer.removeChildren();
            }
            return;
        }

        private function _createShipPointShowTween(arg1:int, arg2:int, arg3:flash.display.MovieClip, arg4:int=-1):a24.tween.Tween24
        {
            var loc4:*=0;
            var loc1:*=null;
            var loc2:*=null;
            arg4 = arg4 != -1 ? arg4 : _isEnemy ? 2 : 1;
            arg3.gotoAndStop((arg1 - 1) * 10 + arg2);
            var loc3:*=[];
            loc4 = 0;
            while (loc4 < arg3.numChildren)
            {
                (loc1 = arg3.getChildAt(loc4) as flash.display.MovieClip).visible = false;
                loc1.gotoAndStop(arg4);
                loc2 = a24.tween.Tween24.prop(loc1).visible(true).delay(loc4 * 0.1);
                loc3.push(loc2);
                ++loc4;
            }
            return a24.tween.Tween24.parallel(loc3);
        }

        public static const EVENT_ANIMATION_END_WAVE:String="RaderView::EVENT_ANIMATION_END_WAVE";

        private var _waveAnimationNow:Boolean=false;

        private var _wave1:flash.display.Sprite;

        private var _wave2:flash.display.Sprite;

        private var _bg:flash.display.Sprite;

        private var _formationPointsLayer:flash.display.Sprite;

        private var _formationPoints1:flash.display.MovieClip=null;

        private var _formationPoints2:flash.display.MovieClip=null;

        private var _touchPlaneLayer:flash.display.Sprite;

        private var _isEnemy:Boolean=false;

        private var _isShow:Boolean=false;

        private var _isJinShow:Boolean=false;
    }
}


//        class Shield
package battle.display.common
{
    import a24.tween.*;
    import battle.display.main.banner.*;
    import flash.display.*;

    public class Shield extends flash.display.Sprite
    {
        public function Shield(arg1:battle.display.main.banner.BattleBanner, arg2:battle.display.main.banner.BattleBanner)
        {
            super();
            _target = arg1;
            _defender = arg2;
            _bmp = new _ImgCls();
            _bmp.smoothing = true;
            _bmp.x = (-_bmp.width) / 2;
            _bmp.y = (-_bmp.height) / 2;
            _bmp.alpha = 0;
            addChild(_bmp);
            return;
        }

        public function get target():battle.display.main.banner.BattleBanner
        {
            return _target;
        }

        public function get defender():battle.display.main.banner.BattleBanner
        {
            return _defender;
        }

        public function getTween(arg1:Number):a24.tween.Tween24
        {
            var loc1:*=a24.tween.Tween24.serial(a24.tween.Tween24.prop(_bmp).alpha(0), a24.tween.Tween24.tween(_bmp, 0.1).alpha(1), a24.tween.Tween24.tween(_bmp, 0.1).color(8454143), a24.tween.Tween24.tween(_bmp, 0.1).color(16761024), a24.tween.Tween24.tween(_bmp, 0.1).alpha(0), a24.tween.Tween24.prop(_bmp).color());
            if (arg1 >= 0)
            {
                return a24.tween.Tween24.parallel(a24.tween.Tween24.func(loc1.play), a24.tween.Tween24.wait(arg1));
            }
            return loc1;
        }

        private const _ImgCls:Class=shield_png$f90866d61f09304ed4b65cd1a8d0dbbc1744783129;

        private var _bmp:flash.display.Bitmap;

        private var _target:battle.display.main.banner.BattleBanner=null;

        private var _defender:battle.display.main.banner.BattleBanner=null;
    }
}


//        class UpperBar
package battle.display.common
{
    import a24.tween.*;
    import common.debug.*;
    import flash.display.*;
    import flash.events.*;
    import res.battle.*;

    public class UpperBar extends flash.display.Sprite
    {
        public function UpperBar()
        {
            super();
            _view = new res.battle.UpperBarMC();
            _view.stop();
            _view.gear.stop();
            addChild(_view);
            visible = false;
            return;
        }

        public function getTween(arg1:int, arg2:Number):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(_getTweenShow(arg1), a24.tween.Tween24.wait(arg2), _getTweenHide());
        }

        public function show(arg1:int):void
        {
            var phase:int;

            phase = arg1;
            if (_nowAnimTween != null)
            {
                _nowAnimTween.skip();
            }
            _nowPhase = phase;
            _nowAnimTween = _getTweenShow(phase);
            _nowAnimTween.onComplete(function ():void
            {
                _nowAnimTween = null;
                return;
            }).play()
            return;
        }

        public function hide(arg1:int):void
        {
            var phase:int;

            phase = arg1;
            if (_nowPhase != phase)
            {
                return;
            }
            if (_nowAnimTween != null)
            {
                _nowAnimTween.stop();
            }
            _nowAnimTween = _getTweenHide();
            _nowAnimTween.onComplete(function ():void
            {
                _nowAnimTween = null;
                return;
            }).play()
            return;
        }

        private function _getTweenShow(arg1:int):a24.tween.Tween24
        {
            var loc2:*=0;
            var loc1:*=0;
        }

        private function _getTweenHide():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "UpperBar::hide tween start "), a24.tween.Tween24.tween(this, 0.6).alpha(0), a24.tween.Tween24.func(_view.gotoAndStop, 1), a24.tween.Tween24.prop(this).visible(false), a24.tween.Tween24.func(_view.removeEventListener, "enterFrame", _handleEnterframe), a24.tween.Tween24.func(common.debug.Debug.log, "UpperBar::hide tween end"));
        }

        private function _handleEnterframe(arg1:flash.events.Event):void
        {
            if (_view.gear == null)
            {
                _view.removeEventListener("enterFrame", _handleEnterframe);
            }
            else
            {
                _view.gear.rotation = _view.gear.rotation + 2;
            }
            return;
        }

        private var _view:res.battle.UpperBarMC;

        private var _nowPhase:int=-1;

        private var _nowAnimTween:a24.tween.Tween24;
    }
}


//      package cutin
//        class Cutin
package battle.display.cutin
{
    import a24.tween.*;
    import battle.events.*;
    import battle.vo.*;
    import common.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import vo.*;

    public class Cutin extends flash.display.Sprite
    {
        public function Cutin(arg1:Boolean, arg2:Boolean, arg3:int=-1, arg4:int=-1)
        {
            super();
            this.x = 800 / 2;
            this.y = 480 / 2;
            _isFriend = arg1;
            _isNight = arg2;
            _bg = new battle.display.cutin.CutinText(_isFriend, arg2, arg4);
            _type = arg3 != -1 ? arg3 : Math.floor(Math.random() * 4) + 1;
        }

        public function getTweenInitialize(arg1:battle.vo.BattleShipData, arg2:int, arg3:int):a24.tween.Tween24
        {
            var shipData:battle.vo.BattleShipData;
            var slotitemID:int;
            var attackType:int;
            var eType:int;
            var attacher:manager.resource.IShipAttacher;
            var slotitemIDs:Array;
            var isEquiped:Boolean;
            var i:int;
            var slotMC:flash.display.MovieClip;
            var tmpSLotitemID:int;
            var iconType:int;
            var slotIconMC:flash.display.MovieClip;
            var ring:MC_MarriageRing_S;

            var loc1:*;
            shipData = arg1;
            slotitemID = arg2;
            attackType = arg3;
            _shipData = shipData;
            _slotitemID = slotitemID;
            eType = DataFacade.getMasterSlotItemData().getSlotItemEquipType(_slotitemID);
            if (!(eType == 1 || eType == 2 || eType == 3 || eType == 4 || eType == 5 || eType == 32 || eType == 38))
            {
                _slotitemID = -1;
            }
            _mc.ship.canvas.removeChildren();
            attacher = AppFacade.createShipAttacher();
            attacher.stackFull(shipData.getCharaID(), _mc.ship.canvas, shipData.getCondition());
            if (attackType == 0 && !(_slotitemID == -1))
            {
                if (shipData.getSLotItemCount() <= 4)
                {
                    _mc.statusWindow.box.gotoAndStop(1);
                }
                else
                {
                    _mc.statusWindow.box.gotoAndStop(2);
                }
                _mc.statusWindow.box.ship.text = shipData.getName();
                _mc.statusWindow.box.lv.text = shipData.getLevel();
                _mc.statusWindow.box.powup1.text = shipData.getKaryoku();
                _mc.statusWindow.box.powup2.text = shipData.getRaisou();
                _mc.statusWindow.box.powup3.text = shipData.getTaiku();
                _mc.statusWindow.box.powup4.text = shipData.getSoukou();
                _mc.statusWindow.box.bar.gotoAndStop(Math.floor(shipData.getHPRate() * 100));
                slotitemIDs = shipData.getSlotItemIDs();
                isEquiped = false;
                i = 0;
                while (i < 5)
                {
                    if (!(shipData.getSLotItemCount() <= i))
                    {
                        slotMC = _mc.statusWindow.box["s" + (i + 1)];
                        slotMC.stop();
                        slotMC.removeChildren();
                        if (i < shipData.getSLotItemCount())
                        {
                            tmpSLotitemID = Math.max(slotitemIDs[i], 0);
                            iconType = DataFacade.getMasterSlotItemData().getSlotItemIconType(tmpSLotitemID);
                            slotIconMC = new Assets.SlotitemIconMC();
                            slotIconMC.gotoAndStop(iconType + 1);
                            slotMC.addChild(slotIconMC);
                            if (tmpSLotitemID != 0)
                            {
                                isEquiped = true;
                            }
                        }
                    }
                    ++i;
                }
                if (isEquiped != false)
                {
                    if (common.util.Util.isMarriaged(shipData.getLevel()))
                    {
                        _mc.statusWindow.box.ship.textColor = 16766947;
                        ring = new MC_MarriageRing_S();
                        ring.x = _isFriend ? -99 : -46;
                        ring.y = -4;
                        _mc.statusWindow.box.addChild(ring);
                    }
                }
                else
                {
                    _bg.visible = false;
                    _mc.statusWindow.visible = false;
                }
            }
            else
            {
                _bg.visible = false;
                _mc.statusWindow.visible = false;
            }
            return a24.tween.Tween24.serial(_bg.getTweenInitialize(_slotitemID, common.Consts.isEnemyCharacter(shipData.getCharaID())), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load)), a24.tween.Tween24.func(function ():void
            {
                var loc1:*=shipData.getCondition();
                var loc3:*=DataFacade.getStartData();
                var loc2:*=loc3.getOffsetAtBattle(shipData.getCharaID(), common.util.Util.isDamaged(loc1));
                _mc.ship.canvas.x = -80 + loc2.x;
                _mc.ship.canvas.y = -80 + loc2.y;
                if (_mc.ship.canvas.scaleX == -1)
                {
                    _mc.ship.canvas.x = _mc.ship.canvas.x + (617 - (loc2.x + loc2.x));
                }
                return;
            }))
        }

        public function getTween():a24.tween.Tween24
        {
            var loc1:*=new battle.events.ShipVoiceEvent();
            loc1.ship = _shipData;
            return a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, 1, LABEL_KEY1), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_cutinMove), _bg.getTween(), a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, LABEL_KEY1, LABEL_KEY2), a24.tween.Tween24.func(dispatchEvent, loc1), a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("complete")), common.util.MCUtil.frameTween(_mc, LABEL_KEY2, LABEL_KEY3)))).onComplete(_finalize);
        }

        private function _finalize():void
        {
            a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, LABEL_KEY3, _mc.totalFrames), a24.tween.Tween24.removeChild(this)).play();
            return;
        }

        private var LABEL_KEY1:int=8;

        private var LABEL_KEY2:int=16;

        private var LABEL_KEY3:int=33;

        private var _bg:battle.display.cutin.CutinText;

        private var _mc:flash.display.MovieClip;

        private var _isFriend:Boolean;

        private var _isNight:Boolean;

        private var _type:int=-1;

        private var _shipData:battle.vo.BattleShipData;

        private var _slotitemID:int;
    }
}


//        class CutinDouble
package battle.display.cutin
{
    import a24.tween.*;
    import battle.events.*;
    import battle.vo.*;
    import common.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import vo.*;

    public class CutinDouble extends flash.display.Sprite
    {
        public function CutinDouble(arg1:Boolean, arg2:Boolean, arg3:int=-1, arg4:int=-1, arg5:int=-1)
        {
            super();
            _isFriend = arg1;
            this.x = 800 / 2;
            this.y = 480 / 2;
            _bg1 = new battle.display.cutin.CutinText(arg1, arg2, arg4);
            _bg2 = new battle.display.cutin.CutinText(arg1, arg2, arg5);
            _type = arg3 != -1 ? arg3 : Math.floor(Math.random() * 4) + 1;
        }

        public function getTweenInitialize(arg1:battle.vo.BattleShipData, arg2:int, arg3:int):a24.tween.Tween24
        {
            var shipData:battle.vo.BattleShipData;
            var slotitemID1:int;
            var slotitemID2:int;
            var charaID:int;
            var isEnemyCharacter:Boolean;
            var attacher:manager.resource.IShipAttacher;
            var slotitemIDs:Array;
            var i:int;
            var slotMC:flash.display.MovieClip;
            var tmpSLotitemID:int;
            var iconType:int;
            var slotIconMC:flash.display.MovieClip;
            var ring:MC_MarriageRing_S;

            var loc1:*;
            shipData = arg1;
            slotitemID1 = arg2;
            slotitemID2 = arg3;
            _shipData = shipData;
            _slotitemID1 = slotitemID1;
            _slotitemID2 = slotitemID2;
            charaID = shipData.getCharaID();
            isEnemyCharacter = common.Consts.isEnemyCharacter(charaID);
            _mc.ship.canvas.removeChildren();
            attacher = AppFacade.createShipAttacher();
            attacher.stackFull(charaID, _mc.ship.canvas, shipData.getCondition());
            if (shipData.getSLotItemCount() <= 4)
            {
                _mc.statusWindow.box.gotoAndStop(1);
            }
            else
            {
                _mc.statusWindow.box.gotoAndStop(2);
            }
            _mc.statusWindow.box.ship.text = shipData.getName();
            _mc.statusWindow.box.lv.text = shipData.getLevel();
            _mc.statusWindow.box.powup1.text = shipData.getKaryoku();
            _mc.statusWindow.box.powup2.text = shipData.getRaisou();
            _mc.statusWindow.box.powup3.text = shipData.getTaiku();
            _mc.statusWindow.box.powup4.text = shipData.getSoukou();
            _mc.statusWindow.box.bar.gotoAndStop(Math.floor(shipData.getHPRate() * 100));
            slotitemIDs = shipData.getSlotItemIDs();
            i = 0;
            while (i < 5)
            {
                if (!(shipData.getSLotItemCount() <= i))
                {
                    slotMC = _mc.statusWindow.box["s" + (i + 1)];
                    slotMC.stop();
                    slotMC.removeChildren();
                    if (i < shipData.getSLotItemCount())
                    {
                        tmpSLotitemID = Math.max(slotitemIDs[i], 0);
                        iconType = DataFacade.getMasterSlotItemData().getSlotItemIconType(tmpSLotitemID);
                        slotIconMC = new Assets.SlotitemIconMC();
                        slotIconMC.gotoAndStop(iconType + 1);
                        slotMC.addChild(slotIconMC);
                    }
                }
                ++i;
            }
            if (common.util.Util.isMarriaged(shipData.getLevel()))
            {
                _mc.statusWindow.box.ship.textColor = 16766947;
                ring = new MC_MarriageRing_S();
                ring.x = _isFriend ? -99 : -46;
                ring.y = -4;
                _mc.statusWindow.box.addChild(ring);
            }
            return a24.tween.Tween24.serial(_bg1.getTweenInitialize(_slotitemID1, isEnemyCharacter), _bg2.getTweenInitialize(_slotitemID2, isEnemyCharacter), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load)), a24.tween.Tween24.func(function ():void
            {
                var loc1:*=shipData.getCondition();
                var loc3:*=DataFacade.getStartData();
                var loc2:*=loc3.getOffsetAtBattle(shipData.getCharaID(), common.util.Util.isDamaged(loc1));
                _mc.ship.canvas.x = -80 + loc2.x;
                _mc.ship.canvas.y = -80 + loc2.y;
                if (_mc.ship.canvas.scaleX == -1)
                {
                    _mc.ship.canvas.x = _mc.ship.canvas.x + (617 - (loc2.x + loc2.x));
                }
                return;
            }))
        }

        public function getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, 1, LABEL_KEY1), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_cutinMove), _bg1.getTween(), common.util.MCUtil.frameTween(_mc, LABEL_KEY1, LABEL_KEY2), a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("CutinDouble::EVENT_ATTACK_TIMING1")).delay(0.6)), a24.tween.Tween24.func(_playVoice, _shipData), common.util.MCUtil.frameTween(_mc, LABEL_KEY2, LABEL_KEY3), a24.tween.Tween24.parallel(_bg2.getTween(), a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, LABEL_KEY3, LABEL_KEY4), a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("CutinDouble::EVENT_ATTACK_TIMING2")), common.util.MCUtil.frameTween(_mc, LABEL_KEY4, LABEL_KEY5)))).onComplete(_finalize);
        }

        private function _playVoice(arg1:battle.vo.BattleShipData):void
        {
            dispatchEvent(new battle.events.ShipVoiceEvent());
            return;
        }

        private function _finalize():void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("complete")), common.util.MCUtil.frameTween(_mc, LABEL_KEY5, _mc.totalFrames), a24.tween.Tween24.removeChild(this)).play();
            return;
        }

        public static const EVENT_ATTACK_TIMING1:String="CutinDouble::EVENT_ATTACK_TIMING1";

        public static const EVENT_ATTACK_TIMING2:String="CutinDouble::EVENT_ATTACK_TIMING2";

        private var LABEL_KEY1:int=8;

        private var LABEL_KEY2:int=29;

        private var LABEL_KEY3:int=38;

        private var LABEL_KEY4:int=50;

        private var LABEL_KEY5:int=70;

        private var _bg1:battle.display.cutin.CutinText;

        private var _bg2:battle.display.cutin.CutinText;

        private var _mc:flash.display.MovieClip;

        private var _isFriend:Boolean;

        private var _type:int=-1;

        private var _shipData:battle.vo.BattleShipData;

        private var _slotitemID1:int;

        private var _slotitemID2:int;
    }
}


//        class CutinSuperRR
package battle.display.cutin
{
    import a24.tween.*;
    import battle.events.*;
    import battle.util.*;
    import common.*;
    import common.display.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import vo.*;

    public class CutinSuperRR extends flash.display.Sprite
    {
        public function CutinSuperRR()
        {
            _bg = new common.display.FadeLayer();
            super();
            _mc = new res.battle.MCCutinSuperRR();
            _mc.stop();
            addChild(_bg);
            addChild(_mc);
            return;
        }

        public function getTweenInitialize(arg1:int, arg2:int, arg3:int, arg4:int, arg5:int, arg6:Boolean):a24.tween.Tween24
        {
            var charaID:int;
            var characterCondition:int;
            var slotitemID1:int;
            var slotitemID2:int;
            var slotitemID3:int;
            var isFriend:Boolean;
            var attacher:manager.resource.IShipAttacher;
            var itemAttacher:manager.resource.ISlotitemAttacher;
            var isEnemyCharacter:Boolean;

            var loc2:*;
            charaID = arg1;
            characterCondition = arg2;
            slotitemID1 = arg3;
            slotitemID2 = arg4;
            slotitemID3 = arg5;
            isFriend = arg6;
            _charaID = charaID;
            _isFriend = isFriend;
            _slotitemID1 = slotitemID1;
            _slotitemID2 = slotitemID2;
            _slotitemID3 = slotitemID3;
            if (!isFriend)
            {
                _mc.scaleX = -1;
                _mc.x = 800;
                _mc.ship.canvas.scaleX = -1;
                var loc1:*;
                _mc.we3.canvas.scaleX = loc1 = -1;
                _mc.we2.canvas.scaleX = loc1 = loc1;
                _mc.we1.canvas.scaleX = loc1;
            }
            _mc.bg1.gotoAndStop(isFriend ? 1 : 2);
            _mc.bg2.gotoAndStop(isFriend ? 1 : 2);
            _mc.bg3.gotoAndStop(isFriend ? 1 : 2);
            _mc.ship.canvas.removeChildren();
            attacher = AppFacade.createShipAttacher();
            attacher.stackFull(charaID, _mc.ship.canvas, characterCondition);
            _mc.gr1.removeChildren();
            _mc.we1.canvas.removeChildren();
            _mc.gr2.removeChildren();
            _mc.we2.canvas.removeChildren();
            _mc.gr3.removeChildren();
            _mc.we3.canvas.removeChildren();
            itemAttacher = AppFacade.createSlotitemAttacher();
            isEnemyCharacter = common.Consts.isEnemyCharacter(charaID);
            if (isEnemyCharacter)
            {
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID1), _mc.gr1);
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID2), _mc.gr2);
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID3), _mc.gr3);
            }
            else
            {
                itemAttacher.stackItemUp(_slotitemID1, _mc.gr1);
                itemAttacher.stackItemUp(_slotitemID2, _mc.gr2);
                itemAttacher.stackItemUp(_slotitemID3, _mc.gr3);
            }
            itemAttacher.stackBtxt(_slotitemID1, _mc.we1.canvas);
            itemAttacher.stackBtxt(_slotitemID2, _mc.we2.canvas);
            itemAttacher.stackBtxt(_slotitemID3, _mc.we3.canvas);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load), a24.tween.Tween24.waitEvent(itemAttacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(itemAttacher.load)), a24.tween.Tween24.func(function ():void
            {
                var loc2:*=DataFacade.getStartData();
                var loc1:*=loc2.getOffsetAtBattle(charaID, common.util.Util.isDamaged(characterCondition));
                _mc.ship.canvas.x = -80 + loc1.x;
                _mc.ship.canvas.y = -80 + loc1.y;
                _mc.we1.canvas.y = (-_mc.we1.canvas.height) / 2;
                _mc.we2.canvas.y = (-_mc.we2.canvas.height) / 2;
                _mc.we3.canvas.y = (-_mc.we3.canvas.height) / 2;
                if (_mc.we1.canvas.scaleX != 1)
                {
                    _mc.ship.canvas.x = _mc.ship.canvas.x + (629 - (loc1.x + loc1.x));
                    _mc.ship.canvas.y = _mc.ship.canvas.y - 34;
                    _mc.we1.canvas.x = 9;
                    _mc.we2.canvas.x = 9;
                    _mc.we3.canvas.x = 9;
                }
                else
                {
                    _mc.we1.canvas.x = -9 - _mc.we1.canvas.width;
                    _mc.we2.canvas.x = -9 - _mc.we2.canvas.width;
                    _mc.we3.canvas.x = -9 - _mc.we3.canvas.width;
                }
                return;
            }))
        }

        public function getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(_bg.getTween(0.9, 10 / 30), common.util.MCUtil.frameTween(_mc, 1, LABEL_KEY1), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.4), a24.tween.Tween24.func(_frameScript_playSE_don).delay(0.633333333333), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.833333333333), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.06666666667), a24.tween.Tween24.func(_frameScript_playSE_card).delay(1.26666666667), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.5), a24.tween.Tween24.func(_playVoice).delay(1.83333333333)), _bg.getTween(0, 0)).onComplete(_finalize);
        }

        private function _finalize():void
        {
            a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, LABEL_KEY1, _mc.totalFrames), a24.tween.Tween24.removeChild(this)).play();
            return;
        }

        private function _frameScript_playSE_card():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_card);
            return;
        }

        private function _frameScript_playSE_don():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_don);
            return;
        }

        private function _playVoice():void
        {
            dispatchEvent(new battle.events.ShipVoiceEvent());
            return;
        }

        private var LABEL_KEY1:int=71;

        private var _bg:common.display.FadeLayer;

        private var _mc:res.battle.MCCutinSuperRR;

        private var _isFriend:Boolean;

        private var _type:int=-1;

        private var _charaID:int;

        private var _slotitemID1:int;

        private var _slotitemID2:int;

        private var _slotitemID3:int;
    }
}


//        class CutinSuperSR
package battle.display.cutin
{
    import a24.tween.*;
    import battle.events.*;
    import battle.util.*;
    import common.*;
    import common.display.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import vo.*;

    public class CutinSuperSR extends flash.display.Sprite
    {
        public function CutinSuperSR()
        {
            _bg = new common.display.FadeLayer();
            super();
            _mc = new res.battle.MCCutinSuperSR();
            _mc.stop();
            addChild(_bg);
            addChild(_mc);
            return;
        }

        public function getTweenInitialize(arg1:int, arg2:int, arg3:int, arg4:int, arg5:int, arg6:Boolean):a24.tween.Tween24
        {
            var charaID:int;
            var characterCondition:int;
            var slotitemID1:int;
            var slotitemID2:int;
            var slotitemID3:int;
            var isFriend:Boolean;
            var attacher:manager.resource.IShipAttacher;
            var itemAttacher:manager.resource.ISlotitemAttacher;
            var isEnemyCharacter:Boolean;

            var loc2:*;
            charaID = arg1;
            characterCondition = arg2;
            slotitemID1 = arg3;
            slotitemID2 = arg4;
            slotitemID3 = arg5;
            isFriend = arg6;
            _charaID = charaID;
            _isFriend = isFriend;
            _slotitemID1 = slotitemID1;
            _slotitemID2 = slotitemID2;
            _slotitemID3 = slotitemID3;
            if (!isFriend)
            {
                _mc.scaleX = -1;
                _mc.x = 800;
                _mc.ship.canvas.scaleX = -1;
                var loc1:*;
                _mc.we3.canvas.scaleX = loc1 = -1;
                _mc.we2.canvas.scaleX = loc1 = loc1;
                _mc.we1.canvas.scaleX = loc1;
            }
            _mc.bg1.gotoAndStop(isFriend ? 1 : 2);
            _mc.bg2.gotoAndStop(isFriend ? 1 : 2);
            _mc.bg3.gotoAndStop(isFriend ? 1 : 2);
            _mc.ship.canvas.removeChildren();
            attacher = AppFacade.createShipAttacher();
            attacher.stackFull(charaID, _mc.ship.canvas, characterCondition);
            _mc.gr1.removeChildren();
            _mc.we1.canvas.removeChildren();
            _mc.gr2.removeChildren();
            _mc.we2.canvas.removeChildren();
            _mc.gr3.removeChildren();
            _mc.we3.canvas.removeChildren();
            itemAttacher = AppFacade.createSlotitemAttacher();
            isEnemyCharacter = common.Consts.isEnemyCharacter(charaID);
            if (isEnemyCharacter)
            {
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID1), _mc.gr1);
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID2), _mc.gr2);
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID3), _mc.gr3);
            }
            else
            {
                itemAttacher.stackItemUp(_slotitemID1, _mc.gr1);
                itemAttacher.stackItemUp(_slotitemID2, _mc.gr2);
                itemAttacher.stackItemUp(_slotitemID3, _mc.gr3);
            }
            itemAttacher.stackBtxt(_slotitemID1, _mc.we1.canvas);
            itemAttacher.stackBtxt(_slotitemID2, _mc.we2.canvas);
            itemAttacher.stackBtxt(_slotitemID3, _mc.we3.canvas);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load), a24.tween.Tween24.waitEvent(itemAttacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(itemAttacher.load)), a24.tween.Tween24.func(function ():void
            {
                var loc2:*=DataFacade.getStartData();
                var loc1:*=loc2.getOffsetAtBattle(charaID, common.util.Util.isDamaged(characterCondition));
                _mc.ship.canvas.x = -80 + loc1.x;
                _mc.ship.canvas.y = -80 + loc1.y;
                if (_mc.ship.canvas.scaleX == -1)
                {
                    _mc.ship.canvas.x = _mc.ship.canvas.x + (617 - (loc1.x + loc1.x));
                    _mc.ship.canvas.y = _mc.ship.canvas.y + 15;
                }
                _mc.we1.canvas.x = (-_mc.we1.canvas.width) / 2;
                _mc.we1.canvas.y = (-_mc.we1.canvas.height) / 2;
                _mc.we2.canvas.x = -9;
                _mc.we2.canvas.y = (-_mc.we2.canvas.height) / 2;
                _mc.we3.canvas.x = -_mc.we3.canvas.width - 12;
                _mc.we3.canvas.y = (-_mc.we3.canvas.height) / 2;
                if (_mc.we1.canvas.scaleX == -1)
                {
                    _mc.we1.canvas.x = _mc.we1.canvas.x + _mc.we1.canvas.width;
                    _mc.we2.canvas.x = _mc.we2.canvas.x + _mc.we2.canvas.width;
                    _mc.we3.canvas.x = _mc.we3.canvas.x + _mc.we3.canvas.width;
                }
                return;
            }))
        }

        public function getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(_bg.getTween(0.9, 10 / 30), common.util.MCUtil.frameTween(_mc, 1, LABEL_KEY1), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.4), a24.tween.Tween24.func(_frameScript_playSE_don).delay(0.633333333333), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.866666666667), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.36666666667), a24.tween.Tween24.func(_playVoice).delay(1.8)), _bg.getTween(0, 0)).onComplete(_finalize);
        }

        private function _finalize():void
        {
            a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, LABEL_KEY1, _mc.totalFrames), a24.tween.Tween24.removeChild(this)).play();
            return;
        }

        private function _frameScript_playSE_card():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_card);
            return;
        }

        private function _frameScript_playSE_don():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_don);
            return;
        }

        private function _playVoice():void
        {
            dispatchEvent(new battle.events.ShipVoiceEvent());
            return;
        }

        private var LABEL_KEY1:int=73;

        private var _bg:common.display.FadeLayer;

        private var _mc:res.battle.MCCutinSuperSR;

        private var _isFriend:Boolean;

        private var _type:int=-1;

        private var _charaID:int;

        private var _slotitemID1:int;

        private var _slotitemID2:int;

        private var _slotitemID3:int;
    }
}


//        class CutinSuperSSF
package battle.display.cutin
{
    import a24.tween.*;
    import battle.events.*;
    import battle.util.*;
    import common.*;
    import common.display.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import vo.*;

    public class CutinSuperSSF extends flash.display.Sprite
    {
        public function CutinSuperSSF()
        {
            _bg = new common.display.FadeLayer();
            super();
            _mc = new res.battle.MCCutinSuperSSF();
            _mc.stop();
            addChild(_bg);
            addChild(_mc);
            return;
        }

        public function getTweenInitialize(arg1:int, arg2:int, arg3:int, arg4:int, arg5:int, arg6:Boolean):a24.tween.Tween24
        {
            var charaID:int;
            var characterCondition:int;
            var slotitemID1:int;
            var slotitemID2:int;
            var slotitemID3:int;
            var isFriend:Boolean;
            var attacher:manager.resource.IShipAttacher;
            var itemAttacher:manager.resource.ISlotitemAttacher;
            var isEnemyCharacter:Boolean;

            var loc2:*;
            charaID = arg1;
            characterCondition = arg2;
            slotitemID1 = arg3;
            slotitemID2 = arg4;
            slotitemID3 = arg5;
            isFriend = arg6;
            _charaID = charaID;
            _isFriend = isFriend;
            _slotitemID1 = slotitemID1;
            _slotitemID2 = slotitemID2;
            _slotitemID3 = slotitemID3;
            if (!isFriend)
            {
                _mc.scaleX = -1;
                _mc.x = 800;
                _mc.ship.canvas.scaleX = -1;
                var loc1:*;
                _mc.we3.canvas.scaleX = loc1 = -1;
                _mc.we2.canvas.scaleX = loc1 = loc1;
                _mc.we1.canvas.scaleX = loc1;
            }
            _mc.bg.gotoAndStop(isFriend ? 1 : 2);
            _mc.ship.canvas.removeChildren();
            attacher = AppFacade.createShipAttacher();
            attacher.stackFull(charaID, _mc.ship.canvas, characterCondition);
            _mc.gr1.removeChildren();
            _mc.we1.canvas.removeChildren();
            _mc.gr2.removeChildren();
            _mc.we2.canvas.removeChildren();
            _mc.gr3.removeChildren();
            _mc.we3.canvas.removeChildren();
            itemAttacher = AppFacade.createSlotitemAttacher();
            isEnemyCharacter = common.Consts.isEnemyCharacter(charaID);
            if (isEnemyCharacter)
            {
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID1), _mc.gr1);
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID2), _mc.gr2);
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID3), _mc.gr3);
            }
            else
            {
                itemAttacher.stackItemUp(_slotitemID1, _mc.gr1);
                itemAttacher.stackItemUp(_slotitemID2, _mc.gr2);
                itemAttacher.stackItemUp(_slotitemID3, _mc.gr3);
            }
            itemAttacher.stackBtxt(_slotitemID1, _mc.we1.canvas);
            itemAttacher.stackBtxt(_slotitemID2, _mc.we2.canvas);
            itemAttacher.stackBtxt(_slotitemID3, _mc.we3.canvas);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load), a24.tween.Tween24.waitEvent(itemAttacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(itemAttacher.load)), a24.tween.Tween24.func(function ():void
            {
                var loc2:*=DataFacade.getStartData();
                var loc1:*=loc2.getOffsetAtBattle(charaID, common.util.Util.isDamaged(characterCondition));
                _mc.ship.canvas.x = -80 + loc1.x;
                _mc.ship.canvas.y = -80 + loc1.y;
                if (_mc.ship.canvas.scaleX == -1)
                {
                    _mc.ship.canvas.x = _mc.ship.canvas.x + (455 - (loc1.x + loc1.x));
                    _mc.ship.canvas.y = _mc.ship.canvas.y + 28;
                }
                _mc.we1.canvas.x = (-_mc.we1.canvas.width) / 2;
                _mc.we1.canvas.y = (-_mc.we1.canvas.height) / 2;
                _mc.we2.canvas.x = (-_mc.we2.canvas.width) / 2;
                _mc.we2.canvas.y = (-_mc.we2.canvas.height) / 2;
                _mc.we3.canvas.x = (-_mc.we3.canvas.width) / 2;
                _mc.we3.canvas.y = (-_mc.we3.canvas.height) / 2;
                if (_mc.we1.canvas.scaleX == -1)
                {
                    _mc.we1.canvas.x = _mc.we1.canvas.x + _mc.we1.canvas.width;
                    _mc.we2.canvas.x = _mc.we2.canvas.x + _mc.we2.canvas.width;
                    _mc.we3.canvas.x = _mc.we3.canvas.x + _mc.we3.canvas.width;
                }
                return;
            }))
        }

        public function getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(_bg.getTween(0.9, 10 / 30), common.util.MCUtil.frameTween(_mc, 1, LABEL_KEY1), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.4), a24.tween.Tween24.func(_frameScript_playSE_don).delay(0.6), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.833333333333), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.03333333333), a24.tween.Tween24.func(_frameScript_playSE_card).delay(1.26666666667), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.46666666667), a24.tween.Tween24.func(_playVoice).delay(1.76666666667)), _bg.getTween(0, 0)).onComplete(_finalize);
        }

        private function _finalize():void
        {
            a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, LABEL_KEY1, _mc.totalFrames), a24.tween.Tween24.removeChild(this)).play();
            return;
        }

        private function _frameScript_playSE_card():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_card);
            return;
        }

        private function _frameScript_playSE_don():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_don);
            return;
        }

        private function _playVoice():void
        {
            dispatchEvent(new battle.events.ShipVoiceEvent());
            return;
        }

        private var LABEL_KEY1:int=70;

        private var _bg:common.display.FadeLayer;

        private var _mc:res.battle.MCCutinSuperSSF;

        private var _isFriend:Boolean;

        private var _type:int=-1;

        private var _charaID:int;

        private var _slotitemID1:int;

        private var _slotitemID2:int;

        private var _slotitemID3:int;
    }
}


//        class CutinSuperSSS
package battle.display.cutin
{
    import a24.tween.*;
    import battle.events.*;
    import battle.util.*;
    import common.*;
    import common.display.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import vo.*;

    public class CutinSuperSSS extends flash.display.Sprite
    {
        public function CutinSuperSSS()
        {
            _bg = new common.display.FadeLayer();
            super();
            _mc = new res.battle.MCCutinSuperSSS();
            _mc.stop();
            addChild(_bg);
            addChild(_mc);
            return;
        }

        public function getTweenInitialize(arg1:int, arg2:int, arg3:int, arg4:int, arg5:int, arg6:Boolean):a24.tween.Tween24
        {
            var charaID:int;
            var characterCondition:int;
            var slotitemID1:int;
            var slotitemID2:int;
            var slotitemID3:int;
            var isFriend:Boolean;
            var attacher:manager.resource.IShipAttacher;
            var itemAttacher:manager.resource.ISlotitemAttacher;
            var isEnemyCharacter:Boolean;

            var loc2:*;
            charaID = arg1;
            characterCondition = arg2;
            slotitemID1 = arg3;
            slotitemID2 = arg4;
            slotitemID3 = arg5;
            isFriend = arg6;
            _charaID = charaID;
            _isFriend = isFriend;
            _slotitemID1 = slotitemID1;
            _slotitemID2 = slotitemID2;
            _slotitemID3 = slotitemID3;
            if (!isFriend)
            {
                _mc.scaleX = -1;
                _mc.x = 800;
                _mc.ship.canvas.scaleX = -1;
                var loc1:*;
                _mc.we3.canvas.scaleX = loc1 = -1;
                _mc.we2.canvas.scaleX = loc1 = loc1;
                _mc.we1.canvas.scaleX = loc1;
            }
            _mc.bg1.gotoAndStop(isFriend ? 1 : 2);
            _mc.bg2.gotoAndStop(isFriend ? 1 : 2);
            _mc.bg3.gotoAndStop(isFriend ? 1 : 2);
            _mc.ship.canvas.removeChildren();
            attacher = AppFacade.createShipAttacher();
            attacher.stackFull(charaID, _mc.ship.canvas, characterCondition);
            _mc.gr1.removeChildren();
            _mc.we1.canvas.removeChildren();
            _mc.gr2.removeChildren();
            _mc.we2.canvas.removeChildren();
            _mc.gr3.removeChildren();
            _mc.we3.canvas.removeChildren();
            itemAttacher = AppFacade.createSlotitemAttacher();
            isEnemyCharacter = common.Consts.isEnemyCharacter(charaID);
            if (isEnemyCharacter)
            {
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID1), _mc.gr1);
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID2), _mc.gr2);
                itemAttacher.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID3), _mc.gr3);
            }
            else
            {
                itemAttacher.stackItemUp(_slotitemID1, _mc.gr1);
                itemAttacher.stackItemUp(_slotitemID2, _mc.gr2);
                itemAttacher.stackItemUp(_slotitemID3, _mc.gr3);
            }
            itemAttacher.stackBtxt(_slotitemID1, _mc.we1.canvas);
            itemAttacher.stackBtxt(_slotitemID2, _mc.we2.canvas);
            itemAttacher.stackBtxt(_slotitemID3, _mc.we3.canvas);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load), a24.tween.Tween24.waitEvent(itemAttacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(itemAttacher.load)), a24.tween.Tween24.func(function ():void
            {
                var loc2:*=DataFacade.getStartData();
                var loc1:*=loc2.getOffsetAtBattle(charaID, common.util.Util.isDamaged(characterCondition));
                _mc.ship.canvas.x = -80 + loc1.x;
                _mc.ship.canvas.y = -80 + loc1.y;
                if (_mc.ship.canvas.scaleX == -1)
                {
                    _mc.ship.canvas.x = _mc.ship.canvas.x + (512 - (loc1.x + loc1.x));
                    _mc.ship.canvas.y = _mc.ship.canvas.y + 15;
                }
                _mc.we1.canvas.x = -9;
                _mc.we1.canvas.y = (-_mc.we1.canvas.height) / 2;
                _mc.we2.canvas.x = -9;
                _mc.we2.canvas.y = (-_mc.we2.canvas.height) / 2;
                _mc.we3.canvas.x = -9;
                _mc.we3.canvas.y = (-_mc.we3.canvas.height) / 2;
                if (_mc.we1.canvas.scaleX == -1)
                {
                    _mc.we1.canvas.x = _mc.we1.canvas.x + _mc.we1.canvas.width;
                    _mc.we2.canvas.x = _mc.we2.canvas.x + _mc.we2.canvas.width;
                    _mc.we3.canvas.x = _mc.we3.canvas.x + _mc.we3.canvas.width;
                }
                return;
            }))
        }

        public function getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(_bg.getTween(0.9, 10 / 30), common.util.MCUtil.frameTween(_mc, 1, LABEL_KEY1), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.4), a24.tween.Tween24.func(_frameScript_playSE_don).delay(0.6), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.833333333333), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.03333333333), a24.tween.Tween24.func(_frameScript_playSE_card).delay(1.26666666667), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.46666666667), a24.tween.Tween24.func(_playVoice).delay(1.7)), _bg.getTween(0, 0)).onComplete(_finalize);
        }

        private function _finalize():void
        {
            a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, LABEL_KEY1, _mc.totalFrames), a24.tween.Tween24.removeChild(this)).play();
            return;
        }

        private function _frameScript_playSE_card():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_card);
            return;
        }

        private function _frameScript_playSE_don():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_don);
            return;
        }

        private function _playVoice():void
        {
            dispatchEvent(new battle.events.ShipVoiceEvent());
            return;
        }

        private var LABEL_KEY1:int=70;

        private var _bg:common.display.FadeLayer;

        private var _mc:res.battle.MCCutinSuperSSS;

        private var _isFriend:Boolean;

        private var _type:int=-1;

        private var _charaID:int;

        private var _slotitemID1:int;

        private var _slotitemID2:int;

        private var _slotitemID3:int;
    }
}


//        class CutinText
package battle.display.cutin
{
    import a24.tween.*;
    import flash.display.*;
    import flash.events.*;
    import manager.resource.*;
    import res.battle.*;

    public class CutinText extends flash.display.Sprite
    {
        public function CutinText(arg1:Boolean, arg2:Boolean, arg3:int=-1)
        {
            super();
            _isFriend = arg1;
            _type = arg3 != -1 ? arg3 : Math.floor(Math.random() * 3) + 1;
        }

        public function getTweenInitialize(arg1:int, arg2:Boolean):a24.tween.Tween24
        {
            var slotitemID:int;
            var isEnemyCharacter:Boolean;
            var attacher:manager.resource.ISlotitemAttacher;

            var loc1:*;
            slotitemID = arg1;
            isEnemyCharacter = arg2;
            weaponNameMC.canvas.removeChildren();
            if (slotitemID == -1)
            {
                return a24.tween.Tween24.wait(0);
            }
            attacher = AppFacade.createSlotitemAttacher();
            attacher.stackBtxt(slotitemID, weaponNameMC.canvas);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load)), a24.tween.Tween24.func(function ():void
            {
                weaponNameMC.canvas.x = -weaponNameMC.canvas.width + 12;
                weaponNameMC.canvas.y = (-weaponNameMC.canvas.height) / 2;
                if (weaponNameMC.canvas.scaleX < 0)
                {
                    weaponNameMC.canvas.x = weaponNameMC.canvas.x + weaponNameMC.canvas.width;
                }
                return;
            }))
        }

        public function getTween():a24.tween.Tween24
        {
            _mc.gotoAndStop(1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(function ():void
            {
                visible = weaponNameMC.canvas.numChildren;
                return;
            }), a24.tween.Tween24.tween(_mc, (_mc.totalFrames - 1) / 30).frame(_mc.totalFrames), a24.tween.Tween24.visible(false, this))
        }

        private function get weaponNameMC():flash.display.MovieClip
        {
            return _mc.weaponNameMC;
        }

        private var _isFriend:Boolean;

        private var _type:int=-1;

        private var _mc:flash.display.MovieClip;
    }
}


//        class DamageControllCutin
package battle.display.cutin
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import vo.*;

    public class DamageControllCutin extends res.battle.MCDamageControllCutin
    {
        public function DamageControllCutin()
        {
            _card1Canvas = new flash.display.Sprite();
            _card2Canvas = new flash.display.Sprite();
            _shipCanvas = new flash.display.Sprite();
            super();
            gotoAndStop("sound_savepoint");
            LABEL_PLAYSOUND_SE = currentFrame;
            gotoAndStop("branchPoint");
            LABEL_BRANCHPOINT = currentFrame;
            gotoAndStop("notSuperDamageControll");
            LABEL_SKIPPEDPOINT = currentFrame;
            gotoAndStop(1);
            stop();
            x = 800 / 2;
            y = 480 / 2;
            card1.stop();
            card1.removeChildren();
            card1.addChild(_card1Canvas);
            card2.stop();
            card2.removeChildren();
            card2.addChild(_card2Canvas);
            shipCanvas.removeChildren();
            shipCanvas.addChild(_shipCanvas);
            addFrameScript(LABEL_PLAYSOUND_SE, __frameScript_playSE);
            return;
        }

        public function get itemID():int
        {
            return _isSuperDamageControll ? 43 : 42;
        }

        public function getTween(arg1:Boolean, arg2:int):a24.tween.Tween24
        {
            _isSuperDamageControll = arg1;
            var loc2:*;
            (loc2 = AppFacade.createSlotitemAttacher()).stackCard(itemID, _card1Canvas);
            loc2.stackCard(itemID, _card2Canvas);
            var loc1:*=AppFacade.createShipAttacher();
            loc1.stackFull(arg2, _shipCanvas, _isSuperDamageControll ? 100 : 0);
            var loc4:*;
            var loc3:*=(loc4 = DataFacade.getStartData()).getOffsetAtBattle(arg2, _isSuperDamageControll ? false : true);
            if (!_isSuperDamageControll)
            {
                var loc5:*;
                megamiTextBG.visible = loc5 = false;
                megamiText2.visible = loc5 = loc5;
                megamiText.visible = loc5;
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc2.load)), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc1.load)), a24.tween.Tween24.func(_setPositionResources, loc3), a24.tween.Tween24.gotoAndStop(1), a24.tween.Tween24.tween(this, LABEL_BRANCHPOINT / 30).frame(LABEL_BRANCHPOINT), a24.tween.Tween24.ifCase(_isSuperDamageControll, _getTweenSuperDamageControll(), _getTween()));
        }

        private function _getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.gotoAndStop(LABEL_SKIPPEDPOINT), a24.tween.Tween24.tween(this, (totalFrames - LABEL_SKIPPEDPOINT) / 30).frame(totalFrames));
        }

        private function _getTweenSuperDamageControll():a24.tween.Tween24
        {
            return a24.tween.Tween24.tween(this, (totalFrames - LABEL_BRANCHPOINT) / 30).frame(totalFrames);
        }

        private function _setPositionResources(arg1:flash.geom.Point):void
        {
            _card1Canvas.x = (-_card1Canvas.width) / 2;
            _card1Canvas.y = (-_card1Canvas.height) / 2;
            _card2Canvas.x = (-_card2Canvas.width) / 2;
            _card2Canvas.y = (-_card2Canvas.height) / 2;
            _shipCanvas.x = _shipCanvas.x + (-80 + arg1.x);
            _shipCanvas.y = _shipCanvas.y + (-80 + arg1.y);
            return;
        }

        private function __frameScript_playSE():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_savepoint);
            return;
        }

        private var LABEL_PLAYSOUND_SE:int;

        private var LABEL_BRANCHPOINT:int;

        private var LABEL_SKIPPEDPOINT:int;

        private var _isSuperDamageControll:Boolean=false;

        private var _card1Canvas:flash.display.Sprite;

        private var _card2Canvas:flash.display.Sprite;

        private var _shipCanvas:flash.display.Sprite;
    }
}


//        class GekichinCutin
package battle.display.cutin
{
    import a24.tween.*;
    import battle.vo.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import res.common.*;

    public class GekichinCutin extends flash.display.Sprite
    {
        public function GekichinCutin()
        {
            _chara1 = new flash.display.Sprite();
            _chara2 = new flash.display.Sprite();
            super();
            _mc = new res.battle.MCGekichinCutin();
            _mc.gotoAndStop("play_se_don");
            LABEL_PLAY_SE_DON = _mc.currentFrame;
            _mc.gotoAndStop("keyTime1");
            LABEL_KEY_TIME1 = _mc.currentFrame;
            _mc.gotoAndStop("branchDamageControll");
            LABEL_BRANCHPOINT = _mc.currentFrame;
            _mc.gotoAndStop("DamageControllEnd");
            LABEL_DAMAGECONTROLL_END = _mc.currentFrame;
            _mc.gotoAndStop(1);
            _mc.ship.removeChildren();
            _mc.ship.addChild(_chara1);
            _mc.shipblur.removeChildren();
            _mc.shipblur.addChild(_chara2);
            _mc.addFrameScript(LABEL_PLAY_SE_DON, function ():void
            {
                common.util.SoundUtil.playSE(BattleAssets.SE_battle_don);
                return;
            })
            addChild(_mc);
            visible = false;
            return;
        }

        public function getTween(arg1:battle.vo.BattleShipData, arg2:Boolean, arg3:Boolean):a24.tween.Tween24
        {
            _hasYouin = arg2;
            _hasMegami = arg3;
            if (_hasYouin || _hasMegami)
            {
                var loc5:*;
                _mc.lost2_b.visible = loc5 = false;
                _mc.lost_b.visible = loc5;
                _mc.lost2_g.visible = loc5 = false;
                _mc.lost_g.visible = loc5;
            }
            _mc.card.stop();
            var loc2:*;
            (loc2 = new res.common.MCCardBG()).gotoAndStop(arg1.getBacks());
            _mc.card.addChild(loc2);
            var loc1:*=arg1.getCharaID();
            var loc4:*;
            (loc4 = AppFacade.createShipAttacher()).stackFull(loc1, _chara1, 0);
            loc4.stackFull(loc1, _chara2, 0);
            var loc3:*=DataFacade.getStartData().getOffsetAtBattle(arg1.getCharaID(), true);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc4 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc4.load)), a24.tween.Tween24.func(_setLoadedImagePositions, loc3), a24.tween.Tween24.visible(true, this), a24.tween.Tween24.tween(_mc, (LABEL_KEY_TIME1 - 1) / 30).frame(LABEL_KEY_TIME1), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_mc, (LABEL_BRANCHPOINT - LABEL_KEY_TIME1) / 30).frame(LABEL_BRANCHPOINT), a24.tween.Tween24.func(common.util.SoundUtil.playVoice, arg1.getCharaID(), 22), _getTweenCreateParticles(), a24.tween.Tween24.serial(a24.tween.Tween24.tween(_mc.card, 1, a24.tween.Ease24._1_SineIn).rotation(-30), _getTweenCardDrop())), a24.tween.Tween24.ifCase(_hasYouin || _hasMegami, _getTweenDamageControll(loc1), _getTweenNotDamageControll(loc1)));
        }

        private function _setLoadedImagePositions(arg1:flash.geom.Point):void
        {
            _addOffset(_chara1, arg1);
            _addOffset(_chara2, arg1);
            return;
        }

        private function _getTweenCreateParticles():a24.tween.Tween24
        {
            var loc4:*=0;
            var loc1:*=null;
            var loc3:*=[];
            var loc2:*=[];
            loc4 = 0;
            while (loc4 < 15)
            {
                loc1 = new Particle();
                loc3.push(loc1);
                loc2.push(loc1.getTween().delay(loc4 * 2 / 30));
                ++loc4;
            }
            loc3.unshift(_mc.particleCanvas);
            return a24.tween.Tween24.parallel(a24.tween.Tween24.addChild.apply(null, loc3), loc2, a24.tween.Tween24.removeAllChildren(_mc.particleCanvas));
        }

        private function _getTweenCardDrop():a24.tween.Tween24
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc3:*=[];
            var loc1:*=new flash.display.Sprite();
            loc4 = 0;
            while (loc4 < 100)
            {
                loc2 = new CircleForMask();
                loc3.push(loc2.getTween(0.8));
                loc1.addChild(loc2);
                ++loc4;
            }
            _mc.card.mask = loc1;
            _mc.card.addChild(loc1);
            return a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_mc.card, 3).$y(480).alpha(0), loc3);
        }

        private function _getTweenDamageControll(arg1:int):a24.tween.Tween24
        {
            var loc1:*=new battle.display.cutin.DamageControllCutin();
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("GekichinCutin::EVENT_KEY")), a24.tween.Tween24.addChild(this, loc1), loc1.getTween(_hasMegami, arg1), a24.tween.Tween24.removeChild(loc1), a24.tween.Tween24.gotoAndStop(LABEL_DAMAGECONTROLL_END, _mc), common.util.MCUtil.frameTween(_mc, LABEL_DAMAGECONTROLL_END, _mc.totalFrames));
        }

        private function _getTweenNotDamageControll(arg1:int):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("GekichinCutin::EVENT_KEY")), common.util.MCUtil.frameTween(_mc, LABEL_BRANCHPOINT, _mc.totalFrames));
        }

        private function _addOffset(arg1:flash.display.DisplayObject, arg2:flash.geom.Point):void
        {
            arg1.x = arg1.x + (-80 + arg2.x);
            arg1.y = arg1.y + (-80 + arg2.y);
            return;
        }

        public static const EVENT_KEY:String="GekichinCutin::EVENT_KEY";

        private var LABEL_PLAY_SE_DON:int;

        private var LABEL_KEY_TIME1:int;

        private var LABEL_BRANCHPOINT:int;

        private var LABEL_DAMAGECONTROLL_END:int;

        private var _hasYouin:Boolean=false;

        private var _hasMegami:Boolean=false;

        private var _mc:res.battle.MCGekichinCutin;

        private var _chara1:flash.display.Sprite;

        private var _chara2:flash.display.Sprite;
    }
}

import a24.tween.*;
import flash.display.*;
import res.battle.*;


class CircleForMask extends flash.display.Shape
{
    public function CircleForMask()
    {
        super();
        x = Math.random() * 218 - 109;
        y = Math.random() * 300 - 150;
        graphics.beginFill(16711680);
        graphics.drawCircle(0, 0, 20);
        graphics.endFill();
        scaleX = scaleY = Math.random() * 4 + 2;
        return;
    }

    public function getTween(arg1:Number):a24.tween.Tween24
    {
        return a24.tween.Tween24.tween(this, Math.random() * arg1).scale(0);
    }
}

class Particle extends res.battle.MCGekichinCutinParticle
{
    public function Particle()
    {
        super();
        x = Math.random() * 200 - 100 + 800 / 2;
        y = Math.random() * 300 - 150 + 480 / 2;
        alpha = 0;
        return;
    }

    public function getTween():a24.tween.Tween24
    {
        var loc3:*=NaN;
        loc3 = 225;
        var loc1:*=Math.random() * 225 / 8;
        var loc2:*=(-(Math.random() + 3)) * 225 / 4;
        return a24.tween.Tween24.serial(a24.tween.Tween24.tween(this, 0.75).alpha(0.5).xy(x + loc1 * 0.75, y + loc2 * 0.75), a24.tween.Tween24.tween(this, 0.25).alpha(0).xy(x + loc1, y + loc2));
    }

    private var _vx:Number=0;

    private var _vy:Number=0;

    private var _va:Number=0;
}

//        class SupportCutin
package battle.display.cutin
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import flash.display.*;
    import flash.events.*;
    import manager.resource.*;
    import res.port.sally.*;
    import vo.*;

    public class SupportCutin extends res.port.sally.MCSupportCutin
    {
        public function SupportCutin(arg1:Array)
        {
            var loc2:*=0;
            var loc1:*=null;
            super();
            _kirakira = [];
            loc2 = 0;
            while (loc2 < 12)
            {
                loc1 = this["kira" + (loc2 + 1)];
                loc1.visible = false;
                _kirakira.push(loc1);
                ++loc2;
            }
            _shipsData = new __AS3__.vec.Vector.<vo.UserShipData>();
            loc2 = 0;
            while (loc2 < arg1.length)
            {
                if (arg1[loc2] != null)
                {
                    _shipsData.push(arg1[loc2]);
                }
                ++loc2;
            }
            ships.gotoAndStop(_shipsData.length);
            visible = false;
            return;
        }

        public function getTweenInitialize():a24.tween.Tween24
        {
            var loc3:*=0;
            var loc1:*=null;
            var loc2:*=null;
            _shipMCs_upper = [];
            _shipMCs_bottom = [];
            var loc4:*=AppFacade.createShipAttacher();
            loc3 = 0;
            while (loc3 < _shipsData.length)
            {
                loc1 = _shipsData[loc3];
                if (ships.hasOwnProperty("ship" + (loc3 + 1)))
                {
                    loc2 = ships["ship" + (loc3 + 1)];
                    loc2.alpha = 0;
                    loc4.stackCardSS(loc1.getCharaID(), loc2, loc1.getCondition());
                    if (loc3 % 2 != 0)
                    {
                        _shipMCs_bottom.push(loc2);
                    }
                    else
                    {
                        _shipMCs_upper.push(loc2);
                    }
                }
                ++loc3;
            }
            return a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc4 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc4.load));
        }

        public function getTweenAnimation():a24.tween.Tween24
        {
            var loc3:*=0;
            var loc2:*=null;
            var loc1:*=[];
            loc3 = 0;
            while (loc3 < _kirakira.length)
            {
                loc2 = a24.tween.Tween24.serial(a24.tween.Tween24.visible(true, _kirakira[loc3]), a24.tween.Tween24.gotoAndPlay(1, _kirakira[loc3]), a24.tween.Tween24.wait(Math.random() + 0.5), a24.tween.Tween24.visible(false, _kirakira[loc3])).delay(0.4 + loc3 * 0.1);
                loc1.push(loc2);
                ++loc3;
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop(bg).scaleY(0), a24.tween.Tween24.prop(textImg).alpha(0).x(183.5), a24.tween.Tween24.visible(true, this), a24.tween.Tween24.tween(bg, 0.3).scaleY(2), a24.tween.Tween24.parallel(a24.tween.Tween24.parallel.apply(null, loc1), a24.tween.Tween24.tween(textImg, 0.4).$$x(30).alpha(1), a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_shipMCs_upper, 0.6).$$x(-400), a24.tween.Tween24.tween(_shipMCs_upper, 0.2).alpha(1)), a24.tween.Tween24.wait(0.6), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_shipMCs_upper, 0.6).$$x(-400), a24.tween.Tween24.tween(_shipMCs_upper, 0.4).alpha(0).delay(0.2))).delay(0.4), a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_shipMCs_bottom, 0.6).$$x(400), a24.tween.Tween24.tween(_shipMCs_bottom, 0.2).alpha(1)), a24.tween.Tween24.wait(0.6), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_shipMCs_bottom, 0.6).$$x(400), a24.tween.Tween24.tween(_shipMCs_bottom, 0.4).alpha(0).delay(0.2))).delay(0.4)), a24.tween.Tween24.tween([bg, textImg], 0.2).alpha(0));
        }

        private var _kirakira:Array;

        private var _shipMCs_upper:Array;

        private var _shipMCs_bottom:Array;

        private var _shipsData:__AS3__.vec.Vector.<vo.UserShipData>;
    }
}


//        class TaihaChuhaCutin
package battle.display.cutin
{
    import a24.tween.*;
    import battle.display.main.*;
    import common.display.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.images.*;
    import vo.*;

    public class TaihaChuhaCutin extends flash.display.Sprite
    {
        public function TaihaChuhaCutin(arg1:Boolean)
        {
            _bg = new battle.display.main.BackgroundView();
            _characterLayer = new flash.display.Sprite();
            _canvas1 = new flash.display.Sprite();
            _canvas2 = new flash.display.Sprite();
            _canvas3 = new flash.display.Sprite();
            _moziLayer = new flash.display.Sprite();
            _fadeLayer = new common.display.FadeLayer(16777215);
            super();
            _bg.setBackground(arg1);
            _whiteBlur = new res.battle.images.ImgWhiteBlur();
            addChild(_bg);
            addChild(_characterLayer);
            addChild(_whiteBlur);
            addChild(_moziLayer);
            addChild(_fadeLayer);
            visible = false;
            return;
        }

        public function getTween(arg1:Boolean, ... rest):a24.tween.Tween24
        {
            _charaIDs = rest;
            _offsets = [];
            var loc3:*=_createAttacher();
            var loc2:*=new battle.display.cutin.TaihaMozi(arg1);
            var loc1:*=new battle.display.cutin.TaihaMozi(arg1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop([_bg, _whiteBlur]).alpha(0), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc3 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc3.load)), a24.tween.Tween24.func(_setCharacterPosition), a24.tween.Tween24.prop([_canvas1, _canvas2, _canvas3]).$$y(-400).alpha(0), a24.tween.Tween24.addChild(_characterLayer, _canvas3, _canvas2, _canvas1), a24.tween.Tween24.visible(true, this), a24.tween.Tween24.tween([_bg, _whiteBlur], 10 / 30).alpha(1), a24.tween.Tween24.tween([_canvas1, _canvas2, _canvas3], 4 / 30).$$y(40).alpha(1), a24.tween.Tween24.addChild(_moziLayer, loc2, loc1), a24.tween.Tween24.prop(loc2).xy(630, 344).scale(2.1).alpha(0), a24.tween.Tween24.prop(loc1).xy(630, 344).scale(2.1).alpha(0), a24.tween.Tween24.parallel(a24.tween.Tween24.tween([_canvas1, _canvas2, _canvas3], 25 / 30).$$y(370), a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.tween(loc1, 5 / 30).alpha(1).scale(1).delay(5 / 30), a24.tween.Tween24.tween(loc2, 5 / 30).alpha(0.35).scale(1.1).delay(7 / 30)), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_don), a24.tween.Tween24.prop(loc2).scale(1.2), a24.tween.Tween24.wait(2 / 30), a24.tween.Tween24.removeChild(loc2))), a24.tween.Tween24.func(loc1.broken), a24.tween.Tween24.func(common.util.SoundUtil.playVoice, _charaIDs[0], 21), a24.tween.Tween24.wait(66 / 30), _fadeLayer.getTween(1, 16 / 30), a24.tween.Tween24.removeChild(_bg, _characterLayer, _whiteBlur, _moziLayer), _fadeLayer.getTween(0, 14 / 30));
        }

        private function _createAttacher():manager.resource.IShipAttacher
        {
            var loc1:*=DataFacade.getStartData();
            var loc2:*=AppFacade.createShipAttacher();
            if (_charaIDs.length > 0)
            {
                loc2.stackFull(_charaIDs[0], _canvas1, 0);
                _offsets.push(loc1.getOffsetAtBattle(_charaIDs[0], true));
                if (_charaIDs.length > 1)
                {
                    loc2.stackFull(_charaIDs[1], _canvas2, 0);
                    _offsets.push(loc1.getOffsetAtBattle(_charaIDs[1], true));
                    if (_charaIDs.length > 2)
                    {
                        loc2.stackFull(_charaIDs[2], _canvas3, 0);
                        _offsets.push(loc1.getOffsetAtBattle(_charaIDs[2], true));
                    }
                }
            }
            return loc2;
        }

        private function _setCharacterPosition():void
        {
        }

        private function _leftX(arg1:flash.display.DisplayObject):void
        {
            arg1.x = 0;
            return;
        }

        private function _centerX(arg1:flash.display.DisplayObject):void
        {
            arg1.x = 800 / 4;
            return;
        }

        private function _rightX(arg1:flash.display.DisplayObject):void
        {
            arg1.x = 800 / 2;
            return;
        }

        private function _addOffset(arg1:flash.display.DisplayObject, arg2:flash.geom.Point):void
        {
            arg1.x = arg1.x + (-80 + arg2.x);
            arg1.y = arg1.y + (-80 + arg2.y);
            return;
        }

        private var _bg:battle.display.main.BackgroundView;

        private var _characterLayer:flash.display.Sprite;

        private var _canvas1:flash.display.Sprite;

        private var _canvas2:flash.display.Sprite;

        private var _canvas3:flash.display.Sprite;

        private var _whiteBlur:flash.display.Sprite;

        private var _moziLayer:flash.display.Sprite;

        private var _fadeLayer:common.display.FadeLayer;

        private var _charaIDs:Array;

        private var _offsets:Array;
    }
}


//        class TaihaMozi
package battle.display.cutin
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import res.battle.*;

    public class TaihaMozi extends flash.display.Sprite
    {
        public function TaihaMozi(arg1:Boolean)
        {
            super();
            if (arg1)
            {
                _mc = new res.battle.MCTaihaString();
            }
            else
            {
                _mc = new res.battle.MCChuhaString();
            }
            _mc.gotoAndStop(1);
            addChild(_mc);
            return;
        }

        public function broken():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _mc.gotoAndStop(2);
            _parts = [];
            loc2 = 0;
            while (loc2 < _mc.numChildren)
            {
                loc1 = _mc.getChildAt(loc2);
                _parts.push(new Parts(loc1));
                ++loc2;
            }
            _timer = new flash.utils.Timer(1000 / 30, 30 * 2);
            _timer.addEventListener("timer", _handleTimer);
            _timer.addEventListener("timerComplete", _handleTimerComplete);
            _timer.start();
            return;
        }

        private function _handleTimer(arg1:flash.events.TimerEvent):void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < _parts.length)
            {
                _parts[loc1].update();
                ++loc1;
            }
            return;
        }

        private function _handleTimerComplete(arg1:flash.events.TimerEvent):void
        {
            _timer.removeEventListener("timer", _handleTimer);
            _timer.removeEventListener("timerComplete", _handleTimerComplete);
            _timer = null;
            _parts = null;
            visible = false;
            return;
        }

        private var _mc:flash.display.MovieClip;

        private var _timer:flash.utils.Timer;

        private var _parts:Array;
    }
}

import flash.display.*;


class Parts extends Object
{
    public function Parts(arg1:flash.display.DisplayObject)
    {
        super();
        _parts = arg1;
        _rotateSpeed = (Math.random() * 201 - 100) / 10;
        _xSpeed = (Math.random() * 201 - 105) / 8;
        _ySpeed = Math.random() * 25 - 20;
        _a = 0.98;
        return;
    }

    public function update():void
    {
        _parts.rotation = _parts.rotation + _rotateSpeed;
        _parts.x = _parts.x + _xSpeed;
        _parts.y = _parts.y + _ySpeed;
        _ySpeed = _ySpeed + _a;
        return;
    }

    private var _parts:flash.display.DisplayObject;

    private var _rotateSpeed:Number;

    private var _xSpeed:Number;

    private var _ySpeed:Number;

    private var _a:Number;
}

//      package day
//        package hougeki
//          class OpeningCutin
package battle.display.day.hougeki
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import res.battle.*;

    public class OpeningCutin extends flash.display.Sprite
    {
        public function OpeningCutin()
        {
            super();
            return;
        }

        public function getTweenAnimation(arg1:int, arg2:int, arg3:int):a24.tween.Tween24
        {
            _jinID_f = arg1;
            _jinID_e = arg2;
            _formID = arg3;
            return a24.tween.Tween24.funcAndWaitEvent(this, "complete", _tween);
        }

        private function _tween():void
        {
            _initBlackBG();
            _initTextMC(_jinID_f, _jinID_e);
            _initCombatFormTextMC(_formID);
            var loc1:*=a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, _blackBarU, _blackBarD), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_blackBarU, 0.3).scaleY(1), a24.tween.Tween24.tween(_blackBarD, 0.3).scaleY(1)), a24.tween.Tween24.addChild(this, _text_f, _text_e), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_text_f, 0.4, a24.tween.Ease24._1_SineOut).x(-266 + _text_f.width / 2), a24.tween.Tween24.tween(_text_e, 0.4, a24.tween.Ease24._1_SineOut).x(266 - _text_e.width / 2)), a24.tween.Tween24.parallel(_getTwwenC(_c1), _getTwwenC(_c2).delay(0.2), _getTwwenC(_c3).delay(0.4)));
            loc1.onComplete(_tweenAdvantageous).play();
            return;
        }

        private function _getTwwenC(arg1:flash.display.MovieClip):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, arg1), a24.tween.Tween24.tween(arg1, 0.3).scale(1), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_don));
        }

        private function _tweenAdvantageous():void
        {
            if (_advantageous != null)
            {
                a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, _advantageous), a24.tween.Tween24.tween(_advantageous, 0.25).scale(1).alpha(1), a24.tween.Tween24.wait(0.25)).onComplete(_tweenLast).play();
            }
            else
            {
                a24.tween.Tween24.wait(0.5).onComplete(_tweenLast).play();
            }
            return;
        }

        private function _tweenLast():void
        {
            a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_blackBarU, 0.2, a24.tween.Ease24._1_SineIn).scaleY(0).delay(0.2), a24.tween.Tween24.tween(_blackBarD, 0.2, a24.tween.Ease24._1_SineIn).scaleY(0).delay(0.2), a24.tween.Tween24.tween(_text_f, 0.4, a24.tween.Ease24._1_SineIn).x(-400 - _text_f.width / 2), a24.tween.Tween24.tween(_text_e, 0.4, a24.tween.Ease24._1_SineIn).x(800 / 2 + _text_e.width / 2), _getTweenCHide()).onComplete(_finalize).play();
            return;
        }

        private function _getTweenCHide():a24.tween.Tween24
        {
            if (_advantageous != null)
            {
                return a24.tween.Tween24.tween([_c1, _c2, _c3, _advantageous], 0.4).$$x(-655);
            }
            return a24.tween.Tween24.tween([_c1, _c2, _c3], 0.4).$$x(-655);
        }

        private function _finalize():void
        {
            removeChildren();
            _blackBarU = _blackBarD = null;
            _text_f = _text_e = null;
            _c1 = _c2 = _c3 = _advantageous = null;
            dispatchEvent(new flash.events.Event("complete"));
            return;
        }

        private function _createShape():flash.display.Shape
        {
            var loc1:*=new flash.display.Shape();
            loc1.graphics.beginFill(0, 0.8);
            loc1.graphics.drawRect(-400, -55, 800, 110);
            loc1.graphics.endFill();
            return loc1;
        }

        private function _initBlackBG():void
        {
            _blackBarU = _createShape();
            _blackBarD = _createShape();
            _blackBarU.x = 0;
            _blackBarU.y = -162;
            _blackBarU.scaleY = 0;
            _blackBarD.x = 0;
            _blackBarD.y = 162;
            _blackBarD.scaleY = 0;
            return;
        }

        private function _initTextMC(arg1:int, arg2:int):void
        {
            _text_f = new res.battle.MCFormationText();
            _text_f.gotoAndStop(arg1);
            _text_f.x = 800 / 2 + _text_f.width;
            _text_f.y = 162;
            _text_e = new res.battle.MCFormationText();
            _text_e.gotoAndStop(arg2 + 50);
            _text_e.x = -400 - _text_e.width;
            _text_e.y = -162;
            return;
        }

        private function _initCombatFormTextMC(arg1:int):void
        {
            _c1 = new res.battle.MCCombatFormText();
            _c2 = new res.battle.MCCombatFormText();
            _c3 = new res.battle.MCCombatFormText();
            _advantageous = new res.battle.MCCombatFormStatus();
            _advantageous.gotoAndStop(arg1);
            if (arg1 != 1)
            {
                if (arg1 != 2)
                {
                    if (arg1 == 3 || arg1 == 4)
                    {
                        _c1.gotoAndStop(7);
                        _c2.gotoAndStop(8);
                        _c3.gotoAndStop(9);
                        var loc1:*;
                        _c3.y = loc1 = -25;
                        _c2.y = loc1 = loc1;
                        _c1.y = loc1;
                        _advantageous.y = 65;
                        _advantageous.scaleY = loc1 = 2;
                        _advantageous.scaleX = loc1;
                        _advantageous.alpha = 0;
                    }
                }
                else
                {
                    _c1.gotoAndStop(4);
                    _c2.gotoAndStop(5);
                    _c3.gotoAndStop(6);
                }
            }
            else
            {
                _c1.gotoAndStop(1);
                _c2.gotoAndStop(2);
                _c3.gotoAndStop(3);
            }
            _c1.x = -185;
            _c3.x = 185;
            _c1.scaleY = loc1 = 2;
            _c1.scaleX = loc1;
            _c2.scaleY = loc1 = 2;
            _c2.scaleX = loc1;
            _c3.scaleY = loc1 = 2;
            _c3.scaleX = loc1;
            return;
        }

        private var _jinID_f:int;

        private var _jinID_e:int;

        private var _formID:int;

        private var _blackBarU:flash.display.Shape;

        private var _blackBarD:flash.display.Shape;

        private var _text_f:flash.display.MovieClip;

        private var _text_e:flash.display.MovieClip;

        private var _c1:flash.display.MovieClip;

        private var _c2:flash.display.MovieClip;

        private var _c3:flash.display.MovieClip;

        private var _advantageous:flash.display.MovieClip;
    }
}


//        package kouku
//          class SeikuukenView
package battle.display.day.kouku
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import res.battle.images.*;

    public class SeikuukenView extends flash.display.Sprite
    {
        public function SeikuukenView(arg1:Number=400, arg2:Number=400)
        {
            super();
            this.x = arg1;
            this.y = arg2;
            return;
        }

        public function getTween(arg1:int, arg2:flash.display.DisplayObjectContainer):a24.tween.Tween24
        {
            var loc1:*=getTweenShow(arg1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(arg2, this), loc1, a24.tween.Tween24.removeChild(this));
        }

        public function getTweenShow(arg1:int):a24.tween.Tween24
        {
            var loc1:*=null;
        }

        private var _img:flash.display.Sprite;
    }
}


//      package layers
//        class RaderLayer
package battle.display.layers
{
    import a24.tween.*;
    import battle.display.common.*;
    import battle.models.*;
    import flash.display.*;

    public class RaderLayer extends flash.display.Sprite
    {
        public function RaderLayer()
        {
            super();
            _rader_f = new battle.display.common.RaderView();
            _rader_e = new battle.display.common.RaderView(true);
            _rader_f.x = 75;
            _rader_f.y = 402;
            _rader_e.x = 725;
            _rader_e.y = 78;
            addChildRaders();
            return;
        }

        public function get rader_f():battle.display.common.RaderView
        {
            return _rader_f;
        }

        public function get rader_e():battle.display.common.RaderView
        {
            return _rader_e;
        }

        public function finalize():void
        {
            removeChildren();
            _rader_f.finalize();
            _rader_e.finalize();
            _rader_f = null;
            _rader_e = null;
            return;
        }

        public function addChildRaders():void
        {
            addChild(_rader_f);
            addChild(_rader_e);
            return;
        }

        public function getTweenShowF(arg1:battle.models.BattleData):a24.tween.Tween24
        {
            var loc2:*=0;
            var loc1:*=0;
            var loc3:*=arg1.combatData.getFormationID_f();
            var loc4:*=arg1.countShips_f();
            if (arg1.combatData.isCombinedFormation_f() && arg1.baseData.isCombinedFriend())
            {
                loc2 = arg1.countShips_f_Combined();
                loc1 = arg1.baseData.getCombinedType();
                return _rader_f.getTweenShowCombined(loc3, loc4, loc2, loc1);
            }
            return _rader_f.getTweenShow(loc3, loc4);
        }

        public function getTweenShowE(arg1:int=0, arg2:int=0):a24.tween.Tween24
        {
            return _rader_e.getTweenShow(arg1, arg2);
        }

        private var _rader_f:battle.display.common.RaderView;

        private var _rader_e:battle.display.common.RaderView;
    }
}


//      package main
//        package banner
//          class AntiAircraft
package battle.display.main.banner
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import res.battle.*;

    public class AntiAircraft extends res.battle.AntiAircraftSetMC
    {
        public function AntiAircraft(arg1:int=0)
        {
            super();
            _type = arg1;
            gun1.rotation = (-Math.random()) * 45 - 30;
            gun2.rotation = (-Math.random()) * 45 - 30;
            gun1.visible = false;
            gun2.visible = false;
            _setSmokes();
            return;
        }

        public function finalize():void
        {
            removeChildren();
            _smoke = null;
            return;
        }

        private function _setSmokes():void
        {
        }

        private function _setSmoke(arg1:int):res.battle.AASmokeMC
        {
            var loc1:*=new res.battle.AASmokeMC();
            loc1.gotoAndStop(arg1);
            loc1.smoke.gotoAndStop(1);
            loc1.smoke.visible = false;
            return loc1;
        }

        public function getTween():a24.tween.Tween24
        {
            var ret:a24.tween.Tween24;
            var commonTw:a24.tween.Tween24;

            var loc1:*;
            commonTw = a24.tween.Tween24.parallel(a24.tween.Tween24.prop(gun1).visible(true), a24.tween.Tween24.prop(gun2).visible(true));
        }

        private var _type:int;

        private var _smoke:__AS3__.vec.Vector.<res.battle.AASmokeMC>;
    }
}


//          class Babble
package battle.display.main.banner
{
    import a24.tween.*;
    import flash.display.*;
    import flash.events.*;
    import res.movieclips.battle.*;

    public class Babble extends flash.display.Sprite
    {
        public function Babble()
        {
            _babble1 = new res.movieclips.battle.BabbleMC();
            _babble2 = new res.movieclips.battle.BabbleMC();
            _babble3 = new res.movieclips.battle.BabbleMC();
            super();
            _babble1.x = 1.8;
            _babble3.x = 3.6;
            _babble1.stop();
            _babble2.stop();
            _babble3.stop();
            _babble1.addFrameScript(_babble1.totalFrames - 1, _babble1AnimationEnd);
            _babble2.addFrameScript(_babble2.totalFrames - 1, _babble2AnimationEnd);
            _babble3.addFrameScript(_babble3.totalFrames - 1, _babble3AnimationEnd);
            addChild(_babble1);
            addChild(_babble2);
            addChild(_babble3);
            return;
        }

        public function play():void
        {
            if (_babble1 == null || _babble2 == null || _babble3 == null)
            {
                return;
            }
            a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(_babble1, "Babble::EVENT_ANIMATION_END_BABBLE"), a24.tween.Tween24.waitEvent(_babble2, "Babble::EVENT_ANIMATION_END_BABBLE"), a24.tween.Tween24.waitEvent(_babble3, "Babble::EVENT_ANIMATION_END_BABBLE"), a24.tween.Tween24.serial(a24.tween.Tween24.func(_babble1.play), a24.tween.Tween24.wait(0.3), a24.tween.Tween24.func(_babble2.play), a24.tween.Tween24.wait(0.3), a24.tween.Tween24.func(_babble3.play))).onComplete(_play).group("SUBMARIBE_EFFECTS").play();
            return;
        }

        private function _play():void
        {
            var loc1:*=Math.random() * 7 + 7;
            a24.tween.Tween24.serial(a24.tween.Tween24.wait(loc1), a24.tween.Tween24.func(play)).group("SUBMARIBE_EFFECTS").play();
            return;
        }

        public function stop():void
        {
            a24.tween.Tween24.stopByGroup("SUBMARIBE_EFFECTS").play();
            return;
        }

        private function _babble1AnimationEnd():void
        {
            _babble1.gotoAndStop(1);
            _babble1.dispatchEvent(new flash.events.Event("Babble::EVENT_ANIMATION_END_BABBLE"));
            return;
        }

        private function _babble2AnimationEnd():void
        {
            _babble2.gotoAndStop(1);
            _babble2.dispatchEvent(new flash.events.Event("Babble::EVENT_ANIMATION_END_BABBLE"));
            return;
        }

        private function _babble3AnimationEnd():void
        {
            _babble3.gotoAndStop(1);
            _babble3.dispatchEvent(new flash.events.Event("Babble::EVENT_ANIMATION_END_BABBLE"));
            return;
        }

        public function finalize():void
        {
            a24.tween.Tween24.stopByGroup("SUBMARIBE_EFFECTS").onComplete(function ():void
            {
                a24.tween.Tween24.disposeGroupTweens("SUBMARIBE_EFFECTS").play();
                _babble1.addFrameScript(_babble1.totalFrames - 1, null);
                _babble2.addFrameScript(_babble2.totalFrames - 1, null);
                _babble3.addFrameScript(_babble3.totalFrames - 1, null);
                _babble1.gotoAndStop(1);
                _babble2.gotoAndStop(1);
                _babble3.gotoAndStop(1);
                _babble1 = _babble2 = _babble3 = null;
                removeChildren();
                return;
            }).play()
            return;
        }

        private const EVENT_ANIMATION_END_BABBLE:String="Babble::EVENT_ANIMATION_END_BABBLE";

        private var _babble1:res.movieclips.battle.BabbleMC;

        private var _babble2:res.movieclips.battle.BabbleMC;

        private var _babble3:res.movieclips.battle.BabbleMC;
    }
}


//          class BannerGroup
package battle.display.main.banner
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.vo.*;
    import common.util.*;
    import flash.display.*;
    import flash.geom.*;
    import manager.resource.*;

    public class BannerGroup extends flash.display.Sprite
    {
        public function BannerGroup(arg1:Boolean, arg2:Boolean)
        {
            var loc5:*=0;
            var loc2:*=false;
            var loc1:*=null;
            var loc3:*=null;
            _wavesLayer = new flash.display.Sprite();
            _bannersLayer = new flash.display.Sprite();
            super();
            _isFriendShips = arg1;
            addChild(_bannersLayer);
            addChild(_wavesLayer);
            _waves = new __AS3__.vec.Vector.<battle.display.main.banner.SubmarineWave>();
            _bannerContainers = new __AS3__.vec.Vector.<battle.display.main.banner.BattleBannerContainer>();
            loc5 = 0;
            while (loc5 < 6)
            {
                loc2 = loc5 == 0;
                loc1 = new battle.display.main.banner.BattleBannerContainer(arg1, loc2, arg2);
                loc1.x = arg1 ? -160 : 160;
                loc1.y = loc5 * (40 + 5);
                _bannerContainers.push(loc1);
                _bannersLayer.addChild(loc1);
                (loc3 = new battle.display.main.banner.SubmarineWave()).y = loc1.y;
                _waves.push(loc3);
                _wavesLayer.addChild(loc3);
                ++loc5;
            }
            var loc4:*;
            x = (loc4 = arg1 ? F_POS : E_POS).x;
            y = loc4.y;
            return;
        }

        public function initialize(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:manager.resource.IShipAttacher=null, arg3:Function=null):void
        {
            var loc8:*=0;
            var loc5:*=null;
            var loc7:*=null;
            var loc3:*=0;
            var loc6:*=0;
            var loc1:*=0;
            var loc2:*=null;
            var loc4:*=0;
            if (arg1.length != 6)
            {
                return;
            }
            loc8 = 0;
            while (loc8 < 6)
            {
                loc5 = arg1[loc8];
                loc7 = getBanner(loc8);
                if (loc5 == null)
                {
                    loc7.visible = false;
                }
                else
                {
                    loc5.banner = loc7;
                    loc3 = loc5.getCharaID();
                    loc6 = loc5.nowHP;
                    loc1 = loc5.getMaxHp();
                    if ((loc2 = arg2) == null)
                    {
                        loc2 = AppFacade.createShipAttacher();
                    }
                    if (_isFriendShips)
                    {
                        loc4 = common.util.Util.getCondition(loc6, loc1);
                        loc7.reserve(loc2, loc3, loc4);
                    }
                    else
                    {
                        loc7.reserve(loc2, loc3);
                    }
                    if (arg2)
                    {
                        arg2.load();
                    }
                    if (arg3 != null)
                    {
                        loc7.damagedFunc = arg3;
                    }
                    loc7.setHP(loc6, loc1);
                    loc7.visible = true;
                }
                ++loc8;
            }
            return;
        }

        public function finalize():void
        {
            var loc1:*=0;
            _wavesLayer.removeChildren();
            _wavesLayer = null;
            _waves = null;
            _bannersLayer.removeChildren();
            _bannersLayer = null;
            loc1 = 0;
            while (loc1 < _bannerContainers.length)
            {
                _bannerContainers[loc1].finalize();
                ++loc1;
            }
            _bannerContainers = null;
            removeChildren();
            return;
        }

        public function isEnter():Boolean
        {
            return _isEnter;
        }

        public function instantEnter():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _isEnter = true;
            loc2 = 0;
            while (loc2 < _bannerContainers.length)
            {
                loc1 = _bannerContainers[loc2];
                loc1.banner.instantEnter();
                ++loc2;
            }
            return;
        }

        public function getTweenEnter(arg1:Boolean=true):a24.tween.Tween24
        {
            var loc4:*=0;
            var loc2:*=null;
            _isEnter = true;
            var loc3:*=[];
            loc4 = 0;
            while (loc4 < _bannerContainers.length)
            {
                loc2 = _bannerContainers[loc4];
                loc3.push(loc2.banner.getTweenEnter(loc4 * 0.1));
                ++loc4;
            }
            var loc1:*=a24.tween.Tween24.parallel(loc3);
            if (arg1 == true)
            {
                return a24.tween.Tween24.parallel(a24.tween.Tween24.func(a24.tween.Tween24.parallel(loc3).play), a24.tween.Tween24.wait(0));
            }
            return loc1;
        }

        public function getTweenEnter_Combined(arg1:Boolean=true):a24.tween.Tween24
        {
            var loc4:*=0;
            var loc2:*=null;
            _isEnter = true;
            var loc3:*=[];
            loc4 = 0;
            while (loc4 < _bannerContainers.length)
            {
                loc2 = _bannerContainers[loc4];
                loc3.push(loc2.banner.getTweenEnter_Combined(loc4 * 0.1));
                ++loc4;
            }
            var loc1:*=a24.tween.Tween24.parallel(loc3);
            if (arg1 == true)
            {
                return a24.tween.Tween24.parallel(a24.tween.Tween24.func(a24.tween.Tween24.parallel(loc3).play), a24.tween.Tween24.wait(0));
            }
            return loc1;
        }

        public function getTweenMove_Combined(arg1:Boolean=true):a24.tween.Tween24
        {
            var loc5:*=0;
            var loc2:*=null;
            var loc4:*=[a24.tween.Tween24.prop(this).x(0)];
            var loc3:*=[];
            loc5 = 0;
            while (loc5 < _bannerContainers.length)
            {
                loc2 = _bannerContainers[loc5];
                loc4.push(a24.tween.Tween24.prop(loc2).x(x));
                loc3.push(loc2.banner.getTweenMove_Combined(loc5 * 0.05));
                ++loc5;
            }
            loc4.push(a24.tween.Tween24.prop(this).x(0));
            var loc1:*=a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc4), a24.tween.Tween24.parallel(loc3));
            if (arg1 == true)
            {
                return a24.tween.Tween24.parallel(a24.tween.Tween24.func(a24.tween.Tween24.parallel(loc3).play), a24.tween.Tween24.wait(0));
            }
            return loc1;
        }

        public function getTweenExit(arg1:Boolean=true):a24.tween.Tween24
        {
            var loc4:*=0;
            var loc2:*=null;
            if (_isEnter == false)
            {
                return a24.tween.Tween24.wait(0);
            }
            _isEnter = false;
            var loc3:*=[];
            loc4 = 0;
            while (loc4 < _bannerContainers.length)
            {
                loc2 = _bannerContainers[loc4];
                loc3.push(loc2.banner.getTweenExit(loc4 * 0.1));
                ++loc4;
            }
            var loc1:*=a24.tween.Tween24.parallel(loc3);
            if (arg1 == true)
            {
                return a24.tween.Tween24.parallel(a24.tween.Tween24.func(a24.tween.Tween24.parallel(loc3).play), a24.tween.Tween24.wait(0));
            }
            return loc1;
        }

        public function getTweenSakutekiFound():a24.tween.Tween24
        {
            var loc3:*=0;
            var loc1:*=null;
            _isEnter = true;
            var loc2:*=[];
            loc3 = 0;
            while (loc3 < _bannerContainers.length)
            {
                loc1 = _bannerContainers[loc3];
                loc2.push(loc1.banner.getTweenSakutekiFound());
                ++loc3;
            }
            return a24.tween.Tween24.parallel.apply(null, loc2);
        }

        public function getTweenSubmarineEffect(arg1:Array):Array
        {
            var loc1:*=null;
            var loc2:*=0;
            if (!(arg1 == null) && arg1.length > 0)
            {
                loc1 = [];
                loc2 = 0;
                while (loc2 < arg1.length)
                {
                    loc1.push(_waves[arg1[loc2]].createAnimationTween());
                    ++loc2;
                }
                return loc1;
            }
            return [];
        }

        public function tweenDefaultPositionAll():void
        {
            getTweenDefaultPositionAll().play();
            return;
        }

        public function getTweenDefaultPositionAll():a24.tween.Tween24
        {
            var loc3:*=0;
            var loc2:*=null;
            var loc1:*=[];
            loc3 = 0;
            while (loc3 < _bannerContainers.length)
            {
                loc2 = getBanner(loc3);
                loc1.push(loc2.getTweenDefaultPos());
                ++loc3;
            }
            return a24.tween.Tween24.parallel(loc1);
        }

        public function getBanner(arg1:int):battle.display.main.banner.BattleBanner
        {
            return _bannerContainers[arg1].banner;
        }

        public const SPACE_H:int=5;

        public const F_POS:flash.geom.Point=new flash.geom.Point(0, 78);

        public const E_POS:flash.geom.Point=new flash.geom.Point(640, 147);

        private var _isFriendShips:Boolean=false;

        private var _isEnter:Boolean=false;

        private var _wavesLayer:flash.display.Sprite;

        private var _waves:__AS3__.vec.Vector.<battle.display.main.banner.SubmarineWave>;

        private var _bannersLayer:flash.display.Sprite;

        private var _bannerContainers:__AS3__.vec.Vector.<battle.display.main.banner.BattleBannerContainer>;
    }
}


//          class BattleBanner
package battle.display.main.banner
{
    import a24.tween.*;
    import battle.events.*;
    import battle.image.*;
    import battle.views.effects.banner.*;
    import battle.vo.*;
    import common.display.girl.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.filters.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.images.*;
    import res.battle.mc.*;
    import res.common.*;

    public class BattleBanner extends common.display.girl.Banner
    {
        public function BattleBanner(arg1:battle.display.main.banner.BattleBannerContainer, arg2:Boolean, arg3:Boolean)
        {
            var loc1:*=null;
            _overlayLayer = new flash.display.Sprite();
            _shieldlayLayer = new flash.display.Sprite();
            _babbleLayer = new flash.display.Sprite();
            _antiAircraftLayer = new flash.display.Sprite();
            _img1 = new flash.display.Sprite();
            _img2 = new flash.display.Sprite();
            super();
            _container = arg1;
            _isFriendBanner = arg2;
            this.alpha = 0;
            _frameLayer = new battle.display.main.banner.BattleBannerFrameView();
            _frameLayer.alpha = 0;
            _frameLayer.initialize(arg2, arg3);
            if (arg3)
            {
                (loc1 = common.util.Util.createImageResourceWithCentering(res.battle.images.FlagShipMarkImage)).x = 149;
                loc1.y = 13;
                _middleLayer.addChild(loc1);
            }
            _overlayLayer.graphics.beginFill(16711680, 0.5);
            _overlayLayer.graphics.drawRect(0, 0, 160, 40);
            _overlayLayer.graphics.endFill();
            _overlayLayer.alpha = 0;
            _shieldlayLayer.graphics.beginFill(16777088, 0.75);
            _shieldlayLayer.graphics.drawRect(0, 0, 160, 40);
            _shieldlayLayer.graphics.endFill();
            _shieldlayLayer.alpha = 0;
            _imageLayer.addChild(_img1);
            _imageLayer.addChild(_img2);
            addChild(_frameLayer);
            addChild(_overlayLayer);
            addChild(_shieldlayLayer);
            addChild(_babbleLayer);
            addChild(_antiAircraftLayer);
            addEventListener("ShipDamageEvent::DAMAGE", _handleDamaged);
            return;
        }

        public function getTweenAttackEffect(arg1:Boolean=true):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(getTweenAttackPos(), a24.tween.Tween24.ifCase(arg1, a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_bomb1), null), a24.tween.Tween24.wait(0.2), a24.tween.Tween24.prop(this).x(_isFriendBanner ? 12 : -12), a24.tween.Tween24.tween(this, 0.15).x(0));
        }

        public function getTweenDefendEffect():a24.tween.Tween24
        {
            return getTweenAttackPos();
        }

        public function getTweenAttackPos():a24.tween.Tween24
        {
            if (_isFriendBanner)
            {
                return a24.tween.Tween24.tween(_container, 0.15).x(25);
            }
            return a24.tween.Tween24.tween(_container, 0.15).x(-25);
        }

        public function getTweenDefaultPos():a24.tween.Tween24
        {
            if (visible == true && alpha > 0)
            {
                return a24.tween.Tween24.tween(_container, 0.1).x(0);
            }
            return a24.tween.Tween24.wait(0);
        }

        public function showBabbles(arg1:Boolean=false):void
        {
            var loc1:*=new battle.display.main.banner.Babble();
            _babbleLayer.addChild(loc1);
            loc1.y = 40 / 3;
            if (arg1)
            {
                loc1.scaleX = -1;
            }
            else
            {
                loc1.x = 160;
            }
            loc1.play();
            return;
        }

        public function getTweenAA(arg1:int=0):a24.tween.Tween24
        {
            var loc1:*=new battle.display.main.banner.AntiAircraft(arg1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, loc1), loc1.getTween(), a24.tween.Tween24.removeChild(loc1), a24.tween.Tween24.func(loc1.finalize));
        }

        public function getTweenFlareShoot():a24.tween.Tween24
        {
            var loc1:*=new res.battle.mc.AntiAircraftMC();
            loc1.x = _isFriendBanner ? 160 - 20 : 20;
            loc1.x = _isFriendBanner ? 160 : 0;
            loc1.gotoAndStop(1);
            loc1.rotation = _isFriendBanner ? -60 : 240;
            return a24.tween.Tween24.serial(getTweenAttackEffect(false), a24.tween.Tween24.serial(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_shoot), a24.tween.Tween24.addChild(_antiAircraftLayer, loc1), common.util.MCUtil.frameTween(loc1, 1, loc1.totalFrames), a24.tween.Tween24.removeChild(loc1)), getTweenDefaultPos());
        }

        public function getTweenPicket():a24.tween.Tween24
        {
            var loc1:*=new battle.views.effects.banner.Picket();
            if (_isFriendBanner)
            {
                loc1.x = 160;
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, loc1), loc1.getTween(), a24.tween.Tween24.removeChild(loc1));
        }

        public function getTweenDamage(arg1:int, arg2:int, arg3:Boolean):a24.tween.Tween24
        {
            if (arg3 == true)
            {
                return a24.tween.Tween24.parallel(a24.tween.Tween24.func(setHP, arg1, arg2), getTweenDamageEffectWithShield());
            }
            return a24.tween.Tween24.parallel(a24.tween.Tween24.func(setHP, arg1, arg2), getTweenDamageEffect());
        }

        public function getTweenDamageAsync(arg1:battle.vo.BattleShipData, arg2:Boolean):a24.tween.Tween24
        {
            if (arg2 == true)
            {
                return a24.tween.Tween24.parallel(a24.tween.Tween24.func(setHPFromShipData, arg1), getTweenDamageEffectWithShield());
            }
            return a24.tween.Tween24.parallel(a24.tween.Tween24.func(setHPFromShipData, arg1), getTweenDamageEffect());
        }

        public function getTweenDamageEffectWithShield(arg1:Boolean=true):a24.tween.Tween24
        {
            var loc1:*=_isFriendBanner ? 1 : -1;
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop(this).color(16777088, 0), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(this, 0.233333333333).x(31 * loc1), a24.tween.Tween24.tween(this, 0.233333333333).color(16777088, 0.75)), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(this, 0.1).x(21 * loc1), a24.tween.Tween24.tween(this, 0.1).color(8454143, 0.75)), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(this, 0.1).x(27 * loc1), a24.tween.Tween24.tween(this, 0.1).color(16761024, 0.75)), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(this, 0.166666666667).x(25 * loc1), a24.tween.Tween24.tween(this, 0.166666666667).color()), a24.tween.Tween24.wait(0.3), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(this, 0.1).x(0), a24.tween.Tween24.tween(_container, 0.1).x(0)));
        }

        public function getTweenGyoraiShoot():a24.tween.Tween24
        {
            var loc3:*=0;
            var loc2:*=[];
            loc3 = 0;
            while (loc3 < 8)
            {
                loc2.push(a24.tween.Tween24.tween(this, 0.015).x(2));
                loc2.push(a24.tween.Tween24.tween(this, 0.015).x(-2));
                ++loc3;
            }
            loc2.push(a24.tween.Tween24.tween(this, 0.02).x(0));
            var loc1:*=_isFriendBanner ? 1 : -1;
            loc2.push(a24.tween.Tween24.tween(this, 0.02).x(-2 * loc1));
            loc2.push(a24.tween.Tween24.tween(this, 0.015).x(-18 * loc1));
            loc2.push(a24.tween.Tween24.tween(this, 0.04).x(-10 * loc1));
            loc2.push(a24.tween.Tween24.tween(this, 0.015).x(-2 * loc1));
            loc2.push(a24.tween.Tween24.tween(this, 0.015).x(0 * loc1));
            return a24.tween.Tween24.serial(loc2);
        }

        private function _handleDamaged(arg1:battle.events.ShipDamageEvent):void
        {
            if (damagedFunc != null)
            {
                damagedFunc();
            }
            return;
        }

        public function finalize():void
        {
            var loc2:*=0;
            var loc1:*=null;
            damagedFunc = null;
            loc2 = 0;
            while (loc2 < _babbleLayer.numChildren)
            {
                loc1 = _babbleLayer.getChildAt(loc2);
                if (loc1 is battle.display.main.banner.Babble)
                {
                    battle.display.main.banner.Babble(loc1).finalize();
                }
                ++loc2;
            }
            _babbleLayer.removeChildren();
            removeChildren();
            removeEventListener("ShipDamageEvent::DAMAGE", _handleDamaged);
            return;
        }

        public function get overlayLayer():flash.display.Sprite
        {
            return _overlayLayer;
        }

        public function get friendBanner():Boolean
        {
            return _isFriendBanner;
        }

        public override function reserve(arg1:manager.resource.IShipAttacher, arg2:int, arg3:int=100):void
        {
            var loc1:*=null;
            _charaID = arg2;
            if (_charaID < 0)
            {
                if (_charaID != -1)
                {
                    if (_charaID != -2)
                    {
                        if (_charaID == -3)
                        {
                            loc1 = new battle.image.ImgBaseBanner3();
                        }
                    }
                    else
                    {
                        loc1 = new battle.image.ImgBaseBanner2();
                    }
                }
                else
                {
                    loc1 = new battle.image.ImgBaseBanner1();
                }
                _img1.addChild(new flash.display.Bitmap(loc1, "auto", true));
                _img2.addChild(new flash.display.Bitmap(loc1, "auto", true));
            }
            else
            {
                _img1.removeChildren();
                _img2.removeChildren();
                if (arg1)
                {
                    arg1.stackCardSS(arg2, _img1, 100);
                    arg1.stackCardSS(arg2, _img2, 0);
                }
            }
            return;
        }

        public function setTaihiFlag(arg1:Boolean):void
        {
            _isTaihi = arg1;
            return;
        }

        public function setCondition(arg1:int):void
        {
            var loc1:*=null;
            var loc6:*=0;
            var loc5:*=NaN;
            var loc4:*=NaN;
            var loc3:*=NaN;
            var loc2:*=null;
            if (arg1 > 50)
            {
                _img1.visible = true;
                _img2.visible = false;
            }
            else
            {
                _img1.visible = false;
                _img2.visible = true;
            }
            if (_isTaihi != true)
            {
                loc6 = DataFacade.getMasterShipData().getIconType(_charaID);
                setStateIcon(loc6, false, false, arg1, false);
            }
            else
            {
                _statusLayer.removeChildren();
                loc1 = new res.common.MCBannerIcon();
                loc1.gotoAndStop(11);
                _statusLayer.addChild(loc1);
            }
            if (_isTaihi == true || arg1 == 0)
            {
                loc5 = 0.333333333333;
                loc4 = 0.333333333333;
                loc3 = 0.333333333333;
                loc2 = new flash.filters.ColorMatrixFilter([loc5, loc4, loc3, 0, 0, loc5, loc4, loc3, 0, 0, loc5, loc4, loc3, 0, 0, 0, 0, 0, 1, 0]);
                _imageLayer.filters = [loc2];
                dispatchEvent(new flash.events.Event("BattleBanner::GEKICHIN"));
            }
            else
            {
                _imageLayer.filters = [];
            }
            return;
        }

        public function setHPFromShipData(arg1:battle.vo.BattleShipData):void
        {
            setHP(arg1.nowHP, arg1.getMaxHp());
            return;
        }

        public function setHP(arg1:int, arg2:int):void
        {
            if (_nowHP_pre > arg1)
            {
                dispatchEvent(new battle.events.ShipDamageEvent(_nowHP_pre - arg1));
            }
            _nowHP_pre = arg1;
            if (_isFriendBanner)
            {
                _frameLayer.setHPRightText(arg1, arg2);
            }
            else
            {
                _frameLayer.setHPLeftText(arg1, arg2);
            }
            var loc1:*=common.util.Util.getCondition(arg1, arg2);
            setCondition(loc1);
            return;
        }

        public function getTweenDamageEffect(arg1:Boolean=true):a24.tween.Tween24
        {
            var back:Boolean;
            var xPositions:Array;
            var tweens:Array;
            var tween:a24.tween.Tween24;
            var i:int;
            var t:a24.tween.Tween24;

            var loc1:*;
            back = arg1;
            xPositions = [28.6, 16, 4, 18.6, 6.4, 8.6, -3.6, 3.6, -3.6, 3.6, -3.6, 3.6, -1.8, 1.8, -1.8, 1.8, -1.8, 1.8, -1.8, 1.8, -1.8, 0];
            tweens = [];
            if (back == true)
            {
                tweens.push(a24.tween.Tween24.prop(_container).x(0));
            }
            i = 0;
            while (i < xPositions.length)
            {
                tween = a24.tween.Tween24.tween(this, 0.03).x(xPositions[i]);
                tweens.push(tween);
                ++i;
            }
            t = a24.tween.Tween24.parallel(a24.tween.Tween24.serial(tweens), a24.tween.Tween24.serial(a24.tween.Tween24.tween(overlayLayer, 0.3).alpha(1), a24.tween.Tween24.tween(overlayLayer, 0.5).alpha(0)));
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(function ():void
            {
                if (_nowAction != null)
                {
                    _nowAction.skip();
                }
                _nowAction = t;
                return;
            }), t, a24.tween.Tween24.func(function ():void
            {
                _nowAction = null;
                return;
            }))
        }

        public function getGlobalPos(arg1:Boolean=false):flash.geom.Point
        {
            var loc1:*=parent.localToGlobal(new flash.geom.Point(x, y));
            if (arg1 == true)
            {
                loc1.x = loc1.x + 160 / 2;
                loc1.y = loc1.y + 40 / 2;
            }
            return loc1;
        }

        public function instantEnter():void
        {
            alpha = 1;
            _container.x = 0;
            _frameLayer.alpha = 1;
            return;
        }

        public function getTweenEnter(arg1:Number):a24.tween.Tween24
        {
            var loc1:*=null;
            if (_isFriendBanner == true && visible == true)
            {
                loc1 = a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_card);
            }
            else
            {
                loc1 = a24.tween.Tween24.wait(0);
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop(this).alpha(1), loc1, a24.tween.Tween24.tween(_container, 0.3).x(0), a24.tween.Tween24.tween(_frameLayer, 0.5).alpha(1)).delay(arg1);
        }

        public function getTweenEnter_Combined(arg1:Number):a24.tween.Tween24
        {
            var loc1:*=null;
            if (_isFriendBanner == true && visible == true)
            {
                loc1 = a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_card);
            }
            else
            {
                loc1 = a24.tween.Tween24.wait(0);
            }
            var loc2:*=_container.y;
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop(this).alpha(1), a24.tween.Tween24.prop(_container).xy(0, 480), loc1, a24.tween.Tween24.tween(_container, 1.3, a24.tween.Ease24._3_CubicOut).y(loc2), a24.tween.Tween24.tween(_frameLayer, 0.5).alpha(1)).delay(arg1);
        }

        public function getTweenMove_Combined(arg1:Number):a24.tween.Tween24
        {
            var delay:Number;

            delay = arg1;
            return a24.tween.Tween24.serial(a24.tween.Tween24.tween(_container, 0.3).x(0).scale(1), a24.tween.Tween24.tween(_imageLayer.mask, 0.8).x(-80), a24.tween.Tween24.removeChild(_frameLayer.mask, _imageLayer.mask), a24.tween.Tween24.func(function ():void
            {
                _frameLayer.mask = null;
                _imageLayer.mask = null;
                return;
            })).delay(delay)
        }

        public function getTweenExit(arg1:Number):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.tween(_container, 0.3).x(_isFriendBanner ? -160 : 160), a24.tween.Tween24.prop(this).alpha(0), a24.tween.Tween24.prop(_frameLayer).alpha(0)).delay(arg1);
        }

        public function getTweenSakutekiFound():a24.tween.Tween24
        {
            var loc1:*=common.util.Util.createImageResourceWithCentering(res.battle.images.ImgRaderWave);
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop(_frameLayer).alpha(1), a24.tween.Tween24.prop(_overlayLayer).alpha(1), a24.tween.Tween24.prop(_container).x(0), a24.tween.Tween24.prop(loc1).xy(160 / 2, 40 / 2).scale(0.08), a24.tween.Tween24.addChild(_overlayLayer, loc1), a24.tween.Tween24.parallel(a24.tween.Tween24.serial(a24.tween.Tween24.tween(loc1, 0.4).scale(0.75), a24.tween.Tween24.tween(loc1, 0.2).alpha(0).scale(1), a24.tween.Tween24.prop(loc1).alpha(1).scale(0.08), a24.tween.Tween24.tween(loc1, 0.4).scale(0.75), a24.tween.Tween24.tween(loc1, 0.2).alpha(0).scale(1)), a24.tween.Tween24.tween(this, 1.3).alpha(1)), a24.tween.Tween24.parallel(a24.tween.Tween24.serial(a24.tween.Tween24.prop(loc1).alpha(1).scale(0.08), a24.tween.Tween24.tween(loc1, 0.4).scale(0.75), a24.tween.Tween24.tween(loc1, 0.2).alpha(0).scale(1)), a24.tween.Tween24.tween(_overlayLayer, 0.6).alpha(0)), a24.tween.Tween24.removeChild(loc1));
        }

        public static const EVENT_GEKICHIN:String="BattleBanner::GEKICHIN";

        private var _container:battle.display.main.banner.BattleBannerContainer;

        protected var _isFriendBanner:Boolean=false;

        protected var _isTaihi:Boolean=false;

        protected var _frameLayer:battle.display.main.banner.BattleBannerFrameView;

        protected var _shieldlayLayer:flash.display.Sprite;

        protected var _babbleLayer:flash.display.Sprite;

        protected var _antiAircraftLayer:flash.display.Sprite;

        private var _img1:flash.display.Sprite;

        private var _img2:flash.display.Sprite;

        private var _charaID:int;

        private var _nowHP_pre:int=-1;

        private var _nowAction:a24.tween.Tween24=null;

        public var damagedFunc:Function=null;

        protected var _overlayLayer:flash.display.Sprite;
    }
}


//          class BattleBannerCombined
package battle.display.main.banner
{
    import flash.display.*;

    public class BattleBannerCombined extends battle.display.main.banner.BattleBanner
    {
        public function BattleBannerCombined(arg1:battle.display.main.banner.BattleBannerContainer, arg2:Boolean, arg3:Boolean)
        {
            super(arg1, arg2, arg3);
            var loc1:*=new _ImgCls();
            _imageLayer.addChild(loc1);
            _imageLayer.mask = loc1;
            _imageLayer.cacheAsBitmap = true;
            loc1.cacheAsBitmap = true;
            (loc1 = new _ImgCls()).y = -10;
            _frameLayer.addChild(loc1);
            _frameLayer.mask = loc1;
            _frameLayer.cacheAsBitmap = true;
            loc1.cacheAsBitmap = true;
            return;
        }

        private const _ImgCls:Class=mask_png$171f8cd4bc336f6d3d773669f0734981-1863831852;
    }
}


//          class BattleBannerContainer
package battle.display.main.banner
{
    import flash.display.*;

    public class BattleBannerContainer extends flash.display.Sprite
    {
        public function BattleBannerContainer(arg1:Boolean, arg2:Boolean, arg3:Boolean)
        {
            super();
            if (arg3 != true)
            {
                _banner = new battle.display.main.banner.BattleBanner(this, arg1, arg2);
            }
            else
            {
                _banner = new battle.display.main.banner.BattleBannerCombined(this, arg1, arg2);
                scaleX = scaleY = 0.9;
                _banner.y = 2;
            }
            addChild(_banner);
            return;
        }

        public function get banner():battle.display.main.banner.BattleBanner
        {
            return _banner;
        }

        public function finalize():void
        {
            _banner.finalize();
            _banner = null;
            removeChildren();
            return;
        }

        private var _banner:battle.display.main.banner.BattleBanner;
    }
}


//          class BattleBannerFrameView
package battle.display.main.banner
{
    import a24.tween.*;
    import flash.display.*;
    import res.battle.movieclips.*;

    public class BattleBannerFrameView extends flash.display.Sprite
    {
        public function BattleBannerFrameView()
        {
            super();
            _mc = new res.battle.movieclips.BannerExtendMC();
            _mc.x = 95;
            _mc.y = 32;
            _mc.extend.stop();
            _mc.extend.lowHP.stop();
            _mc.extend.bar.stop();
            addChild(_mc);
            return;
        }

        public function get mc():res.battle.movieclips.BannerExtendMC
        {
            return _mc;
        }

        public function initialize(arg1:Boolean, arg2:Boolean):void
        {
            if (arg1)
            {
                _mc.extend.gotoAndStop(arg2 ? 2 : 1);
            }
            else
            {
                _mc.extend.gotoAndStop(arg2 ? 4 : 3);
            }
            return;
        }

        public function setHPLeftText(arg1:int, arg2:int):void
        {
            _mc.textLeft.text = arg1 + " / " + arg2;
            _mc.textRight.text = "";
            _gaugeAnimation(arg1, arg2);
            return;
        }

        public function setHPRightText(arg1:int, arg2:int):void
        {
            _mc.textLeft.text = "";
            _mc.textRight.text = arg1 + " / " + arg2;
            _gaugeAnimation(arg1, arg2);
            return;
        }

        private function _gaugeAnimation(arg1:int, arg2:int):void
        {
            var loc1:*=arg1 / arg2;
            a24.tween.Tween24.tween(_mc.extend.bar, 0.5).frame(Math.floor(loc1 * 100) + 1).play();
            return;
        }

        private var _mc:res.battle.movieclips.BannerExtendMC;
    }
}


//          class SubmarineWave
package battle.display.main.banner
{
    import a24.tween.*;
    import flash.display.*;
    import res.battle.images.*;

    public class SubmarineWave extends flash.display.Sprite
    {
        public function SubmarineWave()
        {
            var loc1:*=null;
            _wave1 = new flash.display.Sprite();
            _wave2 = new flash.display.Sprite();
            super();
            loc1 = new flash.display.Bitmap(new res.battle.images.SubmarineWaveImage());
            loc1.x = (-loc1.width) / 2;
            loc1.y = (-loc1.height) / 2;
            _wave1.addChild(loc1);
            _wave1.x = 160;
            _wave1.y = 26.6666666667;
            addChild(_wave1);
            loc1 = new flash.display.Bitmap(new res.battle.images.SubmarineWaveImage());
            loc1.x = (-loc1.width) / 2;
            loc1.y = (-loc1.height) / 2;
            _wave2.addChild(loc1);
            _wave2.y = 40 / 3;
            addChild(_wave2);
            _init();
            return;
        }

        public function createAnimationTween():a24.tween.Tween24
        {
            _init();
            return a24.tween.Tween24.parallel(a24.tween.Tween24.wait(0.3), a24.tween.Tween24.serial(a24.tween.Tween24.tween(_wave1, 1).alpha(1).scale(1), a24.tween.Tween24.tween(_wave1, 0.3).alpha(0)), a24.tween.Tween24.serial(a24.tween.Tween24.tween(_wave2, 1).alpha(1).scale(1), a24.tween.Tween24.tween(_wave2, 0.3).alpha(0)).delay(0.6));
        }

        public function play():void
        {
            createAnimationTween().play();
            return;
        }

        private function _init():void
        {
            _wave1.alpha = 0;
            var loc1:*;
            _wave1.scaleY = loc1 = 0;
            _wave1.scaleX = loc1;
            _wave2.alpha = 0;
            _wave2.scaleY = loc1 = 0;
            _wave2.scaleX = loc1;
            return;
        }

        private var _wave1:flash.display.Sprite;

        private var _wave2:flash.display.Sprite;
    }
}


//        package plane
//          class FlyPlaneCanvas
package battle.display.main.plane
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.vo.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;

    public class FlyPlaneCanvas extends flash.display.Sprite
    {
        public function FlyPlaneCanvas(arg1:battle.models.BattleData)
        {
            _trio_f = new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneTrioF>();
            _trio_e = new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneTrioE>();
            _plane_f = new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>();
            _plane_e = new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>();
            super();
            _createPlanes_f(arg1);
            _createPlanes_e(arg1);
            _initDamageStage1_f(arg1);
            _initDamageStage1_e(arg1);
            _initDamageStage2_f(arg1);
            _initDamageStage2_e(arg1);
            return;
        }

        private function _initDamageStage2_f(arg1:battle.models.BattleData):void
        {
            var loc1:*=NaN;
            var loc3:*=NaN;
            var loc6:*=NaN;
            var loc4:*=undefined;
            var loc7:*=0;
            var loc5:*;
            var loc8:*=(loc5 = arg1.combatDataD.koukuuData).getStage2Count();
            var loc2:*=loc5.getStage2LostCount();
            if (loc8 > 0 && loc2 > 0)
            {
                loc1 = loc2 / loc8;
                loc6 = (loc3 = getPowerAllAfterStage1_f()) * loc1;
                loc4 = _createCopyWithShuffle(_plane_f);
                loc7 = 0;
                while (loc7 < loc4.length)
                {
                    loc6 = loc4[loc7].calcDamageStage2(loc6);
                    ++loc7;
                }
            }
            return;
        }

        private function _initDamageStage2_e(arg1:battle.models.BattleData):void
        {
            var loc1:*=NaN;
            var loc4:*=NaN;
            var loc8:*=NaN;
            var loc5:*=undefined;
            var loc3:*=undefined;
            var loc10:*=0;
            var loc9:*=undefined;
            var loc6:*=0;
            var loc7:*;
            var loc11:*=(loc7 = arg1.combatDataD.koukuuData).getStage2Count(true);
            var loc2:*=loc7.getStage2LostCount(true);
            if (loc11 > 0)
            {
                loc1 = loc2 / loc11;
                loc8 = (loc4 = getPowerAllAfterStage1_e()) * loc1;
                loc5 = _createCopyWithShuffle(_plane_e);
                loc3 = new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>();
                loc10 = 0;
                while (loc10 < loc5.length)
                {
                    loc8 = loc5[loc10].calcDamageStage2(loc8);
                    if (loc5[loc10].power_afterStage1 > 0)
                    {
                        loc3.push(loc5[loc10]);
                    }
                    ++loc10;
                }
                loc3 = _createCopyWithShuffle(loc3);
                loc9 = arg1.getAntiAircraftAbilities_f().concat();
                loc6 = Math.min(loc3.length, loc9.length);
                loc10 = 0;
                while (loc10 < loc6)
                {
                    loc3[loc10].aa_type = loc9[loc10];
                    ++loc10;
                }
            }
            return;
        }

        private function _getPowerAll(arg1:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>, arg2:String):Number
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < arg1.length)
            {
                loc1 = loc1 + arg1[loc2][arg2];
                ++loc2;
            }
            return loc1;
        }

        private function _getSortedAlivePlanes(arg1:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>):__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc3:*=new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>();
            var loc1:*=new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>();
            loc4 = 0;
            while (loc4 < arg1.length)
            {
                loc2 = arg1[loc4];
                if (loc2.state != 0)
                {
                    if (loc2.state == 1)
                    {
                        loc1.push(loc2);
                    }
                }
                else
                {
                    loc3.push(loc2);
                }
                ++loc4;
            }
            loc3 = _createCopyWithShuffle(loc3);
            loc1 = _createCopyWithShuffle(loc1);
            return loc3.concat(loc1);
        }

        private function _getRandomPlane(arg1:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>):battle.display.main.plane.FlyPlaneSolo
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc3:*=[];
            var loc1:*=[];
            loc4 = 0;
            while (loc4 < arg1.length)
            {
                loc2 = arg1[loc4];
                if (loc2.state != 0)
                {
                    if (loc2.state == 1)
                    {
                        loc1.push(loc2);
                    }
                }
                else
                {
                    loc3.push(loc2);
                }
                ++loc4;
            }
            if (loc3.length)
            {
                return loc3[Math.floor(Math.random() * loc3.length)];
            }
            if (loc1.length)
            {
                return loc1[Math.floor(Math.random() * loc1.length)];
            }
            return null;
        }

        public function get trio_f():__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneTrioF>
        {
            return _trio_f;
        }

        public function get trio_e():__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneTrioE>
        {
            return _trio_e;
        }

        public function finalize():void
        {
            _mainTween = null;
            _trio_f = null;
            _trio_e = null;
            _plane_f = null;
            _plane_e = null;
            return;
        }

        public function getTween(arg1:battle.models.BattleData):a24.tween.Tween24
        {
            return a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(this, "complete"), a24.tween.Tween24.func(_tween, arg1));
        }

        public function play():void
        {
            if (_mainTween != null)
            {
                _mainTween.play();
            }
            return;
        }

        public function pause():void
        {
            if (_mainTween != null)
            {
                _mainTween.pause();
            }
            return;
        }

        public function changeStateAfterStage1():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < trio_f.length)
            {
                trio_f[loc1].changeStateAfterStage1();
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < trio_e.length)
            {
                trio_e[loc1].changeStateAfterStage1();
                ++loc1;
            }
            return;
        }

        public function changeStateAfterStage2():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < trio_f.length)
            {
                trio_f[loc1].changeStateAfterStage2();
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < trio_e.length)
            {
                trio_e[loc1].changeStateAfterStage2();
                ++loc1;
            }
            return;
        }

        private function _tween(arg1:battle.models.BattleData):void
        {
            var loc2:*=0;
            var loc1:*=[];
            loc2 = 0;
            while (loc2 < _trio_f.length)
            {
                loc1.push(_trio_f[loc2].getTweenAnimation(arg1));
                ++loc2;
            }
            loc2 = 0;
            while (loc2 < _trio_e.length)
            {
                loc1.push(_trio_e[loc2].getTweenAnimation(arg1));
                ++loc2;
            }
            _mainTween = a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc1), a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("complete")));
            _mainTween.play();
            return;
        }

        public function getPowerAll_f():Number
        {
            return _getPowerAll(_plane_f, "power");
        }

        public function getPowerAll_e():Number
        {
            return _getPowerAll(_plane_e, "power");
        }

        public function getPowerAllAfterStage1_f():Number
        {
            return _getPowerAll(_plane_f, "power_afterStage1");
        }

        public function getPowerAllAfterStage1_e():Number
        {
            return _getPowerAll(_plane_e, "power_afterStage1");
        }

        public function getPowerAllAfterStage2_f():Number
        {
            return _getPowerAll(_plane_f, "power_afterStage2");
        }

        public function getPowerAllAfterStage2_e():Number
        {
            return _getPowerAll(_plane_e, "power_afterStage2");
        }

        public function getRandomPlane_f():battle.display.main.plane.FlyPlaneSolo
        {
            return _getRandomPlane(_plane_f);
        }

        public function getRandomPlane_e():battle.display.main.plane.FlyPlaneSolo
        {
            return _getRandomPlane(_plane_e);
        }

        protected function _createPlanes_f(arg1:battle.models.BattleData):void
        {
            var loc7:*=0;
            var loc3:*=0;
            var loc4:*=null;
            var loc6:*=null;
            var loc1:*=null;
            var loc2:*=arg1.combatDataD.koukuuData.planeFrom_f;
            var loc5:*=arg1.baseData.isLongDistanceAirRaid();
            loc7 = 0;
            while (loc7 < loc2.length)
            {
                if ((loc3 = loc2[loc7]) < 6)
                {
                    loc4 = arg1.friendShips[loc3];
                }
                else
                {
                    loc4 = arg1.friendShips_combined[loc3 - 6];
                }
                loc6 = loc4.banner.getGlobalPos();
                loc1 = new battle.display.main.plane.FlyPlaneTrioF(loc4, arg1.baseData.isPractice());
                loc1.longDistance = loc5;
                loc1.x = loc6.x + 160 / 2;
                loc1.y = loc6.y + 40 / 2;
                addChild(loc1);
                _trio_f.push(loc1);
                _plane_f = _plane_f.concat(loc1.planes);
                ++loc7;
            }
            return;
        }

        private function _createPlanes_e(arg1:battle.models.BattleData):void
        {
            var loc6:*=0;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*=null;
            var loc2:*=arg1.combatDataD.koukuuData.planeFrom_e;
            loc6 = 0;
            while (loc6 < loc2.length)
            {
                loc3 = loc2[loc6];
                loc5 = (loc4 = arg1.enemyShips[loc3]).banner.getGlobalPos();
                loc1 = new battle.display.main.plane.FlyPlaneTrioE(loc4, arg1.baseData.isPractice());
                loc1.x = loc5.x + 160 / 2;
                loc1.y = loc5.y + 40 / 2;
                addChild(loc1);
                _trio_e.push(loc1);
                _plane_e = _plane_e.concat(loc1.planes);
                ++loc6;
            }
            return;
        }

        private function _createCopyWithShuffle(arg1:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>):__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>
        {
            var loc4:*=0;
            var loc2:*=NaN;
            var loc1:*=null;
            var loc3:*=new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>();
            loc4 = 0;
            while (loc4 < arg1.length)
            {
                loc3.push(arg1[loc4]);
                ++loc4;
            }
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                loc2 = Math.floor(Math.random() * loc3.length);
                loc1 = loc3[loc2];
                loc3[loc2] = loc3[loc4];
                loc3[loc4] = loc1;
                ++loc4;
            }
            return loc3;
        }

        private function _initDamageStage1_f(arg1:battle.models.BattleData):void
        {
            var loc1:*=NaN;
            var loc3:*=NaN;
            var loc6:*=NaN;
            var loc4:*=undefined;
            var loc8:*=0;
            var loc5:*;
            var loc9:*=(loc5 = arg1.combatDataD.koukuuData).getStage1Count();
            var loc2:*=loc5.getStage1LostCount();
            var loc7:*=getPowerAll_f();
            if (loc9 > 0 && loc2 > 0)
            {
                loc1 = loc2 / loc9;
                loc3 = loc7;
                loc6 = loc7 * loc1;
                loc4 = _createCopyWithShuffle(_plane_f);
                loc8 = 0;
                while (loc8 < loc4.length)
                {
                    loc6 = loc4[loc8].calcDamageStage1(loc6);
                    ++loc8;
                }
            }
            return;
        }

        private function _initDamageStage1_e(arg1:battle.models.BattleData):void
        {
            var loc1:*=NaN;
            var loc3:*=NaN;
            var loc6:*=NaN;
            var loc4:*=undefined;
            var loc7:*=0;
            var loc5:*;
            var loc9:*=(loc5 = arg1.combatDataD.koukuuData).getStage1Count(true);
            var loc2:*=loc5.getStage1LostCount(true);
            var loc8:*=getPowerAll_e();
            if (loc9 > 0 && loc2 > 0)
            {
                loc1 = loc2 / loc9;
                loc3 = loc8;
                loc6 = loc8 * loc1;
                loc4 = _createCopyWithShuffle(_plane_e);
                loc7 = 0;
                while (loc7 < loc4.length)
                {
                    loc6 = loc4[loc7].calcDamageStage1(loc6);
                    ++loc7;
                }
            }
            return;
        }

        private var _mainTween:a24.tween.Tween24;

        protected var _trio_f:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneTrioF>;

        protected var _trio_e:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneTrioE>;

        protected var _plane_f:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>;

        protected var _plane_e:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>;
    }
}


//          class FlyPlaneExplode
package battle.display.main.plane
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import flash.display.*;

    public class FlyPlaneExplode extends flash.display.Sprite
    {
        public function FlyPlaneExplode(arg1:int)
        {
            super();
            _type = arg1;
            _smokes = new __AS3__.vec.Vector.<Smoke>();
        }

        private function _setSmoke(arg1:int=1):void
        {
            var loc2:*=0;
            var loc1:*=null;
            loc2 = 0;
            while (loc2 < arg1)
            {
                loc1 = new Smoke(4 - _type);
                loc1.x = 0;
                loc1.y = 0;
                _smokes.push(loc1);
                addChild(loc1);
                ++loc2;
            }
            return;
        }

        public function playAnimation():void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.wait(0.01), a24.tween.Tween24.func(function ():void
            {
                var loc1:*=0;
                loc1 = 0;
                while (loc1 < _smokes.length)
                {
                    _smokes[loc1].mcPlay();
                    ++loc1;
                }
                return;
            }), a24.tween.Tween24.removeAllChildren()).play()
            return;
        }

        private const SHIFT_X:Number=0;

        private const SHIFT_Y:Number=0;

        private var _smokes:__AS3__.vec.Vector.<Smoke>;

        private var _type:int;
    }
}

import flash.display.*;
import res.battle.*;


class Smoke extends flash.display.Sprite
{
    public function Smoke(arg1:int)
    {
        super();
        _mc = new res.battle.AAExplodeMC();
        _mc.smoke.gotoAndStop(arg1);
        addChild(_mc);
        _mc.gotoAndStop(1);
        return;
    }

    public function mcPlay():void
    {
        _mc.gotoAndPlay(1);
        return;
    }

    private var _mc:res.battle.AAExplodeMC;
}

//          class FlyPlaneSolo
package battle.display.main.plane
{
    import a24.tween.*;
    import battle.views.effects.bomb.*;
    import common.util.*;
    import flash.display.*;
    import flash.geom.*;
    import res.battle.plane.*;

    public class FlyPlaneSolo extends flash.display.Sprite
    {
        public function FlyPlaneSolo(arg1:Boolean)
        {
            super();
            _mc = arg1 ? new res.battle.plane.PlaneFMC() : new res.battle.plane.PlaneEMC();
            addChild(_mc);
            _mc.plane.stop();
            _mc.attack_fire.stop();
            _mc.smoke.visible = false;
            return;
        }

        public function get state():int
        {
            return _state;
        }

        public function get power():Number
        {
            return 1;
        }

        public function get power_afterStage1():Number
        {
            return _power_afterStage1;
        }

        public function get power_afterStage2():Number
        {
            return _power_afterStage2;
        }

        public function changeType(arg1:int):void
        {
            _mc.plane.gotoAndStop(arg1);
            return;
        }

        public function calcDamageStage1(arg1:Number):Number
        {
            _power_afterStage1 = power - Math.min(power, arg1);
            if (arg1 >= power)
            {
                return arg1 - power;
            }
            return 0;
        }

        public function calcDamageStage2(arg1:Number):Number
        {
            _power_afterStage2 = power_afterStage1 - Math.min(power_afterStage1, arg1);
            if (arg1 >= power_afterStage1)
            {
                return arg1 - power_afterStage1;
            }
            return 0;
        }

        public function attack():void
        {
            a24.tween.Tween24.serial(common.util.SoundUtil.playSE(BattleAssets.SE_battle_shoot), common.util.MCUtil.frameTween(_mc.attack_fire, Math.ceil(Math.random() * 5) + 1, _mc.attack_fire.totalFrames)).play();
            return;
        }

        public function damage():void
        {
            var bomb:battle.views.effects.bomb.Explosion;

            var loc1:*;
            if (_state == 0)
            {
                bomb = new battle.views.effects.bomb.Explosion();
                _bombTween = a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_mc, bomb), bomb.createBombTween(0, "EXPLOSION_TYPE:SMALL"), a24.tween.Tween24.removeChild(bomb), a24.tween.Tween24.prop(_mc.smoke).scale(0), a24.tween.Tween24.visible(true, _mc.smoke), a24.tween.Tween24.tween(_mc.smoke, 0.3).scale(1), a24.tween.Tween24.func(function ():void
                {
                    _bombTween = null;
                    return;
                }))
                _bombTween.play();
            }
            _state = 1;
            return;
        }

        public function crash():void
        {
            var bomb:battle.views.effects.bomb.Explosion;

            var loc1:*;
            if (_state == 0 || _state == 1)
            {
                bomb = new battle.views.effects.bomb.Explosion();
                _bombTween = a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_mc, bomb), a24.tween.Tween24.parallel(bomb.createBombTween(0, "EXPLOSION_TYPE:SMALL"), a24.tween.Tween24.visible(false, _mc).delay(0.2)), a24.tween.Tween24.removeChild(bomb), a24.tween.Tween24.func(function ():void
                {
                    _bombTween = null;
                    _state = 3;
                    return;
                }))
                _bombTween.play();
            }
            _state = 2;
            return;
        }

        public function getGlobalPos():flash.geom.Point
        {
            var loc1:*=new flash.geom.Point(x, y);
            return parent.localToGlobal(loc1);
        }

        public function play():void
        {
            if (!(_bombTween == null) && _bombTween.pausing)
            {
                _bombTween.play();
            }
            return;
        }

        public function pause():void
        {
            if (!(_bombTween == null) && _bombTween.playing)
            {
                _bombTween.pause();
            }
            return;
        }

        public static const STATE_NORMAL:int=0;

        public static const STATE_DAMAGE:int=1;

        public static const STATE_CRASH:int=2;

        public static const STATE_DEAD:int=3;

        private var _mc:flash.display.MovieClip;

        private var _state:int=0;

        private var _power_afterStage1:Number=1;

        private var _power_afterStage2:Number=1;

        private var _bombTween:a24.tween.Tween24=null;

        public var aa_type:int=0;
    }
}


//          class FlyPlaneTrio
package battle.display.main.plane
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.events.*;
    import battle.models.*;
    import battle.util.*;
    import battle.vo.*;
    import flash.display.*;
    import flash.geom.*;
    import res.battle.plane.*;

    public class FlyPlaneTrio extends flash.display.Sprite
    {
        public function FlyPlaneTrio(arg1:battle.vo.BattleShipData, arg2:Boolean)
        {
            var loc1:*=null;
            _planes = new __AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>();
            _dropTweenMap = new __AS3__.vec.Vector.<a24.tween.Tween24>();
            super();
            _friendFlg = this is battle.display.main.plane.FlyPlaneTrioE ? false : true;
            if (_friendFlg != true)
            {
                _mc = new res.battle.plane.PlaneETrioMC();
            }
            else
            {
                _mc = new res.battle.plane.PlaneFTrioMC();
            }
            _mc.gotoAndPlay(Math.ceil(Math.random() * 60));
            _mc.p1.removeChildren();
            _mc.p2.removeChildren();
            _mc.p3.removeChildren();
            addChild(_mc);
            if (_friendFlg != true)
            {
                loc1 = battle.util.SlotitemUtil.getPlaneItemIDList(arg1);
            }
            else
            {
                loc1 = battle.util.SlotitemUtil.getPlaneItemIDListWithFlyingBoat(arg1);
            }
            if (loc1.length > 0)
            {
                addPlane(loc1[0], arg2);
                if (loc1.length > 1)
                {
                    addPlane(loc1[1], arg2);
                    if (loc1.length > 2)
                    {
                        addPlane(loc1[2], arg2);
                    }
                }
            }
            _mc.gotoAndPlay(Math.ceil(Math.random() * 60));
            return;
        }

        public function get mc():flash.display.MovieClip
        {
            return _mc;
        }

        public function get planes():__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>
        {
            return _planes;
        }

        public function get planeNum():uint
        {
            return _planes.length;
        }

        public function addPlane(arg1:int, arg2:Boolean):void
        {
            var loc2:*=0;
            if (_planes.length > 3)
            {
                return;
            }
            var loc3:*=_mc["p" + (_planes.length + 1)];
            var loc1:*=new battle.display.main.plane.FlyPlaneSolo(_friendFlg);
            _planes.push(loc1);
            _dropTweenMap.push(null);
            if (_friendFlg != true)
            {
                loc2 = battle.util.SlotitemUtil.getEnemyPlaneType(arg1, arg2);
            }
            else
            {
                loc2 = battle.util.SlotitemUtil.getFriendPlaneType(arg1);
            }
            loc1.changeType(loc2);
            loc3.addChild(loc1);
            return;
        }

        public function attack(arg1:battle.models.BattleData):void
        {
            _getTweenAttack(arg1).play();
            return;
        }

        public function changeStateAfterStage1():void
        {
            var loc3:*=0;
            var loc2:*=null;
            var loc1:*=0;
            loc3 = 0;
            while (loc3 < _planes.length)
            {
                loc2 = _planes[loc3];
                if (loc2.power_afterStage1 <= 0)
                {
                    if (loc2.state == 1)
                    {
                        loc1 = _planes.indexOf(loc2);
                        if (_dropTweenMap[loc1] != null)
                        {
                            _dropTweenMap[loc1].stop();
                            _dropTweenMap[loc1] = null;
                        }
                    }
                    loc2.crash();
                }
                else if (loc2.power_afterStage1 < loc2.power)
                {
                    if (loc2.state == 0)
                    {
                        _createDropPlaneTween(loc2);
                    }
                    loc2.damage();
                }
                ++loc3;
            }
            return;
        }

        public function changeStateAfterStage2():void
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=0;
            loc4 = 0;
            while (loc4 < _planes.length)
            {
                loc2 = _planes[loc4];
                if (loc2.aa_type > 0)
                {
                    loc3 = new battle.display.main.plane.FlyPlaneExplode(loc2.aa_type);
                    loc3.x = loc2.x;
                    loc3.y = loc2.y;
                    loc2.addChild(loc3);
                    loc3.playAnimation();
                }
                if (loc2.power_afterStage2 <= 0)
                {
                    if (loc2.state == 1)
                    {
                        loc1 = _planes.indexOf(loc2);
                        if (_dropTweenMap[loc1] != null)
                        {
                            _dropTweenMap[loc1].stop();
                            _dropTweenMap[loc1] = null;
                        }
                    }
                    loc2.crash();
                }
                else if (loc2.power_afterStage2 < loc2.power)
                {
                    if (loc2.state == 0)
                    {
                        _createDropPlaneTween(loc2);
                    }
                    loc2.damage();
                }
                ++loc4;
            }
            return;
        }

        public function drawLine():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=_friendFlg ? 1 : -1;
            if (longDistance != true)
            {
                loc2 = new flash.geom.Point(610 * loc1, 160);
                loc3 = new flash.geom.Point(835 * loc1, -190);
            }
            else
            {
                loc2 = new flash.geom.Point(400 * loc1, 300);
                loc3 = new flash.geom.Point(535 * loc1, -670);
            }
            graphics.lineStyle(3, 65280);
            graphics.moveTo(0, 0);
            graphics.curveTo(loc2.x, loc2.y, loc3.x, loc3.y);
            graphics.lineStyle(1, 255);
            graphics.moveTo(0, 0);
            graphics.lineTo(loc2.x, loc2.y);
            graphics.lineTo(loc3.x, loc3.y);
            return;
        }

        public function getTweenAnimation(arg1:battle.models.BattleData):a24.tween.Tween24
        {
            return a24.tween.Tween24.waitEvent(this, "battle.events.PlaneEventEnd").onPause(pause).onPlay(play);
        }

        public function play():void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc3:*=null;
            var loc1:*=NaN;
            var loc7:*=0;
            var loc2:*=_friendFlg ? 1 : -1;
            if (_mainTimelineTween == null)
            {
                if (longDistance != true)
                {
                    loc4 = new flash.geom.Point(740 * loc2, 200);
                    loc5 = new flash.geom.Point(915 * loc2, -370);
                }
                else
                {
                    loc4 = new flash.geom.Point(400 * loc2, 300);
                    loc5 = new flash.geom.Point(535 * loc2, -670);
                }
                _mc.scaleX = 0;
                _mc.scaleY = 0;
                addChild(_mc);
                loc6 = [{"point":[0, 0], "pre":[0, 0], "post":[0.27, 0.19]}, {"point":[1, 1], "pre":[0.88, 0.58], "post":[1, 1]}];
                loc3 = a24.tween.Ease24.custom(loc6);
                loc1 = 3.7;
                _mainTimelineTween = a24.tween.Tween24.serial(a24.tween.Tween24.tween(_mc, 0.3).scaleXY(0.75, 0.75), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_mc, loc1, loc3).xy(loc5.x, loc5.y).bezier(loc4.x, loc4.y), a24.tween.Tween24.tween(_mc, 0.5).scaleXY(0.5, 0.5).delay(loc1 - 0.5))).onComplete(_prePlayEnd);
            }
            _mainTimelineTween.play();
            loc7 = 0;
            while (loc7 < _dropTweenMap.length)
            {
                if (_dropTweenMap[loc7] != null)
                {
                    _dropTweenMap[loc7].play();
                }
                ++loc7;
            }
            _mc.play();
            loc7 = 0;
            while (loc7 < _planes.length)
            {
                _planes[loc7].play();
                ++loc7;
            }
            return;
        }

        private function pause():void
        {
            var loc1:*=0;
            if (_mainTimelineTween != null)
            {
                _mainTimelineTween.pause();
            }
            loc1 = 0;
            while (loc1 < _dropTweenMap.length)
            {
                if (_dropTweenMap[loc1] != null)
                {
                    _dropTweenMap[loc1].pause();
                }
                ++loc1;
            }
            _mc.stop();
            loc1 = 0;
            while (loc1 < _planes.length)
            {
                _planes[loc1].pause();
                ++loc1;
            }
            return;
        }

        private function _prePlayEnd():void
        {
            _mainTimelineTween = null;
            _playEnd();
            return;
        }

        private function _playEnd():void
        {
            var loc1:*=0;
            if (_mainTimelineTween != null)
            {
                return;
            }
            loc1 = 0;
            while (loc1 < _dropTweenMap.length)
            {
                if (_dropTweenMap[loc1] != null)
                {
                    return;
                }
                ++loc1;
            }
            dispatchEvent(new battle.events.PlaneEvent("PLANE_EVENT::END"));
            return;
        }

        private function _getTweenAttack(arg1:battle.models.BattleData):a24.tween.Tween24
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=[a24.tween.Tween24.wait(0)];
            if (_hasAttack(arg1))
            {
                loc1 = [0, 2, 3];
                loc2 = 0;
                while (loc2 < _planes.length)
                {
                    loc3.push(a24.tween.Tween24.func(_planes[loc2].attack).delay(loc1[loc2] / 30));
                    ++loc2;
                }
            }
            return a24.tween.Tween24.parallel(loc3);
        }

        protected function _hasAttack(arg1:battle.models.BattleData):Boolean
        {
            return false;
        }

        private function _createDropPlaneTween(arg1:battle.display.main.plane.FlyPlaneSolo):void
        {
            var loc7:*=arg1.getGlobalPos();
            var loc4:*=globalToLocal(loc7);
            arg1.x = loc4.x;
            arg1.y = loc4.y;
            var loc8:*;
            arg1.scaleY = loc8 = 0.75;
            arg1.scaleX = loc8;
            addChild(arg1);
            var loc5:*;
            var loc1:*=(loc5 = 480 - loc7.y + arg1.height) / 100;
            var loc6:*=(_friendFlg ? 1 : -1) * loc5;
            var loc3:*=a24.tween.Tween24.parallel(a24.tween.Tween24.tween(arg1, Math.floor(loc1), a24.tween.Ease24._2_QuadInOut).$$x(loc6), a24.tween.Tween24.tween(arg1, Math.floor(loc1), a24.tween.Ease24._4_QuartIn).$$y(loc5));
            var loc2:*=_planes.indexOf(arg1);
            _dropTweenMap[loc2] = loc3;
            loc3.onComplete(_dropTweenEnd, loc2).play();
            return;
        }

        private function _dropTweenEnd(arg1:int):void
        {
            _dropTweenMap[arg1] = null;
            _playEnd();
            return;
        }

        protected var _friendFlg:Boolean=true;

        protected var _mc:flash.display.MovieClip;

        protected var _planes:__AS3__.vec.Vector.<battle.display.main.plane.FlyPlaneSolo>;

        protected var _dropTweenMap:__AS3__.vec.Vector.<a24.tween.Tween24>;

        private var _mainTimelineTween:a24.tween.Tween24;

        public var longDistance:Boolean=false;
    }
}


//          class FlyPlaneTrioE
package battle.display.main.plane
{
    import battle.models.*;
    import battle.vo.*;

    public class FlyPlaneTrioE extends battle.display.main.plane.FlyPlaneTrio
    {
        public function FlyPlaneTrioE(arg1:battle.vo.BattleShipData, arg2:Boolean)
        {
            super(arg1, arg2);
            return;
        }

        protected override function _hasAttack(arg1:battle.models.BattleData):Boolean
        {
            return arg1.hasAtacckPlane_e() && arg1.combatDataD.koukuuData.planeFrom_f.length;
        }
    }
}


//          class FlyPlaneTrioF
package battle.display.main.plane
{
    import battle.models.*;
    import battle.vo.*;

    public class FlyPlaneTrioF extends battle.display.main.plane.FlyPlaneTrio
    {
        public function FlyPlaneTrioF(arg1:battle.vo.BattleShipData, arg2:Boolean)
        {
            super(arg1, arg2);
            return;
        }

        protected override function _hasAttack(arg1:battle.models.BattleData):Boolean
        {
            return arg1.hasAtacckPlane_f() && arg1.combatDataD.koukuuData.planeFrom_e.length;
        }
    }
}


//        class BackgroundView
package battle.display.main
{
    import a24.tween.*;
    import flash.display.*;
    import res.images.*;

    public class BackgroundView extends flash.display.Sprite
    {
        public function BackgroundView()
        {
            super();
            return;
        }

        public function isDay():Boolean
        {
            return _isDay;
        }

        public function setBackground(arg1:Boolean=false):void
        {
            var loc1:*=null;
            _isDay = !arg1;
            if (arg1 == true && numChildren > 0)
            {
                _changeToNight();
                return;
            }
            if (arg1)
            {
                loc1 = new flash.display.Bitmap(new res.images.ImgBackgroundNight());
            }
            else
            {
                loc1 = new flash.display.Bitmap(new res.images.ImgBackgroundDay());
            }
            loc1.smoothing = true;
            removeChildren();
            addChild(loc1);
            return;
        }

        public function finalize():void
        {
            removeChildren();
            return;
        }

        private function _changeToNight():void
        {
            var loc1:*=new flash.display.Bitmap(new res.images.ImgBackgroundNight());
            loc1.alpha = 0;
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(loc1).alpha(0), a24.tween.Tween24.addChild(this, loc1), a24.tween.Tween24.tween(loc1, 0.75).alpha(1), a24.tween.Tween24.removeChild(this.getChildAt(0))).play();
            return;
        }

        private var _isDay:Boolean=true;
    }
}


//        class BannerView
package battle.display.main
{
    import battle.display.main.banner.*;
    import flash.display.*;

    public class BannerView extends flash.display.Sprite
    {
        public function BannerView()
        {
            super();
            _friends = new battle.display.main.banner.BannerGroup(true, false);
            _enemys = new battle.display.main.banner.BannerGroup(false, false);
            _friends_combined = new battle.display.main.banner.BannerGroup(true, true);
            _friends_combined.x = _friends_combined.x + 170;
            _effect_layer = new flash.display.Sprite();
            addChild(_friends_combined);
            addChild(_friends);
            addChild(_enemys);
            addChild(_effect_layer);
            return;
        }

        public function get friends():battle.display.main.banner.BannerGroup
        {
            return _friends;
        }

        public function get enemys():battle.display.main.banner.BannerGroup
        {
            return _enemys;
        }

        public function get friends_combined():battle.display.main.banner.BannerGroup
        {
            return _friends_combined;
        }

        public function get effectLayer():flash.display.Sprite
        {
            return _effect_layer;
        }

        public function finalize():void
        {
            _friends.finalize();
            _friends = null;
            _enemys.finalize();
            _enemys = null;
            _friends_combined.finalize();
            _friends_combined = null;
            _effect_layer = null;
            removeChildren();
            return;
        }

        private var _friends_combined:battle.display.main.banner.BannerGroup;

        private var _friends:battle.display.main.banner.BannerGroup;

        private var _enemys:battle.display.main.banner.BannerGroup;

        private var _effect_layer:flash.display.Sprite;
    }
}


//        class DamageView
package battle.display.main
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.common.*;
    import battle.display.main.banner.*;
    import battle.models.attack.*;
    import battle.util.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;

    public class DamageView extends flash.display.Sprite
    {
        public function DamageView(arg1:battle.views.MainView)
        {
            super();
            _view = arg1;
            _damages = new __AS3__.vec.Vector.<battle.display.common.DamageNumberView>();
            _shields_ = new __AS3__.vec.Vector.<battle.display.common.Shield>();
            return;
        }

        public function finalize():void
        {
            _view = null;
            _damages = null;
            _shields_ = null;
            removeChildren();
            return;
        }

        public function add(arg1:battle.models.attack.AttackData):void
        {
            addDamegeNumber(arg1.defender, arg1.damage, arg1.hitState);
            return;
        }

        public function addDamegeNumber(arg1:battle.vo.BattleShipData, arg2:Number, arg3:int, arg4:Boolean=true):void
        {
            var loc2:*=null;
            var loc1:*=null;
            if (arg1 == null)
            {
                return;
            }
            var loc4:*=arg1.banner.getGlobalPos();
            var loc3:*=new battle.display.common.DamageNumberView(loc4);
            if (battle.vo.BattleShipData.isPractice != true)
            {
                loc3.damage = Math.floor(arg2);
            }
            else
            {
                loc3.damage = Math.min(Math.floor(arg2), arg1.nowHP - 1);
            }
            loc3.hitstate = arg3;
            addChild(loc3);
            _damages.push(loc3);
            if (battle.util.BattleUtil.isShield(arg2))
            {
                if (arg1 is battle.vo.FriendShipData)
                {
                    if (arg1.combined != true)
                    {
                        loc1 = _view.bannerLayer.friends.getBanner(0);
                    }
                    else
                    {
                        loc1 = _view.bannerLayer.friends_combined.getBanner(0);
                    }
                }
                else
                {
                    loc1 = _view.bannerLayer.enemys.getBanner(0);
                }
                if (loc1 != null)
                {
                    loc2 = new battle.display.common.Shield(loc1, arg1.banner);
                    loc4 = loc1.getGlobalPos();
                    loc2.y = loc4.y + 40 / 2;
                    if (arg1 is battle.vo.EnemyShipData)
                    {
                        loc2.scaleX = -1;
                        loc2.x = loc4.x - 20;
                    }
                    else
                    {
                        loc2.x = loc4.x + 160 + 20;
                    }
                    addChild(loc2);
                    _shields_.push(loc2);
                }
            }
            arg1.damage(arg2, arg4);
            return;
        }

        public function getTweenAnimation(arg1:Number=0.3, arg2:Number=1):a24.tween.Tween24
        {
            var loc4:*=0;
            var loc3:*=null;
            var loc2:*=null;
            var loc1:*=[];
            loc4 = 0;
            while (loc4 < _damages.length)
            {
                loc3 = _damages[loc4];
                loc1.push(loc3.getTween(arg1));
                ++loc4;
            }
            loc4 = 0;
            while (loc4 < _shields_.length)
            {
                if (loc2 = _shields_[loc4])
                {
                    loc1.push(a24.tween.Tween24.func(common.debug.Debug.log, "かばう発動 index->" + loc4));
                    loc1.push(loc2.getTween(arg1));
                }
                ++loc4;
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc1).timeScale(arg2), a24.tween.Tween24.func(_animationEnd));
        }

        public function getTweenAnimationAsync(arg1:Number=1):a24.tween.Tween24
        {
            var timeScale:Number;

            timeScale = arg1;
            return a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(this, "complete"), a24.tween.Tween24.func(function ():void
            {
                getTweenAnimation(-1, timeScale).play();
                return;
            }))
        }

        private function _animationEnd():void
        {
            _damages = new __AS3__.vec.Vector.<battle.display.common.DamageNumberView>();
            _shields_ = new __AS3__.vec.Vector.<battle.display.common.Shield>();
            dispatchEvent(new flash.events.Event("complete"));
            return;
        }

        private var _view:battle.views.MainView;

        private var _damages:__AS3__.vec.Vector.<battle.display.common.DamageNumberView>;

        private var _shields_:__AS3__.vec.Vector.<battle.display.common.Shield>;
    }
}


//      package result
//        package kikantaiha
//          class MessageBox
package battle.display.result.kikantaiha
{
    import a24.tween.*;
    import battle.models.*;
    import flash.display.*;
    import flash.events.*;
    import res.battle.result.mc.*;

    public class MessageBox extends flash.display.Sprite
    {
        public function MessageBox()
        {
            _mc = new res.battle.result.mc.MCKikanTaihaBox();
            super();
            _mc.line1.text = "";
            _mc.line2.text = "";
            _mc.line3.text = "";
            addChild(_mc);
            return;
        }

        public function getTweenShow(arg1:battle.models.BattleData):a24.tween.Tween24
        {
            var loc1:*=arg1.getDeckName();
            var loc2:*=arg1.friendShips[0].getName();
            _line1 = "「" + loc1 + "」旗艦";
            _line2 = "「" + loc2 + "」が大破しました。";
            _line3 = "残念ですが進撃は困難です...母港に帰投します。";
            return a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(this, "complete"), a24.tween.Tween24.func(addEventListener, "enterFrame", _handleEnterframe));
        }

        private function _handleEnterframe(arg1:flash.events.Event):void
        {
            if (_line1.length)
            {
                _mc.line1.text = _mc.line1.text + _line1.charAt(0);
                _line1 = _line1.slice(1);
            }
            else if (_line2.length)
            {
                _mc.line2.text = _mc.line2.text + _line2.charAt(0);
                _line2 = _line2.slice(1);
            }
            else if (_line3.length)
            {
                _mc.line3.text = _mc.line3.text + _line3.charAt(0);
                _line3 = _line3.slice(1);
            }
            else
            {
                removeEventListener("enterFrame", _handleEnterframe);
                dispatchEvent(new flash.events.Event("complete"));
            }
            return;
        }

        private var _mc:res.battle.result.mc.MCKikanTaihaBox;

        private var _line1:String="";

        private var _line2:String="";

        private var _line3:String="";
    }
}


//          class Smoke
package battle.display.result.kikantaiha
{
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import res.battle.result.mc.*;

    public class Smoke extends flash.display.Sprite
    {
        public function Smoke()
        {
            super();
            _mc = new res.battle.result.mc.MCKikanTaihaSmoke();
            _mc.stop();
            _timer = new flash.utils.Timer(0, 0);
            return;
        }

        public function startSmoke():void
        {
            if (_mc.parent != null)
            {
                return;
            }
            addChild(_mc);
            _timer.addEventListener("timerComplete", _smoke);
            _animSmoke();
            return;
        }

        public function stopSmoke():void
        {
            _timer.removeEventListener("timerComplete", _smoke);
            removeChild(_mc);
            return;
        }

        private function _animSmoke():void
        {
            if (_mc.parent == null)
            {
                return;
            }
            if (_timer.running == false)
            {
                _timer.delay = Math.random() * 1000;
                _timer.repeatCount = 1;
                _timer.start();
            }
            return;
        }

        private function _smoke(arg1:flash.events.TimerEvent=null):void
        {
            _mc.gotoAndStop(1);
            common.util.MCUtil.frameTween(_mc, 1, _mc.totalFrames).onComplete(_animSmoke).play();
            return;
        }

        private var _mc:res.battle.result.mc.MCKikanTaihaSmoke=null;

        private var _timer:flash.utils.Timer;
    }
}


//          class SmokeLayer
package battle.display.result.kikantaiha
{
    import flash.display.*;

    public class SmokeLayer extends flash.display.Sprite
    {
        public function SmokeLayer()
        {
            _smoke1 = new battle.display.result.kikantaiha.Smoke();
            _smoke2 = new battle.display.result.kikantaiha.Smoke();
            _smoke3 = new battle.display.result.kikantaiha.Smoke();
            super();
            _smoke1.x = 184;
            _smoke1.y = 120;
            _smoke2.x = 300;
            _smoke2.y = 224;
            _smoke3.x = 146;
            _smoke3.y = 372;
            addChild(_smoke1);
            addChild(_smoke2);
            addChild(_smoke3);
            return;
        }

        public function start():void
        {
            _smoke1.startSmoke();
            _smoke2.startSmoke();
            _smoke3.startSmoke();
            return;
        }

        public function stop():void
        {
            _smoke1.stopSmoke();
            _smoke2.stopSmoke();
            _smoke3.stopSmoke();
            return;
        }

        private var _smoke1:battle.display.result.kikantaiha.Smoke;

        private var _smoke2:battle.display.result.kikantaiha.Smoke;

        private var _smoke3:battle.display.result.kikantaiha.Smoke;
    }
}


//      package yasen
//        class YasenStartTextView
package battle.display.yasen
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import res.battle.images.*;

    public class YasenStartTextView extends flash.display.Sprite
    {
        public function YasenStartTextView()
        {
            var loc5:*=0;
            var loc4:*=null;
            var loc2:*=null;
            super();
            var loc3:*=[-220, -110, 0, 110, 220, -165, -55, 55, 165];
            var loc1:*=[-70, -70, -70, -70, -70, 70, 70, 70, 70];
            _imgVec = new __AS3__.vec.Vector.<flash.display.Sprite>();
            loc5 = 0;
            while (loc5 < 9)
            {
                loc4 = [res.battle.images.ImgYasenStartText1, res.battle.images.ImgYasenStartText2, res.battle.images.ImgYasenStartText3, res.battle.images.ImgYasenStartText4, res.battle.images.ImgYasenStartText5, res.battle.images.ImgYasenStartText6, res.battle.images.ImgYasenStartText7, res.battle.images.ImgYasenStartText8, res.battle.images.ImgYasenStartText9][loc5];
                loc2 = common.util.Util.createImageResourceWithCentering(loc4);
                _imgVec.push(loc2);
                loc2.x = loc3[loc5];
                loc2.y = loc1[loc5];
                loc2.alpha = 0;
                addChild(loc2);
                ++loc5;
            }
            return;
        }

        public function getTweenShow():a24.tween.Tween24
        {
            var loc3:*=0;
            var loc1:*=null;
            var loc2:*=[];
            loc3 = 0;
            while (loc3 < _imgVec.length)
            {
                loc1 = a24.tween.Tween24.serial(a24.tween.Tween24.prop(_imgVec[loc3]).alpha(0).scale(1.5), a24.tween.Tween24.tween(_imgVec[loc3], 0.3).scale(1).alpha(1).delay(0.1 * loc3), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_don2));
                loc2.push(loc1);
                ++loc3;
            }
            return a24.tween.Tween24.parallel.apply(null, loc2);
        }

        public function getTweenHide():a24.tween.Tween24
        {
            var loc3:*=0;
            var loc1:*=null;
            var loc2:*=[];
            loc3 = 0;
            while (loc3 < _imgVec.length)
            {
                loc1 = a24.tween.Tween24.removeChild(_imgVec[loc3]);
                loc2.push(loc1);
                ++loc3;
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.tween(this, 0.6).scale(3).alpha(0), a24.tween.Tween24.parallel.apply(null, loc2));
        }

        private var _imgVec:__AS3__.vec.Vector.<flash.display.Sprite>;
    }
}


//    package events
//      class PlaneEvent
package battle.events
{
    import flash.events.*;

    public class PlaneEvent extends flash.events.Event
    {
        public function PlaneEvent(arg1:String)
        {
            var loc1:*="battle.events.PlaneEvent";
            _state = arg1;
            if (_state == "PLANE_EVENT::END")
            {
                loc1 = "battle.events.PlaneEventEnd";
            }
            super(loc1, bubbles, cancelable);
            return;
        }

        public function get state():String
        {
            return _state;
        }

        public static const START:String="PLANE_EVENT::START";

        public static const AIRvsAIR:String="PLANE_EVENT::AIRvsAIR";

        public static const AIRvsAIR_BOMB:String="PLANE_EVENT::AIRvsAIR_BOMB";

        public static const ANTIAIRCRAFT_CUTIN:String="PLANE_EVENT::ANTIAIRCRAFT_CUTIN";

        public static const ANTIAIRCRAFT:String="PLANE_EVENT::ANTIAIRCRAFT";

        public static const ANTIAIRCRAFT_BOMB:String="PLANE_EVENT::ANTIAIRCRAFT_BOMB";

        public static const GYORAI:String="PLANE_EVENT::GYORAI";

        public static const BAKUGEKI:String="PLANE_EVENT::BAKUGEKI";

        public static const DAMAGE:String="PLANE_EVENT::DAMAGE";

        public static const END:String="PLANE_EVENT::END";

        public static const PLANE_EVENT:String="battle.events.PlaneEvent";

        public static const PLANE_EVENT_END:String="battle.events.PlaneEventEnd";

        private var _state:String;
    }
}


//      class ShipDamageEvent
package battle.events
{
    import flash.events.*;

    public class ShipDamageEvent extends flash.events.Event
    {
        public function ShipDamageEvent(arg1:Number, arg2:Boolean=false, arg3:Boolean=false)
        {
            _damage = arg1;
            super("ShipDamageEvent::DAMAGE", arg2, arg3);
            return;
        }

        public function get damage():Number
        {
            return _damage;
        }

        public static const DAMAGE:String="ShipDamageEvent::DAMAGE";

        private var _damage:Number=0;
    }
}


//      class ShipVoiceEvent
package battle.events
{
    import battle.vo.*;
    import flash.events.*;

    public class ShipVoiceEvent extends flash.events.Event
    {
        public function ShipVoiceEvent(arg1:Boolean=false, arg2:Boolean=false)
        {
            super("ShipVoiceEvent::VOICE", arg1, arg2);
            return;
        }

        public static const VOICE:String="ShipVoiceEvent::VOICE";

        public var ship:battle.vo.BattleShipData=null;
    }
}


//    package image
//      class ImgBaseBanner1
package battle.image
{
    import flash.display.*;

    public dynamic class ImgBaseBanner1 extends flash.display.BitmapData
    {
        public function ImgBaseBanner1(arg1:int=160, arg2:int=40)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//      class ImgBaseBanner2
package battle.image
{
    import flash.display.*;

    public dynamic class ImgBaseBanner2 extends flash.display.BitmapData
    {
        public function ImgBaseBanner2(arg1:int=160, arg2:int=40)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//      class ImgBaseBanner3
package battle.image
{
    import flash.display.*;

    public dynamic class ImgBaseBanner3 extends flash.display.BitmapData
    {
        public function ImgBaseBanner3(arg1:int=160, arg2:int=40)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//      class ImgTelopAirUnit
package battle.image
{
    import flash.display.*;

    public dynamic class ImgTelopAirUnit extends flash.display.BitmapData
    {
        public function ImgTelopAirUnit(arg1:int=800, arg2:int=154)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//      class ImgTelopAirUnitSupportResultOrange
package battle.image
{
    import flash.display.*;

    public dynamic class ImgTelopAirUnitSupportResultOrange extends flash.display.BitmapData
    {
        public function ImgTelopAirUnitSupportResultOrange(arg1:int=420, arg2:int=63)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//      class ImgTelopAirUnitSupportResultRed
package battle.image
{
    import flash.display.*;

    public dynamic class ImgTelopAirUnitSupportResultRed extends flash.display.BitmapData
    {
        public function ImgTelopAirUnitSupportResultRed(arg1:int=360, arg2:int=63)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//      class ImgTelopAirUnitSupportResultYellow
package battle.image
{
    import flash.display.*;

    public dynamic class ImgTelopAirUnitSupportResultYellow extends flash.display.BitmapData
    {
        public function ImgTelopAirUnitSupportResultYellow(arg1:int=481, arg2:int=64)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//    package models
//      package attack
//        package koukuu
//          class KoukuuTaikuCutinData
package battle.models.attack.koukuu
{
    import __AS3__.vec.*;
    import battle.vo.*;
    import common.util.*;

    public class KoukuuTaikuCutinData extends Object
    {
        public function KoukuuTaikuCutinData(arg1:Object, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>)
        {
            super();
            _o = arg1;
            var loc2:*;
            if ((loc2 = _getShipIndex()) < 0 || arg2.length <= loc2)
            {
                _ship = null;
            }
            else
            {
                _ship = arg2[loc2];
            }
            var loc1:*=_getSlotIDs();
            _slots = __AS3__.vec.Vector.<int>(loc1);
            while (_slots.length > 3)
            {
                _slots.pop();
            }
            return;
        }

        public function get ship():battle.vo.BattleShipData
        {
            return _ship;
        }

        public function get slotitems():__AS3__.vec.Vector.<int>
        {
            return _slots.concat();
        }

        public function get type():int
        {
            return common.util.Util.getInt(_o, "api_kind", 1);
        }

        private function _getShipIndex():int
        {
            return common.util.Util.getInt(_o, "api_idx", -1);
        }

        private function _getSlotIDs():Array
        {
            return common.util.Util.getArray(_o, "api_use_items", []);
        }

        private var _ship:battle.vo.BattleShipData;

        private var _slots:__AS3__.vec.Vector.<int>;

        private var _o:Object;
    }
}


//        class AirUnitSupportData
package battle.models.attack
{
    import __AS3__.vec.*;
    import battle.vo.*;
    import common.util.*;

    public class AirUnitSupportData extends Object
    {
        public function AirUnitSupportData(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        private function _getStage2():Object
        {
            return common.util.Util.getObject(_o, "api_stage2");
        }

        private function _getStage3():Object
        {
            return common.util.Util.getObject(_o, "api_stage3");
        }

        public function get airUnitID():int
        {
            return common.util.Util.getInt(_o, "api_base_id");
        }

        public function getCompanyTotalNum():int
        {
            var loc1:*=_getCompanyList();
            return loc1.length;
        }

        public function getCompanyMstID(arg1:int):int
        {
            var loc1:*=_getCompanyData(arg1);
            if (loc1 == null)
            {
                return 0;
            }
            return common.util.Util.getInt(loc1, "api_mst_id");
        }

        public function getCompanyCount(arg1:int):int
        {
            var loc1:*=_getCompanyData(arg1);
            if (loc1 == null)
            {
                return 0;
            }
            return common.util.Util.getInt(loc1, "api_count");
        }

        public function getEnemyPlaneFrom():Array
        {
            var tmp:Array;

            var loc1:*;
            tmp = common.util.Util.getArray(_o, "api_plane_from");
            if (!(tmp == null) && tmp is Array && tmp.length > 0)
            {
                tmp = tmp.length != 1 ? tmp[1] : tmp[0];
                if (!(tmp.length == 1 && tmp[0] == -1))
                {
                    return tmp.map(function ():*
                    {
                        var callback:Function;

                        return undefined = function (arg1:int, arg2:int, arg3:Array):int
                        {
                            return arg1 - 7;
                        }
                    }())
                }
            }
            return [];
        }

        public function isExistStage1():Boolean
        {
            return !(_getStage1() == null);
        }

        public function getFriendStage1StartCount():int
        {
            var loc1:*=_getStage1();
            if (loc1 == null)
            {
                return 0;
            }
            return common.util.Util.getInt(loc1, "api_f_count");
        }

        public function getFriendStage1LostCount():int
        {
            var loc1:*=_getStage1();
            if (loc1 == null)
            {
                return 0;
            }
            return common.util.Util.getInt(loc1, "api_f_lostcount");
        }

        public function getFriendStage1EndCount():int
        {
            return getFriendStage1StartCount() - getFriendStage1LostCount();
        }

        public function getFriendStage1LostRate():Number
        {
            var loc1:*=getFriendStage1StartCount();
            if (loc1 == 0)
            {
                return 0;
            }
            var loc2:*=getFriendStage1LostCount();
            if (loc2 == 0)
            {
                return 0;
            }
            return getFriendStage1LostCount() / getFriendStage1StartCount();
        }

        public function getEnemyStage1StartCount():int
        {
            var loc1:*=_getStage1();
            if (loc1 == null)
            {
                return 0;
            }
            return common.util.Util.getInt(loc1, "api_e_count");
        }

        public function getEnemyStage1LostCount():int
        {
            var loc1:*=_getStage1();
            if (loc1 == null)
            {
                return 0;
            }
            return common.util.Util.getInt(loc1, "api_e_lostcount");
        }

        public function getEnemyStage1EndCount():int
        {
            return getEnemyStage1StartCount() - getEnemyStage1LostCount();
        }

        public function getEnemyStage1LostRate():Number
        {
            var loc1:*=getEnemyStage1StartCount();
            if (loc1 == 0)
            {
                return 0;
            }
            var loc2:*=getEnemyStage1LostCount();
            if (loc2 == 0)
            {
                return 0;
            }
            return getEnemyStage1LostCount() / getEnemyStage1StartCount();
        }

        public function isExistStage2():Boolean
        {
            return !(_getStage2() == null);
        }

        public function getFriendStage2StartCount():int
        {
            return getFriendStage1EndCount();
        }

        public function getFriendStage2LostCount():int
        {
            var loc1:*=_getStage2();
            if (loc1 == null)
            {
                return 0;
            }
            return common.util.Util.getInt(loc1, "api_f_lostcount");
        }

        public function getFriendStage2EndCount():int
        {
            return getFriendStage2StartCount() - getFriendStage2LostCount();
        }

        public function getFriendStage2LostRate():Number
        {
            var loc1:*=getFriendStage2StartCount();
            if (loc1 == 0)
            {
                return 0;
            }
            var loc2:*=getFriendStage2LostCount();
            if (loc2 == 0)
            {
                return 0;
            }
            return getFriendStage2LostCount() / getFriendStage2StartCount();
        }

        public function getEnemyStage2StartCount():int
        {
            return getEnemyStage1EndCount();
        }

        public function getEnemyStage2LostCount():int
        {
            var loc1:*=_getStage2();
            if (loc1 == null)
            {
                return 0;
            }
            return common.util.Util.getInt(loc1, "api_e_lostcount");
        }

        public function getEnemyStage2EndCount():int
        {
            return getEnemyStage2StartCount() - getEnemyStage2LostCount();
        }

        public function getEnemyStage2LostRate():Number
        {
            var loc1:*=getEnemyStage2StartCount();
            if (loc1 == 0)
            {
                return 0;
            }
            var loc2:*=getEnemyStage2LostCount();
            if (loc2 == 0)
            {
                return 0;
            }
            return getEnemyStage2LostCount() / getEnemyStage2StartCount();
        }

        public function isExistStage3():Boolean
        {
            return !(_getStage3() == null);
        }

        public function isActBakugeki_f():Boolean
        {
            var loc2:*=0;
            var loc1:*=false;
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = isReceiveBakugeki_e(loc2);
                if (loc1)
                {
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        public function isActBakugeki_e():Boolean
        {
            var loc2:*=0;
            var loc1:*=false;
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = isReceiveBakugeki_f(loc2);
                if (loc1)
                {
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        public function isReceiveRaigeki_f(arg1:int):Boolean
        {
            var loc1:*=null;
            var loc2:*=_getStage3();
            if (loc2)
            {
                loc1 = common.util.Util.getArray(loc2, "api_erai_elag");
                if (loc1 != null)
                {
                    return loc1[arg1 + 1] == 1;
                }
            }
            return false;
        }

        public function isReceiveRaigeki_e(arg1:int):Boolean
        {
            var loc1:*=null;
            var loc2:*=_getStage3();
            if (loc2)
            {
                loc1 = common.util.Util.getArray(loc2, "api_erai_flag");
                if (loc1 != null)
                {
                    return loc1[arg1 + 1] == 1;
                }
            }
            return false;
        }

        public function isReceiveBakugeki_f(arg1:int):Boolean
        {
            var loc1:*=null;
            var loc2:*=_getStage3();
            if (loc2)
            {
                loc1 = common.util.Util.getArray(loc2, "api_fbak_flag");
                if (loc1 != null)
                {
                    return loc1[arg1 + 1] == 1;
                }
            }
            return false;
        }

        public function isReceiveBakugeki_e(arg1:int):Boolean
        {
            var loc1:*=null;
            var loc2:*=_getStage3();
            if (loc2)
            {
                loc1 = common.util.Util.getArray(loc2, "api_ebak_flag");
                if (loc1 != null)
                {
                    return loc1[arg1 + 1] == 1;
                }
            }
            return false;
        }

        public function getBakuraiDamage_f(arg1:int):Number
        {
            var loc1:*=null;
            var loc2:*=_getStage3();
            if (loc2)
            {
                loc1 = common.util.Util.getArray(loc2, "api_fdam");
                if (loc1 != null)
                {
                    return loc1[arg1 + 1];
                }
            }
            return 0;
        }

        public function getBakuraiDamage_e(arg1:int):Number
        {
            var loc1:*=null;
            var loc2:*=_getStage3();
            if (loc2)
            {
                loc1 = common.util.Util.getArray(loc2, "api_edam");
                if (loc1 != null)
                {
                    return loc1[arg1 + 1];
                }
            }
            return 0;
        }

        public function getBakuraiHitState_f(arg1:int):int
        {
            var loc1:*=null;
            var loc2:*=_getStage3();
            if (loc2)
            {
                loc1 = common.util.Util.getArray(loc2, "api_fcl_flag");
                if (loc1 != null)
                {
                    return loc1[arg1 + 1] + 1;
                }
            }
            return 0;
        }

        public function getBakuraiHitState_e(arg1:int):int
        {
            var loc1:*=null;
            var loc2:*=_getStage3();
            if (loc2)
            {
                loc1 = common.util.Util.getArray(loc2, "api_ecl_flag");
                if (loc1 != null)
                {
                    return loc1[arg1 + 1] + 1;
                }
            }
            return 0;
        }

        public function createAttacks_f(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:Boolean=false):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            var loc6:*=0;
            var loc3:*=null;
            var loc1:*=NaN;
            var loc5:*=0;
            var loc4:*=null;
            var loc2:*=new __AS3__.vec.Vector.<battle.models.attack.AttackData>();
            loc6 = 0;
            while (loc6 < 6)
            {
                if (isReceiveRaigeki_e(loc6) || isReceiveBakugeki_e(loc6))
                {
                    loc3 = arg1[loc6];
                    loc1 = getBakuraiDamage_e(loc6);
                    loc5 = getBakuraiHitState_e(loc6);
                    loc4 = new battle.models.attack.AttackData(null, loc3, loc1, loc5, null);
                    loc2.push(loc4);
                }
                ++loc6;
            }
            return loc2;
        }

        public function createAttacks_e(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:Boolean=false):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            var loc6:*=0;
            var loc3:*=null;
            var loc1:*=NaN;
            var loc5:*=0;
            var loc4:*=null;
            var loc2:*=new __AS3__.vec.Vector.<battle.models.attack.AttackData>();
            loc6 = 0;
            while (loc6 < 6)
            {
                if (isReceiveRaigeki_f(loc6) || isReceiveBakugeki_f(loc6))
                {
                    loc3 = arg1[loc6];
                    loc1 = getBakuraiDamage_f(loc6);
                    loc5 = getBakuraiHitState_f(loc6);
                    loc4 = new battle.models.attack.AttackData(null, loc3, loc1, loc5, null);
                    loc2.push(loc4);
                }
                ++loc6;
            }
            return loc2;
        }

        private function _getCompanyList():Array
        {
            var loc3:*=null;
            var loc1:*=null;
            var loc5:*=0;
            var loc4:*=0;
            if (_cache != null)
            {
                return _cache;
            }
            var loc2:*=common.util.Util.getArray(_o, "api_squadron_plane");
            if (loc2 == null)
            {
                return [];
            }
            if (loc2.length > 0 && loc2[0] == -1)
            {
                loc3 = common.util.Util.getArray(_o, "api_plane_from");
                _cache = [];
                loc1 = loc3[0];
                loc5 = 0;
                while (loc5 < loc1.length)
                {
                    if (!((loc4 = loc1[loc5]) <= 0))
                    {
                        _cache = _cache.concat(loc2[loc4]);
                    }
                    ++loc5;
                }
            }
            else
            {
                _cache = loc2;
            }
            return _cache;
        }

        private function _getCompanyData(arg1:int):Object
        {
            var loc1:*=_getCompanyList();
            if (arg1 > loc1.length)
            {
                return null;
            }
            return loc1[arg1];
        }

        private function _getStage1():Object
        {
            return common.util.Util.getObject(_o, "api_stage1");
        }

        private var _o:Object;

        private var _cache:Array;
    }
}


//        class AirUnitsSupportData
package battle.models.attack
{
    import __AS3__.vec.*;

    public class AirUnitsSupportData extends Object
    {
        public function AirUnitsSupportData(arg1:Object)
        {
            var loc1:*=undefined;
            var loc2:*=0;
            super();
            _o = arg1;
            _cache = new __AS3__.vec.Vector.<battle.models.attack.AirUnitSupportData>();
            if (_o.hasOwnProperty("api_air_base_attack"))
            {
                loc1 = _o["api_air_base_attack"];
                if (!(loc1 is Array))
                {
                    loc1 = [loc1];
                }
            }
            if (loc1 != null)
            {
                loc2 = 0;
                while (loc2 < loc1.length)
                {
                    _cache.push(new battle.models.attack.AirUnitSupportData(loc1[loc2]));
                    ++loc2;
                }
            }
            return;
        }

        public function get airUnits():__AS3__.vec.Vector.<battle.models.attack.AirUnitSupportData>
        {
            return _cache;
        }

        public function isExist():Boolean
        {
            return _cache.length > 0;
        }

        private var _o:Object;

        private var _cache:__AS3__.vec.Vector.<battle.models.attack.AirUnitSupportData>;
    }
}


//        class AttackData
package battle.models.attack
{
    import battle.util.*;
    import battle.vo.*;
    import vo.*;

    public class AttackData extends Object
    {
        public function AttackData(arg1:battle.vo.BattleShipData, arg2:battle.vo.BattleShipData, arg3:Number, arg4:Number, arg5:battle.vo.BattleShipData)
        {
            super();
            _attackers = [arg1];
            _defenders = [arg2];
            _damages = [arg3];
            _hitStates = [arg4];
            _shieldTargets = [arg5];
            return;
        }

        public function setOptionsAtHougeki(arg1:Array, arg2:int):void
        {
            var loc6:*=0;
            var loc12:*=0;
            var loc8:*=0;
            _slotitems = arg1.concat();
            _hougekiAttackType = arg2;
            if (arg2 != 0)
            {
                return;
            }
            var loc9:*=attacker.getShipType();
            var loc2:*=DataFacade.getMasterSlotItemData();
            var loc7:*=attacker.getSlotItemIDs();
            var loc11:*=0;
            var loc1:*=0;
            var loc5:*=0;
            loc6 = 0;
            while (loc6 < loc7.length)
            {
                loc12 = loc7[loc6];
                if ((loc8 = loc2.getSlotItemEquipType(loc12)) != 37)
                {
                    if (loc8 != 8)
                    {
                        if (loc8 == 11 || loc8 == 25)
                        {
                            ++loc5;
                        }
                    }
                    else
                    {
                        ++loc1;
                        if (loc2.getTaisen(loc12) > 0)
                        {
                            ++loc5;
                        }
                    }
                }
                else
                {
                    ++loc11;
                }
                ++loc6;
            }
            if (loc11 > 0 && defender.isGround())
            {
                _rocket_flg = true;
            }
            var loc4:*=defender.getName();
            if (loc7.indexOf(166) != -1)
            {
                if (loc4 == "離島棲姫" || loc4 == "砲台小鬼" || loc4 == "集積地棲姫" || loc4 == "集積地棲姫-壊")
                {
                    _daihatsu_flg = true;
                }
            }
            if (loc7.indexOf(167) != -1)
            {
                if (attacker.isSubMarine())
                {
                    if (defender.isGround())
                    {
                        _uchibi_flg = true;
                    }
                }
                else if (loc4 == "離島棲姫" || loc4 == "砲台小鬼" || loc4 == "集積地棲姫" || loc4 == "集積地棲姫-壊")
                {
                    _uchibi_flg = true;
                }
            }
            if (attacker.getCharaID() == 352)
            {
                if (defender.isSubMarine())
                {
                    if (loc5 > 0)
                    {
                        _hougekiAttackType = 7;
                    }
                    else
                    {
                        _hougekiAttackType = 8;
                    }
                }
                else if (loc1 > 0)
                {
                    _hougekiAttackType = 7;
                }
                else
                {
                    _hougekiAttackType = 0;
                }
                return;
            }
            if (loc9 == 7 || loc9 == 11 || loc9 == 18)
            {
                _hougekiAttackType = 7;
                return;
            }
            if (defender.isSubMarine())
            {
                if (loc9 == 6 || loc9 == 10 || loc9 == 16 || loc9 == 17)
                {
                    _hougekiAttackType = 7;
                }
                else
                {
                    _hougekiAttackType = 8;
                }
                return;
            }
            var loc10:*=_slotitems[0];
            var loc3:*;
            if ((loc3 = loc2.getSlotItemEquipType(loc10)) == 5 || loc3 == 32)
            {
                _hougekiAttackType = 9;
                return;
            }
            return;
        }

        public function setOptionsAtNight(arg1:Array, arg2:int):void
        {
            var loc4:*=0;
            var loc11:*=0;
            var loc6:*=0;
            _slotitems = [];
            loc4 = 0;
            while (loc4 < arg1.length)
            {
                _slotitems.push(arg1[loc4]);
                ++loc4;
            }
            _specialFlg = arg2;
            if (arg2 != 0)
            {
                return;
            }
            _hougekiAttackType = 0;
            var loc7:*=attacker.getCharaID();
            var loc8:*=attacker.getShipType();
            var loc1:*=DataFacade.getMasterSlotItemData();
            var loc5:*=attacker.getSlotItemIDs();
            var loc10:*=0;
            loc4 = 0;
            while (loc4 < loc5.length)
            {
                loc11 = loc5[loc4];
                if ((loc6 = loc1.getSlotItemEquipType(loc11)) == 37)
                {
                    ++loc10;
                }
                ++loc4;
            }
            if (loc10 > 0 && defender.isGround())
            {
                _rocket_flg = true;
            }
            var loc2:*=defender.getName();
            if (loc5.indexOf(166) != -1)
            {
                if (loc2 == "離島棲姫" || loc2 == "砲台小鬼" || loc2 == "集積地棲姫" || loc2 == "集積地棲姫-壊")
                {
                    _daihatsu_flg = true;
                }
            }
            if (loc5.indexOf(167) != -1)
            {
                if (attacker.isSubMarine())
                {
                    if (defender.isGround())
                    {
                        _uchibi_flg = true;
                    }
                }
                else if (loc2 == "離島棲姫" || loc2 == "砲台小鬼" || loc2 == "集積地棲姫" || loc2 == "集積地棲姫-壊")
                {
                    _uchibi_flg = true;
                }
            }
            if (loc8 == 7 || loc8 == 11 || loc8 == 18)
            {
                if (loc7 == 353 || loc7 == 432)
                {
                    _hougekiAttackType = 0;
                }
                else
                {
                    _hougekiAttackType = 7;
                }
                return;
            }
            if (attacker.isSubMarine())
            {
                _hougekiAttackType = 9;
                return;
            }
            if (defender.isSubMarine())
            {
                if (loc8 == 6 || loc8 == 10 || loc8 == 16 || loc8 == 17)
                {
                    _hougekiAttackType = 7;
                }
                else
                {
                    _hougekiAttackType = 8;
                }
                return;
            }
            var loc9:*=_slotitems[0];
            var loc3:*;
            if ((loc3 = loc1.getSlotItemEquipType(loc9)) == 5 || loc3 == 32)
            {
                _hougekiAttackType = 9;
                return;
            }
            return;
        }

        public function addAttacker(arg1:battle.vo.BattleShipData, arg2:Number, arg3:Number):void
        {
            _attackers.push(arg1);
            _damages.push(arg2);
            _hitStates.push(arg3);
            return;
        }

        public function addDefender(arg1:battle.vo.BattleShipData, arg2:Number, arg3:Number):void
        {
            _defenders.push(arg1);
            _damages.push(arg2);
            _hitStates.push(arg3);
            return;
        }

        public function getAttacker(arg1:int):battle.vo.BattleShipData
        {
            return _attackers[arg1];
        }

        public function getDefender(arg1:int):battle.vo.BattleShipData
        {
            return _defenders[arg1];
        }

        public function getDamage(arg1:int):Number
        {
            return _damages[arg1];
        }

        public function getSlotitemID(arg1:int):int
        {
            return _slotitems[arg1];
        }

        public function getHitState(arg1:int):int
        {
            return _hitStates[arg1];
        }

        public function toString():String
        {
            return _attackers + " -> " + _defenders + " ダメージ:" + damage + "(" + _damages + ") " + _getHitStateString(hitState);
        }

        private function _getHitStateString(arg1:int):String
        {
        }

        public function get attackerCount():int
        {
            return _attackers.length;
        }

        public function get attacker():battle.vo.BattleShipData
        {
            if (_attackers.length > 0)
            {
                return _attackers[0];
            }
            return null;
        }

        public function get defenderCount():int
        {
            return _defenders.length;
        }

        public function get defender():battle.vo.BattleShipData
        {
            if (_defenders.length > 0)
            {
                return _defenders[0];
            }
            return null;
        }

        public function get hasShield():Boolean
        {
            return battle.util.BattleUtil.isShield(damage);
        }

        public function get shieldTarget():battle.vo.BattleShipData
        {
            if (_shieldTargets.length > 0)
            {
                return _shieldTargets[0];
            }
            return null;
        }

        public function get damage():Number
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < _damages.length)
            {
                loc1 = loc1 + Math.max(_damages[loc2], 0);
                ++loc2;
            }
            return loc1;
        }

        public function get hitState():int
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < _hitStates.length)
            {
                loc1 = Math.max(loc1, _hitStates[loc2]);
                ++loc2;
            }
            return loc1;
        }

        public function get slotitemMasterID():int
        {
            if (daihatsuFlg || uchibiFlg)
            {
                return -1;
            }
            if (_slotitems.length > 0)
            {
                return _slotitems[0];
            }
            return -1;
        }

        public function get specialFlg():int
        {
            return _specialFlg;
        }

        public function get hougekiAttackType():int
        {
            return _hougekiAttackType;
        }

        public function get rocketFlg():Boolean
        {
            return _rocket_flg;
        }

        public function get daihatsuFlg():Boolean
        {
            return _daihatsu_flg;
        }

        public function get uchibiFlg():Boolean
        {
            return _uchibi_flg;
        }

        private var _attackers:Array;

        private var _defenders:Array;

        private var _damages:Array;

        private var _hitStates:Array;

        private var _shieldTargets:Array;

        private var _slotitems:Array;

        private var _specialFlg:int=0;

        private var _hougekiAttackType:int=0;

        private var _rocket_flg:Boolean=false;

        private var _daihatsu_flg:Boolean=false;

        private var _uchibi_flg:Boolean=false;
    }
}


//        class HougekiData
package battle.models.attack
{
    import __AS3__.vec.*;
    import battle.util.*;
    import battle.vo.*;
    import common.util.*;

    public class HougekiData extends Object
    {
        public function HougekiData(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        public function createAttackArray(arg1:int, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg3:__AS3__.vec.Vector.<battle.vo.BattleShipData>):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            var loc9:*=0;
            var loc3:*=0;
            var loc16:*=null;
            var loc12:*=0;
            var loc5:*=null;
            var loc4:*=null;
            var loc6:*=null;
            var loc11:*=null;
            var loc19:*=null;
            var loc15:*=null;
            var loc17:*=null;
            var loc7:*=0;
            var loc10:*=null;
            --arg1;
            var loc18:*=new __AS3__.vec.Vector.<battle.models.attack.AttackData>();
            var loc1:*=_getStateData(arg1);
            var loc8:*=_getAttackerIndexList(loc1);
            var loc13:*=_getAttackTypeList(loc1);
            var loc20:*=_getSlotitemMasterIDList(loc1);
            var loc14:*=_getDefenderIndexList(loc1);
            var loc21:*=_getHitStateList(loc1);
            var loc2:*=_getDamageList(loc1);
            loc9 = 1;
            while (loc9 < loc8.length)
            {
                loc3 = loc8[loc9];
                loc16 = _getBattleShipData(loc3, arg2, arg3);
                loc12 = loc13[loc9];
                loc5 = loc20[loc9] is Array ? loc20[loc9] : [loc20[loc9]];
                loc4 = loc14[loc9];
                loc6 = loc21[loc9];
                loc11 = loc2[loc9];
                loc19 = _getBattleShipData(loc4[0], arg2, arg3);
                loc15 = null;
                if (battle.util.BattleUtil.isShield(loc11[0]))
                {
                    loc15 = _getFlagBattleShipData(loc4[0], arg2, arg3);
                }
                (loc17 = new battle.models.attack.AttackData(loc16, loc19, loc11[0], loc6[0], loc15)).setOptionsAtHougeki(loc5, loc12);
                loc7 = 1;
                while (loc7 < loc4.length)
                {
                    loc10 = _getBattleShipData(loc4[loc7], arg2, arg3);
                    loc17.addDefender(loc10, loc11[loc7], loc6[loc7]);
                    ++loc7;
                }
                loc18.push(loc17);
                ++loc9;
            }
            return loc18;
        }

        public function existStage(arg1:int):Boolean
        {
            return _o.hasOwnProperty("api_hougeki" + (arg1 + 1));
        }

        private function _getStateData(arg1:int):Object
        {
        }

        private function _getAttackerIndexList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_at_list", [-1]);
        }

        private function _getAttackTypeList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_at_type", [-1]);
        }

        private function _getSlotitemMasterIDList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_si_list", [-1]);
        }

        private function _getDefenderIndexList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_df_list", [-1]);
        }

        private function _getHitStateList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_cl_list", [-1]);
        }

        private function _getDamageList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_damage", [-1]);
        }

        private function _getBattleShipData(arg1:int, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg3:__AS3__.vec.Vector.<battle.vo.BattleShipData>):battle.vo.BattleShipData
        {
            if (1 <= arg1 && arg1 <= 6)
            {
                return arg2[arg1 - 1];
            }
            if (7 <= arg1 && arg1 <= 12)
            {
                return arg3[arg1 - 7];
            }
            return null;
        }

        private function _getFlagBattleShipData(arg1:int, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg3:__AS3__.vec.Vector.<battle.vo.BattleShipData>):battle.vo.BattleShipData
        {
            if (1 <= arg1 && arg1 <= 6)
            {
                return arg2[0];
            }
            if (7 <= arg1 && arg1 <= 12)
            {
                return arg3[0];
            }
            return null;
        }

        private var _o:Object;
    }
}


//        class KaimakuData
package battle.models.attack
{
    import __AS3__.vec.*;
    import battle.vo.*;
    import common.util.*;
    import flash.utils.*;

    public class KaimakuData extends Object
    {
        public function KaimakuData(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        public function exist():Boolean
        {
            return common.util.Util.getInt(_o, "api_opening_flag", 0) == 1;
        }

        public function createAttackArray(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            var loc1:*=null;
            var loc8:*=undefined;
            var loc5:*=null;
            var loc6:*=null;
            var loc4:*=NaN;
            var loc9:*=0;
            var loc7:*=null;
            var loc10:*=0;
            var loc3:*=0;
            var loc2:*=0;
            if (exist())
            {
                loc1 = new flash.utils.Dictionary(true);
                loc8 = new __AS3__.vec.Vector.<battle.models.attack.AttackData>();
                loc10 = 0;
                while (loc10 < 6)
                {
                    if (arg1.hasOwnProperty(loc10))
                    {
                        loc3 = getEnemyTo(loc10);
                        if (arg2.hasOwnProperty(loc3))
                        {
                            loc5 = arg1[loc10];
                            loc6 = arg2[loc3];
                            loc4 = getFriendAttackDamage(loc10);
                            loc9 = getFriendAttackHitState(loc10);
                            if ((loc7 = loc1[loc6] as battle.models.attack.AttackData) != null)
                            {
                                loc7.addAttacker(loc5, loc4, loc9);
                            }
                            else
                            {
                                loc7 = new battle.models.attack.AttackData(loc5, loc6, loc4, loc9, null);
                                loc1[loc6] = loc7;
                                loc8.push(loc7);
                            }
                        }
                    }
                    if (arg2.hasOwnProperty(loc10))
                    {
                        loc2 = getFriendTo(loc10);
                        if (arg1.hasOwnProperty(loc2))
                        {
                            loc5 = arg2[loc10];
                            loc6 = arg1[loc2];
                            loc4 = getEnemyAttackDamage(loc10);
                            loc9 = getEnemyAttackHitState(loc10);
                            if ((loc7 = loc1[loc6] as battle.models.attack.AttackData) != null)
                            {
                                loc7.addAttacker(loc5, loc4, loc9);
                            }
                            else
                            {
                                loc7 = new battle.models.attack.AttackData(loc5, loc6, loc4, loc9, null);
                                loc1[loc6] = loc7;
                                loc8.push(loc7);
                            }
                        }
                    }
                    ++loc10;
                }
                return loc8;
            }
            return null;
        }

        public function getEnemyTo(arg1:int):int
        {
            var loc1:*=0;
            ++arg1;
            var loc2:*=common.util.Util.getArray(_getOpeningAttack(), "api_frai", [-1, -1, -1, -1, -1, -1, -1]);
            if (arg1 < loc2.length)
            {
                loc1 = loc2[arg1];
                if (loc1 > 0)
                {
                    return loc1 - 1;
                }
            }
            return -1;
        }

        public function getFriendTo(arg1:int):int
        {
            var loc1:*=0;
            ++arg1;
            var loc2:*=common.util.Util.getArray(_getOpeningAttack(), "api_erai", [-1, -1, -1, -1, -1, -1, -1]);
            if (arg1 < loc2.length)
            {
                loc1 = loc2[arg1];
                if (loc1 > 0)
                {
                    return loc1 - 1;
                }
            }
            return -1;
        }

        public function getFriendAttackDamage(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getOpeningAttack(), "api_fydam", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getEnemyAttackDamage(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getOpeningAttack(), "api_eydam", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getFriendDamage(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getOpeningAttack(), "api_fdam", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getEnemyDamage(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getOpeningAttack(), "api_edam", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getFriendAttackHitState(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getOpeningAttack(), "api_fcl", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getEnemyAttackHitState(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getOpeningAttack(), "api_ecl", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        private function _getOpeningAttack():Object
        {
            return common.util.Util.getObject(_o, "api_opening_atack", null);
        }

        private var _o:Object;
    }
}


//        class KoukuuData
package battle.models.attack
{
    import __AS3__.vec.*;
    import battle.models.attack.koukuu.*;
    import battle.vo.*;
    import common.util.*;
    import vo.*;

    public class KoukuuData extends vo.BaseData
    {
        public function KoukuuData(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        private function _getKoukuStage2():Object
        {
            var loc1:*=_getKoukuData();
            if (loc1)
            {
                return _getObject(loc1, "api_stage2", null);
            }
            return null;
        }

        private function _getKoukuStage3(arg1:Boolean):Object
        {
            var loc1:*=_getKoukuData();
            if (loc1)
            {
                if (arg1 == true)
                {
                    return _getObject(loc1, "api_stage3_combined", null);
                }
                return _getObject(loc1, "api_stage3", null);
            }
            return null;
        }

        public function createAttacks_f(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:Boolean=false):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            return _createAttackArray(arg1, false, arg2);
        }

        public function createAttacks_e(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:Boolean=false):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            return _createAttackArray(arg1, true, arg2);
        }

        private function _createAttackArray(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:Boolean, arg3:Boolean):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            var loc6:*=0;
            var loc3:*=null;
            var loc1:*=NaN;
            var loc5:*=0;
            var loc4:*=null;
            var loc2:*=new __AS3__.vec.Vector.<battle.models.attack.AttackData>();
            loc6 = 0;
            while (loc6 < 6)
            {
                if (getStage3Raigeki(loc6, !arg2, arg3) || getStage3Bakugeki(loc6, !arg2, arg3))
                {
                    loc3 = arg1[loc6];
                    loc1 = getStage3Damage(loc6, !arg2, arg3);
                    loc5 = getStage3HitState(loc6, arg2, arg3);
                    loc4 = new battle.models.attack.AttackData(null, loc3, loc1, loc5, null);
                    loc2.push(loc4);
                }
                ++loc6;
            }
            return loc2;
        }

        public function existStage1():Boolean
        {
            return _getArray(_o, "api_stage_flag", [0, 0, 0])[0] == 1;
        }

        public function existStage2():Boolean
        {
            return _getArray(_o, "api_stage_flag", [0, 0, 0])[1] == 1;
        }

        public function existStage3():Boolean
        {
            return _getArray(_o, "api_stage_flag", [0, 0, 0])[2] == 1;
        }

        public function get planeFrom_f():Array
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc1:*=_getPlaneFrom_(true);
            if (loc1.length == 1 && loc1[0] == -1)
            {
                return [];
            }
            loc2 = loc1.concat();
            loc3 = 0;
            while (loc3 < loc2.length)
            {
                loc2[loc3] = loc2[loc3] - 1;
                ++loc3;
            }
            return loc2;
        }

        public function get planeFrom_e():Array
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc1:*=_getPlaneFrom_(false);
            if (loc1.length == 1 && loc1[0] == -1)
            {
                return [];
            }
            loc2 = loc1.concat();
            loc3 = 0;
            while (loc3 < loc2.length)
            {
                loc2[loc3] = loc2[loc3] - 1 - 6;
                ++loc3;
            }
            return loc2;
        }

        public function getStage1Count(arg1:Boolean=false):int
        {
            var loc1:*=_getKoukuStage1();
            if (loc1)
            {
                return loc1[arg1 ? "api_e_count" : "api_f_count"];
            }
            return 0;
        }

        public function getStage1LostCount(arg1:Boolean=false):int
        {
            var loc1:*=_getKoukuStage1();
            if (loc1)
            {
                return loc1[arg1 ? "api_e_lostcount" : "api_f_lostcount"];
            }
            return 0;
        }

        public function getSeikuukenID():int
        {
            var loc1:*=_getKoukuStage1();
            if (loc1)
            {
                return loc1["api_disp_seiku"];
            }
            return -1;
        }

        public function hasTouchPlane_f():Boolean
        {
            return getTouchPlaneID_f() > 0;
        }

        public function hasTouchPlane_e():Boolean
        {
            return getTouchPlaneID_e() > 0;
        }

        public function getTouchPlaneID_f():int
        {
            var loc1:*=_getKoukuStage1();
            if (loc1)
            {
                return common.util.Util.getArray(loc1, "api_touch_plane", [-1, -1])[0];
            }
            return -1;
        }

        public function getTouchPlaneID_e():int
        {
            var loc1:*=_getKoukuStage1();
            if (loc1)
            {
                return common.util.Util.getArray(loc1, "api_touch_plane", [-1, -1])[1];
            }
            return -1;
        }

        public function getStage2Count(arg1:Boolean=false):int
        {
            var loc1:*=_getKoukuStage1();
            if (loc1)
            {
                return Math.max(getStage1Count(arg1) - getStage1LostCount(arg1), 0);
            }
            return 0;
        }

        public function getStage2LostCount(arg1:Boolean=false):int
        {
            var loc1:*=_getKoukuStage2();
            if (loc1)
            {
                return loc1[arg1 ? "api_e_lostcount" : "api_f_lostcount"];
            }
            return 0;
        }

        public function getStage3Damage(arg1:int, arg2:Boolean=false, arg3:Boolean=false):Number
        {
            var loc1:*;
            if (loc1 = _getKoukuStage3(arg3))
            {
                return loc1[arg2 ? "api_edam" : "api_fdam"][arg1 + 1];
            }
            return 0;
        }

        public function getStage3Critical(arg1:int, arg2:Boolean=false, arg3:Boolean=false):Boolean
        {
            var loc1:*;
            if (loc1 = _getKoukuStage3(arg3))
            {
                return loc1[arg2 ? "api_ecl_flag" : "api_fcl_flag"][arg1 + 1] == 1;
            }
            return false;
        }

        public function getStage3HitState(arg1:int, arg2:Boolean, arg3:Boolean=false):int
        {
            var loc1:*;
            if (loc1 = _getKoukuStage3(arg3))
            {
                return loc1[arg2 ? "api_fcl_flag" : "api_ecl_flag"][arg1 + 1] + 1;
            }
            return 0;
        }

        public function getStage3Raigeki(arg1:int, arg2:Boolean=false, arg3:Boolean=false):Boolean
        {
            var loc1:*;
            if (loc1 = _getKoukuStage3(arg3))
            {
                if (arg2 == false)
                {
                    return _getArray(loc1, "api_frai_flag", [-1, 0, 0, 0, 0, 0, 0])[arg1 + 1] == 1;
                }
                return _getArray(loc1, "api_erai_flag", [-1, 0, 0, 0, 0, 0, 0])[arg1 + 1] == 1;
            }
            return false;
        }

        public function getStage3Bakugeki(arg1:int, arg2:Boolean=false, arg3:Boolean=false):Boolean
        {
            var loc2:*=null;
            var loc1:*;
            if ((loc1 = _getKoukuStage3(arg3)) != null)
            {
                if (arg2)
                {
                    if ((loc2 = common.util.Util.getArray(loc1, "api_ebak_flag")) != null)
                    {
                        return loc2[arg1 + 1] == 1;
                    }
                }
                else if ((loc2 = common.util.Util.getArray(loc1, "api_fbak_flag")) != null)
                {
                    return loc2[arg1 + 1] == 1;
                }
            }
            return false;
        }

        public function isStage3Bakugeki(arg1:Boolean=true, arg2:Boolean=false):Boolean
        {
            var loc2:*=0;
            var loc1:*=false;
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = getStage3Bakugeki(loc2, !arg1, arg2);
                if (loc1)
                {
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        public function getTaikuCutinData_f(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>):battle.models.attack.koukuu.KoukuuTaikuCutinData
        {
            var loc2:*=null;
            var loc1:*=_getKoukuStage2();
            if (loc1)
            {
                loc2 = common.util.Util.getObject(loc1, "api_air_fire");
                if (loc2)
                {
                    return new battle.models.attack.koukuu.KoukuuTaikuCutinData(loc2, arg1);
                }
                return null;
            }
            return null;
        }

        private function _getPlaneFrom_(arg1:Boolean):Array
        {
            return _getArray(_getKoukuData(), "api_plane_from", [[], []])[arg1 ? 0 : 1];
        }

        private function _getKoukuData():Object
        {
            return _getObject(_o, "api_kouku" + dataSuffix, null);
        }

        private function _getKoukuStage1():Object
        {
            var loc1:*=_getKoukuData();
            if (loc1)
            {
                return _getObject(loc1, "api_stage1", null);
            }
            return null;
        }

        private function _getTaikuCutin():Array
        {
            var loc1:*=_getKoukuStage1();
            if (loc1)
            {
                return _getArray(loc1, "api_air_fire", null);
            }
            return null;
        }

        private var _o:Object;

        public var dataSuffix:String="";
    }
}


//        class NightAttackData
package battle.models.attack
{
    import __AS3__.vec.*;
    import battle.vo.*;
    import common.util.*;

    public class NightAttackData extends Object
    {
        public function NightAttackData(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        public function createAttackArray(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            var loc10:*=0;
            var loc4:*=0;
            var loc15:*=null;
            var loc6:*=null;
            var loc5:*=null;
            var loc7:*=null;
            var loc13:*=0;
            var loc12:*=null;
            var loc18:*=null;
            var loc16:*=null;
            var loc8:*=0;
            var loc11:*=null;
            var loc17:*=new __AS3__.vec.Vector.<battle.models.attack.AttackData>();
            var loc1:*=common.util.Util.getObject(_o, "api_hougeki", {});
            var loc9:*=_getAttackerIndexList(loc1);
            var loc19:*=_getSlotitemMasterIDList(loc1);
            var loc14:*=_getDefenderIndexList(loc1);
            var loc20:*=_getHitStateList(loc1);
            var loc3:*=_getSpecialFlag(loc1);
            var loc2:*=_getDamageList(loc1);
            loc10 = 1;
            while (loc10 < loc9.length)
            {
                loc4 = loc9[loc10];
                loc15 = _getBattleShipData(loc4, arg1, arg2);
                loc6 = loc19[loc10];
                loc5 = loc14[loc10];
                loc7 = loc20[loc10];
                loc13 = loc3[loc10];
                loc12 = loc2[loc10];
                loc18 = _getBattleShipData(loc5[0], arg1, arg2);
                (loc16 = new battle.models.attack.AttackData(loc15, loc18, loc12[0], loc7[0], null)).setOptionsAtNight(loc6, loc13);
                loc8 = 1;
                while (loc8 < loc5.length)
                {
                    loc11 = _getBattleShipData(loc5[loc8], arg1, arg2);
                    loc16.addDefender(loc11, loc12[loc8], loc7[loc8]);
                    ++loc8;
                }
                loc17.push(loc16);
                ++loc10;
            }
            return loc17;
        }

        private function _getAttackerIndexList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_at_list", [-1]);
        }

        private function _getSlotitemMasterIDList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_si_list", [-1]);
        }

        private function _getDefenderIndexList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_df_list", [-1]);
        }

        private function _getHitStateList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_cl_list", [-1]);
        }

        private function _getSpecialFlag(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_sp_list", [-1]);
        }

        private function _getDamageList(arg1:Object):Array
        {
            return common.util.Util.getArray(arg1, "api_damage", [-1]);
        }

        private function _getBattleShipData(arg1:int, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg3:__AS3__.vec.Vector.<battle.vo.BattleShipData>):battle.vo.BattleShipData
        {
            if (1 <= arg1 && arg1 <= 6)
            {
                return arg2[arg1 - 1];
            }
            if (7 <= arg1 && arg1 <= 12)
            {
                return arg3[arg1 - 7];
            }
            return null;
        }

        private var _o:Object;
    }
}


//        class RaigekiData
package battle.models.attack
{
    import __AS3__.vec.*;
    import battle.vo.*;
    import common.util.*;
    import flash.utils.*;

    public class RaigekiData extends Object
    {
        public function RaigekiData(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        public function exist():Boolean
        {
            return !(_getRaigekiData() == null);
        }

        public function createAttackArray(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            var loc1:*=null;
            var loc8:*=undefined;
            var loc5:*=null;
            var loc6:*=null;
            var loc4:*=NaN;
            var loc9:*=0;
            var loc7:*=null;
            var loc10:*=0;
            var loc3:*=0;
            var loc2:*=0;
            if (exist())
            {
                loc1 = new flash.utils.Dictionary(true);
                loc8 = new __AS3__.vec.Vector.<battle.models.attack.AttackData>();
                loc10 = 0;
                while (loc10 < 6)
                {
                    if (arg1.hasOwnProperty(loc10))
                    {
                        loc3 = getEnemyTo(loc10);
                        if (arg2.hasOwnProperty(loc3))
                        {
                            loc5 = arg1[loc10];
                            loc6 = arg2[loc3];
                            loc4 = getFriendAttackDamage(loc10);
                            loc9 = getFriendAttackHitState(loc10);
                            loc7 = loc1[loc6] as battle.models.attack.AttackData;
                            if (!(loc5 == null) && !(loc6 == null))
                            {
                                if (loc7 != null)
                                {
                                    loc7.addAttacker(loc5, loc4, loc9);
                                }
                                else
                                {
                                    loc7 = new battle.models.attack.AttackData(loc5, loc6, loc4, loc9, null);
                                    loc1[loc6] = loc7;
                                    loc8.push(loc7);
                                }
                            }
                        }
                    }
                    if (arg2.hasOwnProperty(loc10))
                    {
                        loc2 = getFriendTo(loc10);
                        if (arg1.hasOwnProperty(loc2))
                        {
                            loc5 = arg2[loc10];
                            loc6 = arg1[loc2];
                            loc4 = getEnemyAttackDamage(loc10);
                            loc9 = getEnemyAttackHitState(loc10);
                            if ((loc7 = loc1[loc6] as battle.models.attack.AttackData) != null)
                            {
                                loc7.addAttacker(loc5, loc4, loc9);
                            }
                            else
                            {
                                loc7 = new battle.models.attack.AttackData(loc5, loc6, loc4, loc9, null);
                                loc1[loc6] = loc7;
                                loc8.push(loc7);
                            }
                        }
                    }
                    ++loc10;
                }
                return loc8;
            }
            return null;
        }

        public function getEnemyTo(arg1:int):int
        {
            var loc1:*=0;
            ++arg1;
            var loc2:*=common.util.Util.getArray(_getRaigekiData(), "api_frai", [-1, -1, -1, -1, -1, -1, -1]);
            if (arg1 < loc2.length)
            {
                loc1 = loc2[arg1];
                if (loc1 > 0)
                {
                    return loc1 - 1;
                }
            }
            return -1;
        }

        public function getFriendTo(arg1:int):int
        {
            var loc1:*=0;
            ++arg1;
            var loc2:*=common.util.Util.getArray(_getRaigekiData(), "api_erai", [-1, -1, -1, -1, -1, -1, -1]);
            if (arg1 < loc2.length)
            {
                loc1 = loc2[arg1];
                if (loc1 > 0)
                {
                    return loc1 - 1;
                }
            }
            return -1;
        }

        public function getFriendAttackDamage(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getRaigekiData(), "api_fydam", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getEnemyAttackDamage(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getRaigekiData(), "api_eydam", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getFriendDamage(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getRaigekiData(), "api_fdam", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getEnemyDamage(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getRaigekiData(), "api_edam", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getFriendAttackHitState(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getRaigekiData(), "api_fcl", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        public function getEnemyAttackHitState(arg1:int):int
        {
            ++arg1;
            var loc1:*=common.util.Util.getArray(_getRaigekiData(), "api_ecl", [-1, 0, 0, 0, 0, 0, 0]);
            if (arg1 < loc1.length)
            {
                return loc1[arg1];
            }
            return 0;
        }

        private function _getRaigekiData():Object
        {
            return common.util.Util.getObject(_o, "api_raigeki", null);
        }

        private var _o:Object;
    }
}


//        class SakutekiData
package battle.models.attack
{
    import vo.*;

    public class SakutekiData extends vo.BaseData
    {
        public function SakutekiData(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        public function isSuccess_f():Boolean
        {
            return _isSuccess(false);
        }

        public function isSuccess_e():Boolean
        {
            return _isSuccess(true);
        }

        public function hasPlane_f():Boolean
        {
            return _hasPlane(false);
        }

        public function hasPlane_e():Boolean
        {
            return _hasPlane(true);
        }

        public function existLost_f():Boolean
        {
            return _existLost(false);
        }

        public function existLost_e():Boolean
        {
            return _existLost(true);
        }

        public function getMessageID():int
        {
            var loc1:*=0;
            if (isSuccess_f())
            {
                if (hasPlane_f() && existLost_f())
                {
                    return 2;
                }
                return 1;
            }
            if (existLost_f())
            {
                return 4;
            }
            return 3;
        }

        private function _getSakutekiResult_f():int
        {
            return _getArray(_o, "api_search", [0, 0])[0];
        }

        private function _getSakutekiResult_e():int
        {
            return _getArray(_o, "api_search", [0, 0])[1];
        }

        private function _isSuccess(arg1:Boolean=false):Boolean
        {
            var loc1:*=arg1 ? _getSakutekiResult_e() : _getSakutekiResult_f();
            return loc1 == 1 || loc1 == 2 || loc1 == 5;
        }

        private function _hasPlane(arg1:Boolean=false):Boolean
        {
            var loc1:*=arg1 ? _getSakutekiResult_e() : _getSakutekiResult_f();
            return loc1 == 1 || loc1 == 2 || loc1 == 3 || loc1 == 4;
        }

        private function _existLost(arg1:Boolean=false):Boolean
        {
            var loc1:*=arg1 ? _getSakutekiResult_e() : _getSakutekiResult_f();
            return loc1 == 2 || loc1 == 3;
        }

        private var _o:Object;
    }
}


//        class ShienData
package battle.models.attack
{
    import __AS3__.vec.*;
    import battle.models.*;
    import battle.vo.*;
    import common.util.*;

    public class ShienData extends Object
    {
        public function ShienData(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        private function _get(arg1:Object, arg2:String):Array
        {
            var loc1:*=null;
            if (arg1)
            {
                loc1 = common.util.Util.getArray(arg1, arg2, [-1, -1, -1, -1, -1, -1, -1]);
                while (loc1.length > 6)
                {
                    loc1.shift();
                }
                return loc1;
            }
            return [-1, -1, -1, -1, -1, -1];
        }

        public function createFromHRShienData(arg1:battle.models.BattleData):__AS3__.vec.Vector.<battle.models.attack.AttackData>
        {
            var loc7:*=0;
            var loc6:*=0;
            var loc3:*=null;
            var loc1:*=NaN;
            var loc4:*=null;
            var loc2:*=new __AS3__.vec.Vector.<battle.models.attack.AttackData>();
            var loc5:*=arg1.enemyShips;
            loc7 = 0;
            while (loc7 < loc5.length)
            {
                if ((loc6 = getCritical(loc7)) > -1)
                {
                    if ((loc3 = loc5[loc7]) != null)
                    {
                        loc1 = getDamage(loc7);
                        loc4 = new battle.models.attack.AttackData(null, loc3, loc1, loc6, null);
                        loc2.push(loc4);
                    }
                }
                ++loc7;
            }
            return loc2;
        }

        public function exitstSupport():Boolean
        {
            return common.util.Util.getInt(_o, "api_support_flag", 0) > 0;
        }

        public function isSupportK():Boolean
        {
            return common.util.Util.getInt(_o, "api_support_flag", 0) == 1;
        }

        public function isSupportH():Boolean
        {
            return common.util.Util.getInt(_o, "api_support_flag", 0) == 2;
        }

        public function isSupportR():Boolean
        {
            return common.util.Util.getInt(_o, "api_support_flag", 0) == 3;
        }

        public function getSupportDeckID():int
        {
            if (isSupportK())
            {
                return common.util.Util.getInt(_getSupportK(), "api_deck_id", NaN);
            }
            if (isSupportH() || isSupportR())
            {
                return common.util.Util.getInt(_getSupportHR(), "api_deck_id", NaN);
            }
            return -1;
        }

        public function isSupportDeck_FlagshipDamaged():Boolean
        {
            if (isSupportK())
            {
                return common.util.Util.getInt(_getSupportK(), "api_undressing_flag", 0) == 1;
            }
            if (isSupportH() || isSupportR())
            {
                return common.util.Util.getInt(_getSupportHR(), "api_undressing_flag", 0) == 1;
            }
            return false;
        }

        public function hasStage1():Boolean
        {
            return common.util.Util.getArray(_getSupportK(), "api_stage_flag", [0, 0, 0])[0] == 1;
        }

        public function hasStage2():Boolean
        {
            return common.util.Util.getArray(_getSupportK(), "api_stage_flag", [0, 0, 0])[1] == 1;
        }

        public function hasStage3():Boolean
        {
            return common.util.Util.getArray(_getSupportK(), "api_stage_flag", [0, 0, 0])[2] == 1;
        }

        public function getPlaneFrom_e():Array
        {
            var loc1:*=common.util.Util.getArray(_getSupportK(), "api_plane_from", []);
            if (loc1.length > 0)
            {
                loc1 = loc1[0];
                if (loc1.length == 1 && loc1[0] == -1)
                {
                    return [];
                }
                return loc1;
            }
            return [];
        }

        public function getPlaneCountAtStage1_f():int
        {
            return common.util.Util.getInt(_getSupportK_stage1(), "api_f_count", 0);
        }

        public function getPlaneLostCountAtStage1_f():int
        {
            return common.util.Util.getInt(_getSupportK_stage1(), "api_f_lostcount", 0);
        }

        public function getPlaneCountAtStage1_e():int
        {
            return common.util.Util.getInt(_getSupportK_stage1(), "api_f_count", 0);
        }

        public function getPlaneLostCountAtStage1_e():int
        {
            return common.util.Util.getInt(_getSupportK_stage1(), "api_f_lostcount", 0);
        }

        public function getPlaneCountAtStage2_f():int
        {
            return getPlaneCountAtStage1_f() - getPlaneLostCountAtStage1_f();
        }

        public function getPlaneLostCountAtStage2_f():int
        {
            return common.util.Util.getInt(_getSupportK_stage2(), "api_f_lostcount", 0);
        }

        public function getPlaneCountAtStage2_e():int
        {
            return getPlaneCountAtStage1_e() - getPlaneLostCountAtStage1_e();
        }

        public function getPlaneLostCountAtStage2_e():int
        {
            return common.util.Util.getInt(_getSupportK_stage2(), "api_e_lostcount", 0);
        }

        public function getRaigekiFlgAtStage3_e():Array
        {
            var loc1:*=common.util.Util.getArray(_getSupportK_stage3(), "api_erai_flag", [-1]).concat();
            loc1.shift();
            return loc1;
        }

        public function hasBakugeki_f():Boolean
        {
            return false;
        }

        public function hasBakugeki_e():Boolean
        {
            var loc2:*=0;
            var loc1:*=getBakugekiFlgAtStage3_e();
            loc2 = 0;
            while (loc2 < Math.min(loc1.length, 6))
            {
                if (loc1[loc2] == 1)
                {
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        public function hasBakugeki_e_combined():Boolean
        {
            var loc2:*=0;
            var loc1:*=getBakugekiFlgAtStage3_e();
            loc2 = 6;
            while (loc2 < loc1.length)
            {
                if (loc1[loc2] == 1)
                {
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        public function getBakugekiFlgAtStage3_e():Array
        {
            var loc1:*=common.util.Util.getArray(_getSupportK_stage3(), "api_ebak_flag", [-1]).concat();
            loc1.shift();
            return loc1;
        }

        public function getHitStateAtStage3_e():Array
        {
            var loc2:*=0;
            var loc1:*=common.util.Util.getArray(_getSupportK_stage3(), "api_ecl_flag", [-1]).concat();
            loc1.shift();
            loc2 = 0;
            while (loc2 < loc1.length)
            {
                var loc3:*;
                var loc4:*;
                var loc5:*=((loc3 = loc1)[loc4 = loc2] + 1);
                loc3[loc4] = loc5;
                ++loc2;
            }
            return loc1;
        }

        public function getDamageAtStage3_e():Array
        {
            var loc1:*=common.util.Util.getArray(_getSupportK_stage3(), "api_edam", [-1]).concat();
            loc1.shift();
            return loc1;
        }

        public function getCritical(arg1:int):int
        {
            ++arg1;
            var loc2:*=_getSupportHR();
            var loc1:*=common.util.Util.getArray(loc2, "api_cl_list");
            if (loc1.length < arg1)
            {
                return -1;
            }
            return loc1[arg1];
        }

        public function getDamage(arg1:int):int
        {
            ++arg1;
            var loc2:*=_getSupportHR();
            var loc1:*=common.util.Util.getArray(loc2, "api_damage");
            if (loc1.length < arg1)
            {
                return 0;
            }
            return loc1[arg1];
        }

        private function _getSupportK():Object
        {
            var loc1:*=common.util.Util.getObject(_o, "api_support_info", {});
            return common.util.Util.getObject(loc1, "api_support_airatack", {});
        }

        private function _getSupportK_stage1():Object
        {
            var loc1:*=_getSupportK();
            return common.util.Util.getObject(loc1, "api_stage1", {});
        }

        private function _getSupportK_stage2():Object
        {
            var loc1:*=_getSupportK();
            return common.util.Util.getObject(loc1, "api_stage2", {});
        }

        private function _getSupportK_stage3():Object
        {
            var loc1:*=_getSupportK();
            return common.util.Util.getObject(loc1, "api_stage3", {});
        }

        private function _getSupportHR():Object
        {
            var loc1:*=common.util.Util.getObject(_o, "api_support_info", {});
            return common.util.Util.getObject(loc1, "api_support_hourai", {});
        }

        private var _o:Object;
    }
}


//      class BattleData
package battle.models
{
    import __AS3__.vec.*;
    import battle.util.*;
    import battle.vo.*;
    import common.models.bases.*;
    import manager.*;
    import vo.*;

    public class BattleData extends Object
    {
        public function BattleData(arg1:common.models.bases.BattleBaseData)
        {
            var loc1:*=0;
            super();
            _baseData = arg1;
            _friendShips = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            _enemyShips = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            _friendShips_combined = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            loc1 = 0;
            while (loc1 < 6)
            {
                _friendShips.push(null);
                _enemyShips.push(null);
                _friendShips_combined.push(null);
                ++loc1;
            }
            return;
        }

        public function hasAtacckPlane_e():Boolean
        {
            var loc2:*=0;
            var loc1:*=null;
            loc2 = 0;
            while (loc2 < enemyShips.length)
            {
                loc1 = enemyShips[loc2] as battle.vo.EnemyShipData;
                if (battle.util.SlotitemUtil.hasAtacckPlane(loc1))
                {
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        public function set combatCount(arg1:int):void
        {
            _combatCount = arg1;
            return;
        }

        public function get combatCount():int
        {
            return _combatCount;
        }

        public function getAntiAircraftAbilities_f():__AS3__.vec.Vector.<int>
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc1:*=new __AS3__.vec.Vector.<int>();
            loc3 = 0;
            while (loc3 < friendShips.length)
            {
                loc2 = battle.util.SlotitemUtil.getAntiAircraftAbility(friendShips[loc3]);
                if (!(loc2 == -1) && loc1.indexOf(loc2) == -1)
                {
                    loc1.push(loc2);
                }
                ++loc3;
            }
            if (friendShips_combined != null)
            {
                loc3 = 0;
                while (loc3 < friendShips_combined.length)
                {
                    loc2 = battle.util.SlotitemUtil.getAntiAircraftAbility(friendShips[loc3]);
                    if (!(loc2 == -1) && loc1.indexOf(loc2) == -1)
                    {
                        loc1.push(loc2);
                    }
                    ++loc3;
                }
            }
            return loc1;
        }

        public function get baseData():common.models.bases.BattleBaseData
        {
            return _baseData;
        }

        public function hasAntiAircraftAbility_f():__AS3__.vec.Vector.<int>
        {
            var loc2:*=0;
            var loc1:*=null;
            var loc3:*=new __AS3__.vec.Vector.<int>();
            loc2 = 0;
            while (loc2 < friendShips.length)
            {
                loc1 = friendShips[loc2] as battle.vo.FriendShipData;
                loc3.push(battle.util.SlotitemUtil.hasAntiAircraftAbility(loc1));
                ++loc2;
            }
            if (friendShips_combined != null)
            {
                loc2 = 0;
                while (loc2 < friendShips_combined.length)
                {
                    loc1 = friendShips_combined[loc2] as battle.vo.FriendShipData;
                    loc3.push(battle.util.SlotitemUtil.hasAntiAircraftAbility(loc1));
                    ++loc2;
                }
            }
            return loc3;
        }

        public function hasAntiAircraftAbility_e():__AS3__.vec.Vector.<Array>
        {
            var loc2:*=0;
            var loc1:*=null;
            var loc3:*=new __AS3__.vec.Vector.<Array>();
            loc2 = 0;
            while (loc2 < enemyShips.length)
            {
                loc1 = enemyShips[loc2];
                loc3.push(battle.util.SlotitemUtil.hasAntiAircraftAbility(loc1));
                ++loc2;
            }
            return loc3;
        }

        public function getDeckName():String
        {
            var loc1:*=DataFacade.getUserDeckData();
            return loc1.getName(_baseData.deckID);
        }

        public function createObjectForResult():Object
        {
            var loc1:*=_baseData.createObject();
            if (loc1.hasOwnProperty("emulate_data") && loc1["emulate_data"].hasOwnProperty("result"))
            {
                return loc1["emulate_data"]["result"];
            }
            return loc1;
        }

        private function _createFriendShipData(arg1:Array, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg3:Boolean):void
        {
            var loc2:*=0;
            var loc1:*=null;
            loc2 = 0;
            while (loc2 < 6)
            {
                if (arg1[loc2] == null)
                {
                    arg2.push(null);
                }
                else
                {
                    (loc1 = arg1[loc2])["inithp"] = _combatDataC.getNowHP(loc2, true, arg3);
                    loc1["api_nowhp"] = _combatDataC.getNowHP(loc2, true, arg3);
                    loc1["api_maxhp"] = _combatDataC.getMaxHP(loc2, true, arg3);
                    loc1["param"] = _combatDataC.getParam(loc2, true, arg3);
                    loc1["is_taihi"] = _combatDataC.getTaihiFlag(loc2, true, arg3);
                    arg2.push(new battle.vo.FriendShipData(loc2, loc1, arg3));
                }
                ++loc2;
            }
            return;
        }

        private function _createEnemyShipData(arg1:Array, arg2:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg3:Boolean):void
        {
            var loc8:*=0;
            var loc4:*=0;
            var loc3:*=0;
            var loc7:*=null;
            var loc1:*=null;
            var loc6:*=0;
            var loc2:*=0;
            var loc5:*=null;
            loc8 = 0;
            while (loc8 < 6)
            {
                loc4 = _combatDataC.getCharaID_e(loc8);
                loc3 = _combatDataC.getLevel_e(loc8);
                loc7 = null;
                if (loc4 == -1)
                {
                    arg1.push(null);
                }
                else
                {
                    loc1 = _combatDataC.getSlotitem_e(loc8);
                    loc6 = _combatDataC.getNowHP(loc8, false, arg3);
                    loc2 = _combatDataC.getMaxHP(loc8, false, arg3);
                    loc5 = _combatDataC.getParam(loc8, false, arg3);
                    loc7 = new battle.vo.EnemyShipData(loc8, loc4, loc3, loc1, loc6, loc2, loc5);
                    arg1.push(loc7.obj);
                }
                arg2.push(loc7);
                ++loc8;
            }
            return;
        }

        public function get combatData():battle.models.CombatModel_C
        {
            return _combatDataC;
        }

        public function get combatDataD():battle.models.CombatModel_D
        {
            return _combatDataD;
        }

        public function get combatDataN():battle.models.CombatModel_N
        {
            return _combatDataN;
        }

        public function get friendShips():__AS3__.vec.Vector.<battle.vo.BattleShipData>
        {
            return _friendShips;
        }

        public function get enemyShips():__AS3__.vec.Vector.<battle.vo.BattleShipData>
        {
            return _enemyShips;
        }

        public function get friendShips_combined():__AS3__.vec.Vector.<battle.vo.BattleShipData>
        {
            return _friendShips_combined;
        }

        public function get friendShipAll():__AS3__.vec.Vector.<battle.vo.BattleShipData>
        {
            return _friendShips.concat(_friendShips_combined);
        }

        private function _countShip_f(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:Boolean=true):int
        {
            var loc3:*=0;
            var loc2:*=null;
            var loc1:*=0;
            loc3 = 0;
            while (loc3 < arg1.length)
            {
                if ((loc2 = arg1[loc3]) != null)
                {
                    if (arg2 != false)
                    {
                        if (loc2.isTaihi() == false)
                        {
                            ++loc1;
                        }
                    }
                    else
                    {
                        ++loc1;
                    }
                }
                ++loc3;
            }
            return loc1;
        }

        private function _countShip_e(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>):int
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < _enemyShips.length)
            {
                if (arg1[loc2] != null)
                {
                    ++loc1;
                }
                undefined;
                ++loc2;
            }
            return loc1;
        }

        public function setCommonData(arg1:Object):void
        {
            _combatDataC = new battle.models.CombatModel_C(arg1);
            _friendShips = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            _createFriendShipData(_baseData.shipsF, _friendShips, false);
            if (_baseData.isCombinedFriend() == true)
            {
                _friendShips_combined = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
                _createFriendShipData(_baseData.shipsF2, _friendShips_combined, true);
            }
            _enemyShips = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            _baseData.shipsE = [];
            _createEnemyShipData(_baseData.shipsE, _enemyShips, false);
            return;
        }

        public function setDayData(arg1:String, arg2:Object):void
        {
            var loc1:*=AppFacade.root.getDebugManager();
            if (!(loc1 == null) && !loc1.isEmulate)
            {
                loc1.addBattleEmulateData(arg1, arg2);
            }
            _combatDataD = new battle.models.CombatModel_D(arg2);
            return;
        }

        public function setNightData(arg1:String, arg2:Object):void
        {
            var loc1:*=AppFacade.root.getDebugManager();
            if (!(loc1 == null) && !loc1.isEmulate)
            {
                loc1.addBattleEmulateData(arg1, arg2);
            }
            _combatDataN = new battle.models.CombatModel_N(arg2);
            return;
        }

        public function countShips_f(arg1:Boolean=true):int
        {
            return _countShip_f(_friendShips, arg1);
        }

        public function countShips_f_Combined(arg1:Boolean=true):int
        {
            return _countShip_f(_friendShips_combined, arg1);
        }

        public function countShips_e():int
        {
            return _countShip_e(_enemyShips);
        }

        public function getHPs_f():Array
        {
            var loc3:*=0;
            var loc1:*=null;
            var loc2:*=[];
            loc3 = 0;
            while (loc3 < 6)
            {
                loc1 = friendShips[loc3];
                if (loc1 != null)
                {
                    loc2.push(loc1.nowHP);
                }
                ++loc3;
            }
            return loc2;
        }

        public function getHPs_e():Array
        {
            var loc3:*=0;
            var loc1:*=null;
            var loc2:*=[];
            loc3 = 0;
            while (loc3 < 6)
            {
                loc1 = enemyShips[loc3];
                if (loc1 != null)
                {
                    loc2.push(loc1.nowHP);
                }
                ++loc3;
            }
            return loc2;
        }

        public function getInitHPTotal(arg1:Boolean=false):int
        {
            var loc3:*=0;
            var loc1:*=null;
            var loc2:*=0;
            if (arg1)
            {
                loc3 = 0;
                while (loc3 < 6)
                {
                    loc1 = enemyShips[loc3];
                    if (loc1 != null)
                    {
                        loc2 = loc2 + loc1.getInitHp();
                    }
                    ++loc3;
                }
            }
            else
            {
                loc3 = 0;
                while (loc3 < 6)
                {
                    loc1 = friendShips[loc3];
                    if (loc1 != null)
                    {
                        loc2 = loc2 + loc1.getInitHp();
                    }
                    ++loc3;
                }
            }
            return loc2;
        }

        public function getLastHPTotal(arg1:Boolean=false):int
        {
            var loc3:*=0;
            var loc1:*=null;
            var loc2:*=0;
            if (arg1)
            {
                loc3 = 0;
                while (loc3 < 6)
                {
                    loc1 = enemyShips[loc3];
                    if (loc1 != null)
                    {
                        loc2 = loc2 + loc1.nowHP;
                    }
                    ++loc3;
                }
            }
            else
            {
                loc3 = 0;
                while (loc3 < 6)
                {
                    loc1 = friendShips[loc3];
                    if (loc1 != null)
                    {
                        loc2 = loc2 + loc1.nowHP;
                    }
                    ++loc3;
                }
            }
            return loc2;
        }

        public function getDamageRate(arg1:Boolean=false):Number
        {
            var loc3:*=getInitHPTotal(arg1);
            var loc1:*=getLastHPTotal(arg1);
            var loc2:*=loc3 - loc1;
            return loc2 / loc3;
        }

        public function isNotSubMarineAll_f():Boolean
        {
            var loc2:*=0;
            var loc1:*=null;
            loc2 = 0;
            while (loc2 < friendShips.length)
            {
                loc1 = friendShips[loc2] as battle.vo.FriendShipData;
                if (loc1 != null)
                {
                    if (loc1.isSubMarine() == false)
                    {
                        return true;
                    }
                }
                ++loc2;
            }
            return false;
        }

        public function isNotSubMarineAll_e():Boolean
        {
            var loc2:*=0;
            var loc1:*=null;
            loc2 = 0;
            while (loc2 < enemyShips.length)
            {
                loc1 = enemyShips[loc2] as battle.vo.EnemyShipData;
                if (loc1 != null)
                {
                    if (loc1.isSubMarine() == false)
                    {
                        return true;
                    }
                }
                ++loc2;
            }
            return false;
        }

        public function hasAtacckPlane_f():Boolean
        {
            var loc2:*=0;
            var loc1:*=null;
            loc2 = 0;
            while (loc2 < friendShips.length)
            {
                loc1 = friendShips[loc2] as battle.vo.FriendShipData;
                if (battle.util.SlotitemUtil.hasAtacckPlane(loc1))
                {
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        private var _combatCount:int=0;

        private var _baseData:common.models.bases.BattleBaseData=null;

        private var _friendShips:__AS3__.vec.Vector.<battle.vo.BattleShipData>;

        private var _friendShips_combined:__AS3__.vec.Vector.<battle.vo.BattleShipData>;

        private var _enemyShips:__AS3__.vec.Vector.<battle.vo.BattleShipData>;

        private var _combatDataC:battle.models.CombatModel_C;

        private var _combatDataD:battle.models.CombatModel_D;

        private var _combatDataN:battle.models.CombatModel_N;

        public var preSoundClass:Class=null;

        public var preSoundStoppedPosition:Number=0;
    }
}


//      class CombatModel_C
package battle.models
{
    import common.util.*;

    public class CombatModel_C extends Object
    {
        public function CombatModel_C(arg1:Object)
        {
            super();
            _o = arg1;
            return;
        }

        public function getFormationID_f():int
        {
            return _getFormationID(true);
        }

        public function isCombinedFormation_f():Boolean
        {
            return getFormationID_f() > 10;
        }

        public function getFormationID_e():int
        {
            return _getFormationID(false);
        }

        private function _getFormationID(arg1:Boolean):int
        {
            var loc1:*=common.util.Util.getArray(_o, "api_formation", null);
            return loc1[arg1 ? 0 : 1];
        }

        public function getCombatFormation():int
        {
            var loc1:*=common.util.Util.getArray(_o, "api_formation", null);
            return loc1[2];
        }

        public function hasNextNight():Boolean
        {
            var loc1:*=common.util.Util.getInt(_o, "api_midnight_flag", 0);
            return loc1 == 1;
        }

        public function hasNextDay():Boolean
        {
            var loc1:*=common.util.Util.getInt(_o, "api_day_flag", 0);
            return loc1 == 1;
        }

        function getCharaID_e(arg1:int):int
        {
            var loc1:*=common.util.Util.getArray(_o, "api_ship_ke", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return -1;
            }
            return loc1[arg1 + 1];
        }

        function getLevel_e(arg1:int):int
        {
            var loc1:*=common.util.Util.getArray(_o, "api_ship_lv", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return -1;
            }
            return loc1[arg1 + 1];
        }

        public function getSlotitem_e(arg1:int):Array
        {
            var loc1:*=common.util.Util.getArray(_o, "api_eSlot", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return [0, 0, 0, 0, 0];
            }
            return loc1[arg1];
        }

        function getNowHP(arg1:int, arg2:Boolean, arg3:Boolean=false):int
        {
            if (arg3 == true)
            {
                return _getNowHP_Combined(arg1);
            }
            return _getNowHP(arg1, arg2);
        }

        private function _getNowHP(arg1:int, arg2:Boolean):int
        {
            var loc1:*=common.util.Util.getArray(_o, "api_nowhps", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return 0;
            }
            return loc1[arg1 + 1 + (arg2 ? 0 : 6)];
        }

        private function _getNowHP_Combined(arg1:int):int
        {
            var loc1:*=common.util.Util.getArray(_o, "api_nowhps_combined", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return 0;
            }
            return loc1[arg1 + 1];
        }

        function getMaxHP(arg1:int, arg2:Boolean, arg3:Boolean=false):int
        {
            if (arg3 == true)
            {
                return _getMaxHP_Combined(arg1);
            }
            return _getMaxHP(arg1, arg2);
        }

        private function _getMaxHP(arg1:int, arg2:Boolean):int
        {
            var loc1:*=common.util.Util.getArray(_o, "api_maxhps", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return 0;
            }
            return loc1[arg1 + 1 + (arg2 ? 0 : 6)];
        }

        private function _getMaxHP_Combined(arg1:int):int
        {
            var loc1:*=common.util.Util.getArray(_o, "api_maxhps_combined", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return 0;
            }
            return loc1[arg1 + 1];
        }

        public function getParam(arg1:uint, arg2:Boolean, arg3:Boolean=false):Array
        {
            if (arg3 == true)
            {
                return _getParam_Combined(arg1, arg2);
            }
            return _getParam(arg1, arg2);
        }

        private function _getParam(arg1:uint, arg2:Boolean):Array
        {
            var loc1:*=common.util.Util.getArray(_o, arg2 ? "api_fParam" : "api_eParam", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return [0, 0, 0, 0];
            }
            return loc1[arg1];
        }

        private function _getParam_Combined(arg1:uint, arg2:Boolean):Array
        {
            var loc1:*=common.util.Util.getArray(_o, arg2 ? "api_fParam_combined" : "api_eParam_combined", null);
            if (arg1 < 0 || 5 < arg1 || loc1 == null)
            {
                return [0, 0, 0, 0];
            }
            return loc1[arg1];
        }

        public function getTaihiFlags(arg1:Boolean, arg2:Boolean=false):Array
        {
            if (arg2 == true)
            {
                return common.util.Util.getArray(_o, arg1 ? "api_escape_idx_combined" : "api_escape_idx_e_combined", []).slice();
            }
            return common.util.Util.getArray(_o, arg1 ? "api_escape_idx" : "api_escape_idx_e", []).slice();
        }

        public function getTaihiFlag(arg1:uint, arg2:Boolean, arg3:Boolean=false):int
        {
            ++arg1;
            return _getTaihiFlag(arg1, arg2, arg3);
        }

        public function getBossDamaged():int
        {
            return common.util.Util.getInt(_o, "api_boss_damaged", 0);
        }

        private function _getTaihiFlag(arg1:uint, arg2:Boolean, arg3:Boolean):int
        {
            var loc1:*;
            return (loc1 = getTaihiFlags(arg2, arg3)).indexOf(arg1) == -1 ? 0 : 1;
        }

        private var _o:Object;
    }
}


//      class CombatModel_D
package battle.models
{
    import battle.models.attack.*;
    import common.util.*;

    public class CombatModel_D extends Object
    {
        public function CombatModel_D(arg1:Object)
        {
            super();
            _o = arg1;
            _sakuteki = new battle.models.attack.SakutekiData(_o);
            _airunits = new battle.models.attack.AirUnitsSupportData(_o);
            _koukuu = new battle.models.attack.KoukuuData(_o);
            _shien = new battle.models.attack.ShienData(_o);
            _kaimaku = new battle.models.attack.KaimakuData(_o);
            _hougeki = new battle.models.attack.HougekiData(_o);
            _raigeki = new battle.models.attack.RaigekiData(_o);
            return;
        }

        public function get sakutekiData():battle.models.attack.SakutekiData
        {
            return _sakuteki;
        }

        public function get aurUnitsSupportData():battle.models.attack.AirUnitsSupportData
        {
            return _airunits;
        }

        public function get koukuuData():battle.models.attack.KoukuuData
        {
            return _koukuu;
        }

        public function get shienData():battle.models.attack.ShienData
        {
            return _shien;
        }

        public function get kaimakuData():battle.models.attack.KaimakuData
        {
            return _kaimaku;
        }

        public function get hougekiData():battle.models.attack.HougekiData
        {
            return _hougeki;
        }

        public function get raigekiData():battle.models.attack.RaigekiData
        {
            return _raigeki;
        }

        public function getRationShips(arg1:Boolean, arg2:Boolean=false):Array
        {
            if (arg1 == true)
            {
                return common.util.Util.getArray(_o, arg2 ? "api_combat_ration_combined" : "api_combat_ration", []).concat();
            }
            return [];
        }

        private var _o:Object;

        private var _sakuteki:battle.models.attack.SakutekiData;

        private var _airunits:battle.models.attack.AirUnitsSupportData;

        private var _koukuu:battle.models.attack.KoukuuData;

        private var _shien:battle.models.attack.ShienData;

        private var _kaimaku:battle.models.attack.KaimakuData;

        private var _hougeki:battle.models.attack.HougekiData;

        private var _raigeki:battle.models.attack.RaigekiData;
    }
}


//      class CombatModel_N
package battle.models
{
    import battle.models.attack.*;
    import common.util.*;

    public class CombatModel_N extends Object
    {
        public function CombatModel_N(arg1:Object)
        {
            super();
            _o = arg1;
            _hougekiData = new battle.models.attack.NightAttackData(_o);
            return;
        }

        public function get hougekiData():battle.models.attack.NightAttackData
        {
            return _hougekiData;
        }

        public function hasTouchPlane_f():Boolean
        {
            return getTouchPlaneID_f() > 0;
        }

        public function hasTouchPlane_e():Boolean
        {
            return getTouchPlaneID_e() > 0;
        }

        public function getTouchPlaneID_f():int
        {
            return common.util.Util.getArray(_o, "api_touch_plane", [-1, -1])[0];
        }

        public function getTouchPlaneID_e():int
        {
            return common.util.Util.getArray(_o, "api_touch_plane", [-1, -1])[1];
        }

        public function isShootFlare_f():Boolean
        {
            return getShootFlareIndex_f() >= 0;
        }

        public function isShootFlare_e():Boolean
        {
            return getShootFlareIndex_e() >= 0;
        }

        public function getShootFlareIndex_f():int
        {
            return common.util.Util.getArray(_o, "api_flare_pos", [-1, -1])[0] - 1;
        }

        public function getShootFlareIndex_e():int
        {
            return common.util.Util.getArray(_o, "api_flare_pos", [-1, -1])[1] - 1;
        }

        public function getRationShips(arg1:Boolean, arg2:Boolean=false):Array
        {
            if (arg1 == true)
            {
                return common.util.Util.getArray(_o, arg2 ? "api_combat_ration_combined" : "api_combat_ration", []).concat();
            }
            return [];
        }

        private var _o:Object;

        private var _hougekiData:battle.models.attack.NightAttackData;
    }
}


//    package phase
//      package attack
//        package eff
//          class PhaseDaihatsuEff
package battle.phase.attack.eff
{
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.attack.*;
    import battle.views.*;
    import battle.vo.*;
    import flash.geom.*;
    import res.battle.*;

    public class PhaseDaihatsuEff extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseDaihatsuEff(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            APPEARANCE_EASE = a24.tween.Ease24._BounceOut;
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender = arg3.defender;
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        public override function start():void
        {
            var loc1:*=_attacker.banner.getGlobalPos(true);
            loc1.x = loc1.x + (_isFriend ? 106.666666667 : -106.666666667);
            loc1.y = loc1.y + 40 / 4;
            var loc2:*=_defender.banner.getGlobalPos(true);
            loc2.x = 400;
            loc2.y = loc1.y + (loc2.y - loc1.y) / 2;
            var loc3:*=new res.battle.MCDaihatsu();
            loc3.x = loc1.x;
            loc3.y = loc1.y - 10;
            loc3.alpha = 0;
            if (_isFriend)
            {
                loc3.rotation = loc3.rotation - 10;
            }
            else
            {
                loc3.rotation = loc3.rotation + 10;
                loc3.scaleX = -1;
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.contentsLayer, loc3), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(loc3, APPEARANCE_TIME, APPEARANCE_EASE).$$y(10).alpha(1).rotation(0), a24.tween.Tween24.tween(loc3, 1, a24.tween.Ease24._1_SineIn).xy(loc2.x, loc2.y).delay(MOVE_DELAY), a24.tween.Tween24.tween(loc3, 0.2).alpha(0).delay(VANISH_DELAY)), a24.tween.Tween24.removeChild(loc3)).onComplete(_phaseEnd).play();
            return;
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            _attacker = _defender = null;
            super._phaseEnd();
            return;
        }

        private var _attacker:battle.vo.BattleShipData;

        private var _defender:battle.vo.BattleShipData;

        private var _isFriend:Boolean;

        public var APPEARANCE_TIME:Number=1;

        public var APPEARANCE_EASE:Function;

        public var MOVE_DELAY:Number=0.8;

        public var VANISH_DELAY:Number=1.6;
    }
}


//          class PhaseUchibiEff
package battle.phase.attack.eff
{
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.attack.*;
    import battle.views.*;
    import battle.vo.*;
    import flash.geom.*;
    import res.battle.*;

    public class PhaseUchibiEff extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseUchibiEff(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            APPEARANCE_EASE = a24.tween.Ease24._BounceOut;
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender = arg3.defender;
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        public override function start():void
        {
            var loc1:*=_attacker.banner.getGlobalPos(true);
            loc1.x = loc1.x + (_isFriend ? 106.666666667 : -106.666666667);
            loc1.y = loc1.y + 40 / 4;
            var loc2:*=_defender.banner.getGlobalPos(true);
            loc2.x = 400;
            loc2.y = loc1.y + (loc2.y - loc1.y) / 2;
            var loc3:*=new res.battle.MCUchibi();
            loc3.x = loc1.x;
            loc3.y = loc1.y - 10;
            loc3.alpha = 0;
            if (_isFriend)
            {
                loc3.rotation = loc3.rotation - 10;
            }
            else
            {
                loc3.rotation = loc3.rotation + 10;
                loc3.scaleX = -1;
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.contentsLayer, loc3), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(loc3, APPEARANCE_TIME, APPEARANCE_EASE).$$y(10).alpha(1).rotation(0), a24.tween.Tween24.tween(loc3, 1, a24.tween.Ease24._1_SineIn).xy(loc2.x, loc2.y).delay(MOVE_DELAY), a24.tween.Tween24.tween(loc3, 0.2).alpha(0).delay(VANISH_DELAY)), a24.tween.Tween24.removeChild(loc3)).onComplete(_phaseEnd).play();
            return;
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            _attacker = _defender = null;
            super._phaseEnd();
            return;
        }

        private var _attacker:battle.vo.BattleShipData;

        private var _defender:battle.vo.BattleShipData;

        private var _isFriend:Boolean;

        public var APPEARANCE_TIME:Number=1;

        public var APPEARANCE_EASE:Function;

        public var MOVE_DELAY:Number=0.8;

        public var VANISH_DELAY:Number=1.6;
    }
}


//        class PhaseAttackBase
package battle.phase.attack
{
    import a24.tween.*;
    import battle.display.main.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.util.*;
    import battle.views.*;
    import battle.vo.*;
    import common.util.*;

    public class PhaseAttackBase extends battle.phase.PhaseDayNightBase
    {
        public function PhaseAttackBase(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg4);
            _attack = arg3;
            return;
        }

        protected function _getTweenDamageEffect(arg1:battle.vo.BattleShipData, arg2:battle.vo.BattleShipData, arg3:Number, arg4:int):a24.tween.Tween24
        {
            var loc2:*=_view.damageCanvas;
            var loc1:*=null;
            loc1 = _view.bombLayer.getTweenBomb(arg2, arg3);
            if (arg1 == null)
            {
                loc2.addDamegeNumber(arg2, arg3, arg4, false);
                return a24.tween.Tween24.parallel(loc2.getTweenAnimation(), arg2.banner.getTweenDamage(arg2.nowHP, arg2.getMaxHp(), battle.util.BattleUtil.isShield(arg3)), loc1);
            }
            loc2.addDamegeNumber(arg2, arg3, arg4);
            return a24.tween.Tween24.parallel(loc2.getTweenAnimation(), arg2.banner.getTweenDamage(arg2.nowHP, arg2.getMaxHp(), battle.util.BattleUtil.isShield(arg3)), loc1, arg1.banner.getTweenDefaultPos().delay(0.1));
        }

        protected function _playVoiceInCutin(arg1:battle.vo.BattleShipData):void
        {
            var loc2:*=0;
            var loc1:*=0;
            if (arg1 is battle.vo.FriendShipData)
            {
                loc2 = arg1.getCharaID();
                loc1 = arg1.getShipType();
                if (loc1 == 7 || loc1 == 11)
                {
                    common.util.SoundUtil.playVoiceAtRandom(loc2, [16, 18], [50, 50]);
                }
                else if (arg1.isSubMarine() && (_attack.uchibiFlg || _attack.daihatsuFlg))
                {
                    common.util.SoundUtil.playVoice(loc2, 26);
                }
                else
                {
                    common.util.SoundUtil.playVoiceAtRandom(loc2, [15, 16], [50, 50]);
                }
            }
            else
            {
                _playVoiceEnemy(arg1);
            }
            return;
        }

        protected function _playVoiceInCutinAtNight(arg1:battle.vo.BattleShipData):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (arg1 is battle.vo.FriendShipData)
            {
                loc1 = arg1.getCharaID();
                loc2 = 17;
                if (loc1 == 432 || loc1 == 353)
                {
                    loc2 = 917;
                }
                else if (arg1.isSubMarine() && (_attack.uchibiFlg || _attack.daihatsuFlg))
                {
                    loc2 = 26;
                }
                common.util.SoundUtil.playVoice(arg1.getCharaID(), loc2);
            }
            else
            {
                _playVoiceEnemy(arg1);
            }
            return;
        }

        protected function _playVoiceEnemy(arg1:battle.vo.BattleShipData):void
        {
            battle.vo.EnemyShipData(arg1).playVoice_Offence();
            return;
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            super._phaseEnd();
            return;
        }

        protected var _attack:battle.models.attack.AttackData;
    }
}


//        class PhaseAttackNormal
package battle.phase.attack
{
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.events.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.attack.eff.*;
    import battle.util.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import flash.events.*;

    public class PhaseAttackNormal extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseAttackNormal(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender = arg3.defender;
            _slotitemID = arg3.slotitemMasterID;
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        public override function start():void
        {
            var loc1:*=null;
            _cutin = new battle.display.cutin.Cutin(_isFriend, _isNight);
            _cutin.addEventListener("ShipVoiceEvent::VOICE", _handlePlayVoice);
            _cutin.addEventListener("ShipVoiceEvent::VOICE", _cutinEnd);
            if (_attack.hasShield)
            {
                loc1 = a24.tween.Tween24.wait(0);
            }
            else
            {
                loc1 = _attack.defender.banner.getTweenDefendEffect();
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[通常攻撃-砲撃] " + _attack + "  type:" + _attack.hougekiAttackType), _cutin.getTweenInitialize(_attacker, _attack.slotitemMasterID, 0), a24.tween.Tween24.addChild(_view.cutinLayer, _cutin), a24.tween.Tween24.parallel(_attacker.banner.getTweenAttackPos(), loc1, _cutin.getTween())).play();
            return;
        }

        private function _cutinEnd(arg1:flash.events.Event):void
        {
            var loc1:*=null;
            var loc2:*=null;
            _cutin.removeEventListener("ShipVoiceEvent::VOICE", _cutinEnd);
            if (_attack.uchibiFlg)
            {
                loc1 = new battle.phase.attack.eff.PhaseUchibiEff(_view, _data, _attack, _isNight);
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc1.start)).onComplete(_phaseDamageEffect).play();
            }
            else if (_attack.daihatsuFlg)
            {
                loc2 = new battle.phase.attack.eff.PhaseDaihatsuEff(_view, _data, _attack, _isNight);
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc2.start)).onComplete(_phaseDamageEffect).play();
            }
            else
            {
                _attacker.banner.getTweenAttackEffect().onComplete(_phaseDamageEffect).play();
            }
            return;
        }

        private function _phaseDamageEffect():void
        {
            var loc3:*=_attack.damage;
            _view.damageCanvas.addDamegeNumber(_defender, loc3, _attack.hitState);
            var loc1:*=_attack.shieldTarget != null ? _attack.shieldTarget.banner.getTweenDefaultPos() : a24.tween.Tween24.wait(0);
            var loc4:*;
            if ((loc4 = null) == null)
            {
                loc4 = _view.bombLayer.getTweenBomb(_defender, loc3);
            }
            var loc2:*=a24.tween.Tween24.parallel(_defender.banner.getTweenDamage(_defender.nowHP, _defender.getMaxHp(), battle.util.BattleUtil.isShield(loc3)), _view.damageCanvas.getTweenAnimation(), loc4, loc1, _attacker.banner.getTweenDefaultPos().delay(0.1));
            a24.tween.Tween24.parallel(a24.tween.Tween24.func(loc2.play), a24.tween.Tween24.wait(0.6)).onComplete(_phaseEnd).play();
            return;
        }

        private function _handlePlayVoice(arg1:battle.events.ShipVoiceEvent):void
        {
            _cutin.removeEventListener("ShipVoiceEvent::VOICE", _handlePlayVoice);
            if (_isNight != false)
            {
                _playVoiceInCutinAtNight(arg1.ship);
            }
            else
            {
                _playVoiceInCutin(arg1.ship);
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            _cutin.removeEventListener("ShipVoiceEvent::VOICE", _handlePlayVoice);
            _cutin.removeEventListener("ShipVoiceEvent::VOICE", _cutinEnd);
            _cutin = null;
            _attacker = _defender = null;
            super._phaseEnd();
            return;
        }

        private var _attacker:battle.vo.BattleShipData;

        private var _defender:battle.vo.BattleShipData;

        private var _slotitemID:int;

        private var _isFriend:Boolean;

        private var _cutin:battle.display.cutin.Cutin;
    }
}


//        class PhaseBakurai
package battle.phase.attack
{
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.attack.eff.*;
    import battle.util.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import flash.geom.*;
    import res.battle.*;

    public class PhaseBakurai extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseBakurai(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender = arg3.defender;
            _slotitemID = arg3.slotitemMasterID;
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        public override function start():void
        {
            var loc1:*=new battle.display.cutin.Cutin(_isFriend, _isNight);
            a24.tween.Tween24.serial(loc1.getTweenInitialize(_attacker, -1, 8), a24.tween.Tween24.addChild(_view.cutinLayer, loc1), a24.tween.Tween24.parallel(loc1.getTween(), a24.tween.Tween24.waitEvent(loc1, "complete"), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(loc1, "ShipVoiceEvent::VOICE"), a24.tween.Tween24.ifCase(_isNight, a24.tween.Tween24.func(_playVoiceInCutinAtNight, _attacker), a24.tween.Tween24.func(_playVoiceInCutin, _attacker))))).onComplete(_phaseBakurai).play();
            return;
        }

        private function _additionalEff():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (_attack.uchibiFlg)
            {
                loc1 = new battle.phase.attack.eff.PhaseUchibiEff(_view, _data, _attack, _isNight);
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc1.start)).play();
            }
            else if (_attack.daihatsuFlg)
            {
                loc2 = new battle.phase.attack.eff.PhaseDaihatsuEff(_view, _data, _attack, _isNight);
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc2.start)).play();
            }
            return;
        }

        private function _phaseBakurai():void
        {
            _additionalEff();
            var loc2:*=new res.battle.MCBakuraiStart();
            var loc1:*=new res.battle.MCBakuraiEnd();
            var loc4:*=_attacker.banner.getGlobalPos();
            var loc3:*=_defender.banner.getGlobalPos();
            if (_attacker is battle.vo.FriendShipData)
            {
                loc4.x = loc4.x + 160;
            }
            else
            {
                var loc5:*;
                loc1.scaleX = loc5 = -1;
                loc2.scaleX = loc5;
                loc3.x = loc3.x + 160;
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[通常攻撃-爆雷] " + _attack), a24.tween.Tween24.parallel(_attacker.banner.getTweenAttackPos(), _defender.banner.getTweenDefendEffect()), a24.tween.Tween24.prop(loc2).alpha(0).xy(loc4.x, loc4.y), a24.tween.Tween24.prop(loc1).alpha(0).xy(loc3.x, loc3.y), a24.tween.Tween24.addChild(_view.contentsLayer, loc2, loc1), a24.tween.Tween24.tween(loc2, 0.25).alpha(1), a24.tween.Tween24.tween(loc2, 0.15).alpha(0), a24.tween.Tween24.wait(0.3), a24.tween.Tween24.tween(loc1, 0.25).alpha(1), a24.tween.Tween24.tween(loc1, 0.15).alpha(0), a24.tween.Tween24.removeChild(loc2, loc1)).onComplete(_phaseDamageEffect).play();
            return;
        }

        private function _phaseDamageEffect():void
        {
            var loc1:*=_attack.damage;
            _view.damageCanvas.addDamegeNumber(_defender, loc1, _attack.hitState);
            a24.tween.Tween24.parallel(_view.bombLayer.getTweenBomb(_defender, 0, "EXPLOSION_TYPE:MIZUHASIRA_BAKURAI"), _view.bombLayer.getTweenBomb(_defender, 0, "EXPLOSION_TYPE:MIDLLE", new flash.geom.Point(160 / 4, 0)), _defender.banner.getTweenDamage(_defender.nowHP, _defender.getMaxHp(), battle.util.BattleUtil.isShield(loc1)), a24.tween.Tween24.parallel(_view.bombLayer.getTweenBomb(_defender, loc1), _view.damageCanvas.getTweenAnimation()).delay(0.5), _attacker.banner.getTweenDefaultPos().delay(0.6)).onComplete(_phaseEnd).play();
            return;
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            _attacker = _defender = null;
            super._phaseEnd();
            return;
        }

        private var _attacker:battle.vo.BattleShipData;

        private var _defender:battle.vo.BattleShipData;

        private var _slotitemID:int;

        private var _isFriend:Boolean;
    }
}


//        class PhaseDaySuper1
package battle.phase.attack
{
    import battle.models.*;
    import battle.models.attack.*;
    import battle.views.*;
    import battle.views.cutins.*;

    public class PhaseDaySuper1 extends battle.phase.attack.PhaseDaySuperBase
    {
        public function PhaseDaySuper1(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _cutinName = "[昼戦 - 特1(偵察/主砲/副砲)]";
            return;
        }

        public override function start():void
        {
            var loc1:*=new battle.views.cutins.CutinDaySuper1();
            _tween1(loc1);
            return;
        }
    }
}


//        class PhaseDaySuper2
package battle.phase.attack
{
    import battle.models.*;
    import battle.models.attack.*;
    import battle.views.*;
    import battle.views.cutins.*;

    public class PhaseDaySuper2 extends battle.phase.attack.PhaseDaySuper1
    {
        public function PhaseDaySuper2(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _cutinName = "[昼戦 - 特2(偵察/電探/主砲)]";
            return;
        }

        public override function start():void
        {
            var loc1:*=new battle.views.cutins.CutinDaySuper2();
            _tween1(loc1);
            return;
        }
    }
}


//        class PhaseDaySuper3
package battle.phase.attack
{
    import battle.models.*;
    import battle.models.attack.*;
    import battle.views.*;
    import battle.views.cutins.*;

    public class PhaseDaySuper3 extends battle.phase.attack.PhaseDaySuper1
    {
        public function PhaseDaySuper3(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _cutinName = "[昼戦 - 特3(偵察/主砲/徹甲)]";
            return;
        }

        public override function start():void
        {
            var loc1:*=new battle.views.cutins.CutinDaySuper3();
            _tween1(loc1);
            return;
        }
    }
}


//        class PhaseDaySuper4
package battle.phase.attack
{
    import battle.models.*;
    import battle.models.attack.*;
    import battle.views.*;
    import battle.views.cutins.*;

    public class PhaseDaySuper4 extends battle.phase.attack.PhaseDaySuper1
    {
        public function PhaseDaySuper4(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _cutinName = "[昼戦 - 特4(偵察/主砲/主砲)]";
            return;
        }

        public override function start():void
        {
            var loc1:*=new battle.views.cutins.CutinDaySuper4();
            _tween1(loc1);
            return;
        }
    }
}


//        class PhaseDaySuperBase
package battle.phase.attack
{
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.util.*;
    import battle.views.*;
    import battle.views.cutins.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.geom.*;

    public class PhaseDaySuperBase extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseDaySuperBase(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender = arg3.getDefender(0);
            _slotitemID1 = arg3.getSlotitemID(0);
            _slotitemID2 = arg3.getSlotitemID(1);
            _slotitemID3 = arg3.getSlotitemID(2);
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        protected function _tween1(arg1:battle.views.cutins.CutinDaySuperBase):void
        {
            var loc3:*=_attacker.getCharaID();
            var loc2:*=_attacker.getCondition();
            var loc4:*=new flash.geom.Point(Math.random() * 160 - 160 / 2, Math.random() * 40 - 40 / 2);
            var loc1:*=new flash.geom.Point(Math.random() * 160 - 160 / 2, Math.random() * 40 - 40 / 2);
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(arg1).xy(800 / 2, 480 / 2), a24.tween.Tween24.addChild(_view.cutinLayer, arg1), a24.tween.Tween24.func(common.debug.Debug.log, _cutinName + " " + _attack), arg1.getTweenInitialize(loc3, loc2, _slotitemID1, _slotitemID2, _slotitemID3, _isFriend), a24.tween.Tween24.parallel(arg1.getTween(), _attacker.banner.getTweenAttackPos(), _defender.banner.getTweenDefendEffect(), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(arg1, "CutinDaySuper::EVENT_ANIMATION_TIMING_2"), a24.tween.Tween24.parallel(_defender.banner.getTweenDamage(_defender.nowHP, _defender.getMaxHp(), battle.util.BattleUtil.isShield(_attack.damage)), _view.bombLayer.getTweenBomb(_defender, _attack.damage), _view.bombLayer.getTweenBomb(_defender, 0, "EXPLOSION_TYPE:SMALL", loc4).delay(0.15), _view.bombLayer.getTweenBomb(_defender, 0, "EXPLOSION_TYPE:SMALL", loc1).delay(0.25)).delay(1).onComplete(_tween2)), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(arg1, "ShipVoiceEvent::VOICE"), a24.tween.Tween24.func(_playVoice)))).play();
            return;
        }

        private function _tween2():void
        {
            _attacker.banner.getTweenAttackEffect().onComplete(_phaseEnd).play();
            _getTweenDamageEffect(_attacker, _defender, _attack.damage, _attack.hitState).play();
            return;
        }

        private function _playVoice():void
        {
            if (_attacker is battle.vo.FriendShipData)
            {
                common.util.SoundUtil.playVoice(_attacker.getCharaID(), 17);
            }
            else
            {
                _playVoiceEnemy(_attacker);
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            _attacker = null;
            _defender = null;
            super._phaseEnd();
            return;
        }

        protected var _attacker:battle.vo.BattleShipData;

        protected var _defender:battle.vo.BattleShipData;

        protected var _slotitemID1:int;

        protected var _slotitemID2:int;

        protected var _slotitemID3:int;

        protected var _isFriend:Boolean;

        protected var _cutinName:String="";
    }
}


//        class PhaseDoubleH
package battle.phase.attack
{
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;

    public class PhaseDoubleH extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseDoubleH(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender1 = arg3.getDefender(0);
            _defender2 = arg3.getDefender(1);
            _slotitemID1 = arg3.getSlotitemID(0);
            _slotitemID2 = arg3.getSlotitemID(1);
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        public override function start():void
        {
            var loc1:*=new battle.display.cutin.CutinDouble(_isFriend, _isNight);
            a24.tween.Tween24.serial(loc1.getTweenInitialize(_attacker, _slotitemID1, _slotitemID2), a24.tween.Tween24.addChild(_view.cutinLayer, loc1), a24.tween.Tween24.func(common.debug.Debug.log, "[連続攻撃-砲撃] " + _attack), a24.tween.Tween24.parallel(loc1.getTween(), _defender1.banner.getTweenDefendEffect(), a24.tween.Tween24.ifCase(!(_defender1 == _defender2), _defender2.banner.getTweenDefendEffect(), null), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(loc1, "CutinDouble::EVENT_ATTACK_TIMING1"), a24.tween.Tween24.parallel(_attacker.banner.getTweenAttackPos(), _getTweenDamageEffect(null, _defender1, _attack.getDamage(0), _attack.getHitState(0)))), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(loc1, "CutinDouble::EVENT_ATTACK_TIMING2"), a24.tween.Tween24.func(_attack2).delay(0.2)), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(loc1, "ShipVoiceEvent::VOICE"), a24.tween.Tween24.func(_playVoice)))).play();
            return;
        }

        private function _attack2():void
        {
            _attacker.banner.getTweenAttackEffect().onComplete(_phaseEnd).play();
            _getTweenDamageEffect(_attacker, _defender2, _attack.getDamage(1), _attack.getHitState(1)).play();
            return;
        }

        private function _playVoice():void
        {
            var loc1:*=0;
            if (_attacker is battle.vo.FriendShipData)
            {
                loc1 = _attacker.getCharaID();
                if (_isNight == true && (loc1 == 432 || loc1 == 353))
                {
                    common.util.SoundUtil.playVoice(_attacker.getCharaID(), 917);
                }
                else
                {
                    common.util.SoundUtil.playVoice(_attacker.getCharaID(), 17);
                }
            }
            else
            {
                _playVoiceEnemy(_attacker);
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            _attacker = _defender1 = _defender2 = null;
            super._phaseEnd();
            return;
        }

        private var _attacker:battle.vo.BattleShipData;

        private var _defender1:battle.vo.BattleShipData;

        private var _defender2:battle.vo.BattleShipData;

        private var _slotitemID1:int;

        private var _slotitemID2:int;

        private var _isFriend:Boolean;
    }
}


//        class PhaseDoubleR
package battle.phase.attack
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.views.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;

    public class PhaseDoubleR extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseDoubleR(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            return;
        }

        public override function start():void
        {
            var loc5:*;
            var loc4:*=(loc5 = _attack).attacker;
            var loc7:*=loc5.getDefender(0);
            var loc6:*=loc5.getDefender(1);
            var loc2:*=loc5.getSlotitemID(0);
            var loc1:*=loc5.getSlotitemID(1);
            var loc3:*=new battle.display.cutin.CutinDouble(loc4 is battle.vo.FriendShipData, _isNight);
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.cutinLayer, loc3), loc3.getTweenInitialize(loc4, loc2, loc1), a24.tween.Tween24.parallel(loc3.getTween(), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(loc3, "CutinDouble::EVENT_ATTACK_TIMING1"), _getTweenAttackDoubleR(loc5)))).onComplete(_phaseEnd).play();
            return;
        }

        protected function _createTorpedoCanvas():battle.views.effects.torpedo.TorpedoCanvas
        {
            return new battle.views.effects.torpedo.TorpedoCanvas(0);
        }

        private function _getTweenAttackDoubleR(arg1:battle.models.attack.AttackData):a24.tween.Tween24
        {
            if (arg1.getDefender(0) == arg1.getDefender(1))
            {
                return _getTweenAttackDoubleR_single(arg1);
            }
            return null;
        }

        private function _getTweenAttackDoubleR_single(arg1:battle.models.attack.AttackData):a24.tween.Tween24
        {
            var attack:battle.models.attack.AttackData;
            var tweens:Array;
            var tCanvas:battle.views.effects.torpedo.TorpedoCanvas;
            var attacker:battle.vo.BattleShipData;
            var defender:battle.vo.BattleShipData;
            var damage1:Number;
            var damage2:Number;

            var loc1:*;
            attack = arg1;
            tweens = [];
            tCanvas = _createTorpedoCanvas();
            attacker = attack.attacker;
            defender = attack.defender;
            damage1 = attack.getDamage(0);
            damage2 = attack.getDamage(1);
            tCanvas.reserveGyorai2(attacker, defender);
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[連続攻撃-雷撃] " + attack), a24.tween.Tween24.parallel(attacker.banner.getTweenGyoraiShoot(), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_gyorai)), _view.torpedoLayer.getTweenRaigeki(tCanvas), a24.tween.Tween24.parallel(_view.torpedoLayer.getTweenWaterBomb(__AS3__.vec.Vector.<battle.vo.BattleShipData>([defender])), a24.tween.Tween24.serial(a24.tween.Tween24.func(function ():void
            {
                _view.damageCanvas.addDamegeNumber(defender, damage1, attack.hitState);
                return;
            }), a24.tween.Tween24.parallel(defender.banner.getTweenDamageAsync(defender, attack.hasShield), _view.bombLayer.getTweenBomb(defender, damage1), _view.damageCanvas.getTweenAnimationAsync(0.4)), a24.tween.Tween24.func(function ():void
            {
                _view.damageCanvas.addDamegeNumber(defender, damage2, attack.hitState);
                return;
            }), a24.tween.Tween24.parallel(defender.banner.getTweenDamageAsync(defender, attack.hasShield), _view.bombLayer.getTweenBomb(defender, damage2), _view.damageCanvas.getTweenAnimationAsync()))))
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            super._phaseEnd();
            return;
        }
    }
}


//        class PhaseKansaiki
package battle.phase.attack
{
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.display.main.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.attack.eff.*;
    import battle.views.*;
    import battle.views.effects.plane.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.events.*;
    import flash.geom.*;

    public class PhaseKansaiki extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseKansaiki(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender = arg3.defender;
            _slotitemID = arg3.slotitemMasterID;
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        public override function start():void
        {
            var loc1:*=new battle.display.cutin.Cutin(_isFriend, _isNight);
            a24.tween.Tween24.serial(loc1.getTweenInitialize(_attacker, -1, 7), a24.tween.Tween24.addChild(_view.cutinLayer, loc1), a24.tween.Tween24.parallel(loc1.getTween(), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(loc1, "complete"), a24.tween.Tween24.parallel(_getTweenAirAttack(_attack), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(_view.contentsLayer, "complete"), __getTweenDamageEffect(_attack)))), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(loc1, "ShipVoiceEvent::VOICE"), a24.tween.Tween24.ifCase(_isNight, a24.tween.Tween24.func(_playVoiceInCutinAtNight, _attacker), a24.tween.Tween24.func(_playVoiceInCutin, _attacker))))).onComplete(_phaseEnd).play();
            return;
        }

        private function _additionalEff():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (_attack.uchibiFlg)
            {
                loc1 = new battle.phase.attack.eff.PhaseUchibiEff(_view, _data, _attack, _isNight);
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc1.start)).play();
            }
            else if (_attack.daihatsuFlg)
            {
                loc2 = new battle.phase.attack.eff.PhaseDaihatsuEff(_view, _data, _attack, _isNight);
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc2.start)).play();
            }
            return;
        }

        private function _getTweenAirAttack(arg1:battle.models.attack.AttackData):a24.tween.Tween24
        {
            var atk:battle.models.attack.AttackData;
            var plane3:battle.views.effects.plane.FlyPlaneTrio;
            var sPos:flash.geom.Point;
            var gPos:flash.geom.Point;
            var cPosX:Number;
            var cPosY:Number;
            var cPos:flash.geom.Point;
            var extraX:Number;
            var extraY:Number;
            var handleCloseTarget:Function;
            var handleOnTarget:Function;

            var loc1:*;
            atk = arg1;
            _additionalEff();
            if (atk.attacker is battle.vo.EnemyShipData)
            {
                plane3 = new battle.views.effects.plane.FlyPlaneTrioE();
            }
            else
            {
                plane3 = new battle.views.effects.plane.FlyPlaneTrioF();
            }
            plane3.setPlaneFromShipInfo(atk.attacker, atk.defender);
            sPos = atk.attacker.banner.getGlobalPos(true);
            plane3.x = sPos.x;
            plane3.y = sPos.y;
            gPos = atk.defender.banner.getGlobalPos(true);
            cPosX = sPos.x + (gPos.x - sPos.x) / 2 + Math.random() * 80 - 40;
            cPosY = Math.abs(gPos.y - sPos.y) / 2 + Math.max(sPos.y, gPos.y) + Math.random() * 100;
            cPos = new flash.geom.Point(cPosX, cPosY);
            extraX = 0;
            extraY = 0;
            if (atk.attacker is battle.vo.FriendShipData)
            {
                extraX = 800 - gPos.x;
                extraY = (gPos.y - cPos.y) / (gPos.x - cPos.x) * extraX;
            }
            else
            {
                extraX = -gPos.x;
                extraY = (gPos.y - cPos.y) / (gPos.x - cPos.x) * extraX;
            }
            handleCloseTarget = function (arg1:flash.events.Event):void
            {
                var loc3:*=new flash.geom.Point(plane3.x, plane3.y);
                var loc2:*=new flash.geom.Point(gPos.x, gPos.y);
                var loc1:*=flash.geom.Point.distance(loc3, gPos);
                if (loc1 < 160)
                {
                    plane3.removeEventListener("enterFrame", arguments.callee);
                    plane3.attack();
                }
                return;
            }
            handleOnTarget = function (arg1:flash.events.Event):void
            {
                if (plane3 is battle.views.effects.plane.FlyPlaneTrioF && plane3.x > gPos.x && plane3.y < gPos.y)
                {
                    plane3.removeEventListener("enterFrame", arguments.callee);
                    plane3.removeEventListener("enterFrame", handleCloseTarget);
                    _view.contentsLayer.dispatchEvent(new flash.events.Event("complete"));
                }
                if (plane3 is battle.views.effects.plane.FlyPlaneTrioE && plane3.x < gPos.x && plane3.y < gPos.y)
                {
                    plane3.removeEventListener("enterFrame", arguments.callee);
                    plane3.removeEventListener("enterFrame", handleCloseTarget);
                    _view.contentsLayer.dispatchEvent(new flash.events.Event("complete"));
                }
                return;
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[通常攻撃-航空] " + atk), a24.tween.Tween24.prop(plane3).scale(0), a24.tween.Tween24.addChild(_view.contentsLayer, plane3), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_plane1), a24.tween.Tween24.tween(plane3, 0.25).scale(0.75), a24.tween.Tween24.func(plane3.addEventListener, "enterFrame", handleCloseTarget), a24.tween.Tween24.func(plane3.addEventListener, "enterFrame", handleOnTarget), a24.tween.Tween24.tween(plane3, 2.5).bezier(cPos.x, cPos.y).xy(gPos.x, gPos.y).xy(gPos.x + extraX, gPos.y + extraY), a24.tween.Tween24.removeChild(plane3));
        }

        private function __getTweenDamageEffect(arg1:battle.models.attack.AttackData):a24.tween.Tween24
        {
            var loc3:*;
            (loc3 = _view.damageCanvas).addDamegeNumber(arg1.defender, arg1.damage, arg1.hitState);
            var loc1:*=a24.tween.Tween24.wait(0);
            if (arg1.shieldTarget != null)
            {
                loc1 = arg1.shieldTarget.banner.getTweenDefaultPos();
            }
            var loc2:*=a24.tween.Tween24.parallel(arg1.defender.banner.getTweenDamage(arg1.defender.nowHP, arg1.defender.getMaxHp(), arg1.hasShield), loc3.getTweenAnimation(), _view.bombLayer.getTweenBomb(arg1.defender, arg1.damage), arg1.attacker.banner.getTweenDefaultPos().delay(0.1), loc1);
            return a24.tween.Tween24.parallel(a24.tween.Tween24.func(loc2.play), a24.tween.Tween24.wait(0.6));
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            _attacker = _defender = null;
            super._phaseEnd();
            return;
        }

        private var _attacker:battle.vo.BattleShipData;

        private var _defender:battle.vo.BattleShipData;

        private var _slotitemID:int;

        private var _isFriend:Boolean;
    }
}


//        class PhaseRocket
package battle.phase.attack
{
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.attack.eff.*;
    import battle.util.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.geom.*;
    import res.battle.*;

    public class PhaseRocket extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseRocket(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender = arg3.defender;
            _slotitemID = arg3.slotitemMasterID;
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        public override function start():void
        {
            var loc1:*=new battle.display.cutin.Cutin(_isFriend, _isNight);
            a24.tween.Tween24.serial(loc1.getTweenInitialize(_attacker, -1, 8), a24.tween.Tween24.addChild(_view.cutinLayer, loc1), a24.tween.Tween24.parallel(loc1.getTween(), a24.tween.Tween24.waitEvent(loc1, "complete"), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(loc1, "ShipVoiceEvent::VOICE"), a24.tween.Tween24.ifCase(_isNight, a24.tween.Tween24.func(_playVoiceInCutinAtNight, _attacker), a24.tween.Tween24.func(_playVoiceInCutin, _attacker))))).onComplete(_phaseMain).play();
            return;
        }

        private function _phaseMain():void
        {
            var loc2:*=new res.battle.MCRocketStart();
            var loc1:*=new res.battle.MCRocketEnd();
            var loc4:*=_attacker.banner.getGlobalPos();
            var loc3:*=_defender.banner.getGlobalPos();
            if (_attacker is battle.vo.FriendShipData)
            {
                loc4.x = loc4.x + 160;
            }
            else
            {
                var loc5:*;
                loc1.scaleX = loc5 = -1;
                loc2.scaleX = loc5;
                loc3.x = loc3.x + 160;
            }
            loc4.y = loc4.y + 40 / 2;
            loc3.y = loc3.y + 40 / 2;
            a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[通常攻撃-ロケット] " + _attack), a24.tween.Tween24.parallel(_attacker.banner.getTweenAttackPos(), _defender.banner.getTweenDefendEffect()), a24.tween.Tween24.func(_additionalEff), a24.tween.Tween24.gotoAndStop(1, loc2, loc1), a24.tween.Tween24.prop(loc2).xy(loc4.x, loc4.y), a24.tween.Tween24.prop(loc1).xy(loc3.x, loc3.y), a24.tween.Tween24.addChild(_view.contentsLayer, loc2, loc1), a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_bomb1), common.util.MCUtil.frameTween(loc2, 1, loc2.totalFrames), a24.tween.Tween24.wait(0.3), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_bomb1), a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_bomb1).delay(0.2), a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_bomb1).delay(0.4), common.util.MCUtil.frameTween(loc1, 1, loc1.totalFrames)), a24.tween.Tween24.removeChild(loc2, loc1)).onComplete(_phaseDamageEffect).play();
            return;
        }

        private function _additionalEff():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (_attack.uchibiFlg)
            {
                loc1 = new battle.phase.attack.eff.PhaseUchibiEff(_view, _data, _attack, _isNight);
                loc1.APPEARANCE_TIME = 0.4;
                loc1.APPEARANCE_EASE = a24.tween.Ease24._BackOut;
                loc1.MOVE_DELAY = 0.3;
                loc1.VANISH_DELAY = 1.1;
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc1.start)).play();
            }
            else if (_attack.daihatsuFlg)
            {
                loc2 = new battle.phase.attack.eff.PhaseDaihatsuEff(_view, _data, _attack, _isNight);
                loc2.APPEARANCE_TIME = 0.4;
                loc2.APPEARANCE_EASE = a24.tween.Ease24._BackOut;
                loc2.MOVE_DELAY = 0.3;
                loc2.VANISH_DELAY = 1.1;
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc2.start)).play();
            }
            return;
        }

        private function _phaseDamageEffect():void
        {
            var loc1:*=_attack.damage;
            _view.damageCanvas.addDamegeNumber(_defender, loc1, _attack.hitState);
            a24.tween.Tween24.parallel(_view.bombLayer.getTweenBomb(_defender, 0, "EXPLOSION_TYPE:MIDLLE", new flash.geom.Point(160 / 4, 0)), _defender.banner.getTweenDamage(_defender.nowHP, _defender.getMaxHp(), battle.util.BattleUtil.isShield(loc1)), a24.tween.Tween24.parallel(_view.bombLayer.getTweenBomb(_defender, loc1), _view.damageCanvas.getTweenAnimation()).delay(0.5), _attacker.banner.getTweenDefaultPos().delay(0.6)).onComplete(_phaseEnd).play();
            return;
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            _attacker = _defender = null;
            super._phaseEnd();
            return;
        }

        private var _attacker:battle.vo.BattleShipData;

        private var _defender:battle.vo.BattleShipData;

        private var _slotitemID:int;

        private var _isFriend:Boolean;
    }
}


//        class PhaseTorpedo
package battle.phase.attack
{
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.events.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.attack.eff.*;
    import battle.util.*;
    import battle.views.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;

    public class PhaseTorpedo extends battle.phase.attack.PhaseAttackBase
    {
        public function PhaseTorpedo(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.AttackData, arg4:Boolean)
        {
            super(arg1, arg2, arg3, arg4);
            _attacker = arg3.attacker;
            _defender = arg3.defender;
            _slotitemID = arg3.slotitemMasterID;
            _isFriend = _attacker is battle.vo.FriendShipData;
            return;
        }

        public override function start():void
        {
            var loc2:*=null;
            var loc1:*=new battle.display.cutin.Cutin(_isFriend, _isNight);
            loc1.addEventListener("ShipVoiceEvent::VOICE", _handlePlayVoice);
            if (_attack.hasShield)
            {
                loc2 = a24.tween.Tween24.wait(0);
            }
            else
            {
                loc2 = _attack.defender.banner.getTweenDefendEffect();
            }
            _additionalEff();
            a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[通常攻撃-魚雷] " + _attack), loc1.getTweenInitialize(_attacker, _attack.slotitemMasterID, 8), a24.tween.Tween24.addChild(_view.cutinLayer, loc1), loc1.getTween()).onComplete(_phaseShoot).play();
            return;
        }

        private function _additionalEff():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (_attack.uchibiFlg)
            {
                loc1 = new battle.phase.attack.eff.PhaseUchibiEff(_view, _data, _attack, _isNight);
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc1.start)).play();
            }
            else if (_attack.daihatsuFlg)
            {
                loc2 = new battle.phase.attack.eff.PhaseDaihatsuEff(_view, _data, _attack, _isNight);
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc2.start)).play();
            }
            return;
        }

        private function _phaseShoot():void
        {
            var loc1:*=new battle.views.effects.torpedo.TorpedoCanvas(0);
            loc1.reserveGyorai(_attacker, _defender);
            a24.tween.Tween24.serial(_attacker.banner.getTweenGyoraiShoot(), _view.torpedoLayer.getTweenRaigeki(loc1)).onComplete(_phaseDamageEffect).play();
            return;
        }

        private function _phaseDamageEffect():void
        {
            var loc1:*=_attack.damage;
            _view.damageCanvas.addDamegeNumber(_defender, loc1, _attack.hitState);
            a24.tween.Tween24.parallel(_defender.banner.getTweenDamage(_defender.nowHP, _defender.getMaxHp(), battle.util.BattleUtil.isShield(loc1)), _view.damageCanvas.getTweenAnimation(), _view.bombLayer.getTweenBomb(_defender, loc1), _attacker.banner.getTweenDefaultPos().delay(0.1)).onComplete(_phaseEnd).play();
            return;
        }

        private function _handlePlayVoice(arg1:battle.events.ShipVoiceEvent):void
        {
            if (_isNight != false)
            {
                _playVoiceInCutinAtNight(arg1.ship);
            }
            else
            {
                _playVoiceInCutin(arg1.ship);
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            _attack = null;
            _attacker = _defender = null;
            super._phaseEnd();
            return;
        }

        private var _attacker:battle.vo.BattleShipData;

        private var _defender:battle.vo.BattleShipData;

        private var _slotitemID:int;

        private var _isFriend:Boolean;
    }
}


//      package boku
//        class PhaseBokuInitialize
package battle.phase.boku
{
    import a24.tween.*;
    import battle.*;
    import battle.models.*;
    import battle.phase.*;
    import battle.views.*;
    import battle.views.cutins.*;
    import battle.vo.*;
    import common.*;
    import common.debug.*;
    import common.util.*;
    import flash.display.*;
    import manager.*;
    import res.battle.images.*;

    public class PhaseBokuInitialize extends battle.phase.PhaseInitialize
    {
        public function PhaseBokuInitialize(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            common.debug.Debug.log("[Phase 防空 Initialize] - start");
            common.util.SoundUtil.VOICE_MAX_SIDE_BY_SIDE = 100;
            var loc2:*=AppFacade.root.getDebugManager();
            if (!(loc2 == null) && !loc2.isEmulate)
            {
                loc2.setBattleEmulateData(_data.baseData.createObject());
            }
            var loc1:*=common.util.Util.createImageResourceWithCentering(res.battle.images.ImgTextStartBattle);
            battle.vo.BattleShipData.isPractice = false;
            _view.bgLayer.setBackground();
            _data.setCommonData(_data.baseData.getBoukuuData());
            _data.setDayData(null, _data.baseData.getBoukuuData());
            a24.tween.Tween24.serial(a24.tween.Tween24.func(_view.shutter.close, 0), a24.tween.Tween24.prop(loc1).alpha(0).xy(common.Consts.CENTER_W, common.Consts.CENTER_H), a24.tween.Tween24.addChild(_view.topLayer, loc1), a24.tween.Tween24.tween(loc1, 0.15).alpha(1)).onComplete(_phaseLoadShipResource, loc1).play();
            return;
        }

        protected override function _phasePreBattle(arg1:flash.display.Sprite):void
        {
            var txtImg:flash.display.Sprite;
            var hasBossInsert:Boolean;
            var showRaderFTween:a24.tween.Tween24;
            var showRaderETween:a24.tween.Tween24;
            var insertO:Object;
            var cutin:battle.views.cutins.BossInsertCutin;
            var voiceTween:a24.tween.Tween24;

            var loc1:*;
            txtImg = arg1;
            common.debug.Debug.log("[Phase 防空 Initialize] - PreBattle");
            hasBossInsert = false;
            showRaderFTween = _view.raderLayer.getTweenShowF(_data);
            showRaderETween = _view.raderLayer.getTweenShowE(_data.combatData.getFormationID_e());
            _view.bannerLayer.friends.instantEnter();
            _view.bannerLayer.enemys.instantEnter();
            battle.BattleConsts.initEnemyVoice(_data);
            insertO = battle.BattleConsts.isBossInsert(_data);
            if (insertO == null)
            {
                voiceTween = a24.tween.Tween24.wait(0);
                if (_data.baseData.isNightDayBattle() || _data.baseData.isNightOnlyBattle())
                {
                };
                a24.tween.Tween24.serial(a24.tween.Tween24.tween(txtImg, 0.2).alpha(0).$$x(-82), a24.tween.Tween24.removeChild(txtImg), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(_view.shutter, "ShutterView::EVENT_OPENED_COMPLETE"), a24.tween.Tween24.func(_view.shutter.open)), voiceTween, a24.tween.Tween24.parallel(a24.tween.Tween24.func(showRaderFTween.play), a24.tween.Tween24.func(showRaderETween.play)), a24.tween.Tween24.func(function ():void
                {
                    if (_data.preSoundClass != null)
                    {
                        common.util.SoundUtil.playBGM("MAIN_BGM", new _data.preSoundClass());
                    }
                    return;
                })).onComplete(_phaseEnd).play()
            }
            else
            {
                cutin = new battle.views.cutins.BossInsertCutin();
                a24.tween.Tween24.serial(a24.tween.Tween24.tween(txtImg, 0.2).alpha(0).$$x(-82), a24.tween.Tween24.removeChild(txtImg), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(_view.shutter, "ShutterView::EVENT_OPENED_COMPLETE"), a24.tween.Tween24.func(_view.shutter.open)), a24.tween.Tween24.func(function ():void
                {
                    if (_data.preSoundClass != null)
                    {
                        common.util.SoundUtil.playBGM("MAIN_BGM", new _data.preSoundClass());
                    }
                    return;
                }), cutin.getTweenInitialize(insertO), cutin.getTween(_view.cutinLayer), a24.tween.Tween24.parallel(a24.tween.Tween24.func(showRaderFTween.play), a24.tween.Tween24.func(showRaderETween.play))).onComplete(_phaseShowHPGauge).play()
            }
            return;
        }
    }
}


//      package combined
//        class PhaseCombinedAerialWarfare
package battle.phase.combined
{
    import battle.models.*;
    import battle.phase.*;
    import battle.phase.day.*;
    import battle.phase.extra.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;

    public class PhaseCombinedAerialWarfare extends battle.phase.PhaseDayNightBase
    {
        public function PhaseCombinedAerialWarfare(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, false);
            return;
        }

        public override function start():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _initHPs_e = _data.getHPs_e();
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = battle.vo.EnemyShipData(_data.enemyShips[loc2]);
                if (loc1 != null)
                {
                    loc1.clearPrePlayedVoiceFlg();
                }
                ++loc2;
            }
            _phaseSakuteki();
            return;
        }

        private function _phaseSakuteki():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 索敵]");
            var loc1:*=new battle.phase.day.PhaseSakuteki(_view, _data);
            loc1.getTween().onComplete(_phaseRation).play();
            return;
        }

        private function _phaseRation():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 戦闘糧食]");
            var loc1:*=new battle.phase.extra.PhaseRation(_view, _data, _isNight);
            loc1.getTween().onComplete(_phaseAirUnit).play();
            return;
        }

        private function _phaseAirUnit():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 基地航空隊支援]");
            var loc1:*=new battle.phase.day.PhaseAirUnit(_view, _data);
            loc1.getTween().onComplete(_phaseKoukuu).play();
            return;
        }

        private function _phaseKoukuu():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 航空戦]");
            var loc1:*=new battle.phase.combined.PhaseKouku(_view, _data, true);
            loc1.getTween().onComplete(_phaseShien).play();
            return;
        }

        private function _phaseShien():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 支援攻撃]");
            var loc1:*=new battle.phase.day.PhaseShien(_view, _data);
            loc1.getTween().onComplete(_phaseFormation).play();
            return;
        }

        private function _phaseFormation():void
        {
            common.debug.Debug.log("[Phase 陣形演出]");
            var loc1:*=new battle.phase.day.PhaseFormation(_view, _data);
            loc1.getTween().onComplete(_phaseKoukuu2).play();
            return;
        }

        private function _phaseKoukuu2():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 航空戦その2]");
            var loc1:*=new battle.phase.combined.PhaseKouku(_view, _data, false, "2");
            loc1.getTween().onComplete(_phaseEnding).play();
            return;
        }

        private function _phaseEnding():void
        {
            common.debug.Debug.log("[Phase 最終処理]");
            var loc1:*=new battle.phase.day.PhaseEnding(_view, _data, _initHPs_e);
            loc1.getTween().onComplete(_phaseEnd).play();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//        class PhaseCombinedNightCombat
package battle.phase.combined
{
    import battle.models.*;
    import battle.phase.*;
    import battle.phase.night.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;

    public class PhaseCombinedNightCombat extends battle.phase.PhaseDayNightBase
    {
        public function PhaseCombinedNightCombat(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, true);
            return;
        }

        public override function start():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _initHPs_e = _data.getHPs_e();
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = battle.vo.EnemyShipData(_data.enemyShips[loc2]);
                if (loc1 != null)
                {
                    loc1.clearPrePlayedVoiceFlg();
                }
                ++loc2;
            }
            common.debug.Debug.log("[Phase2 夜戦]");
            _view.bgLayer.setBackground(true);
            if (!(_data.baseData.isNightOnlyBattle() || _data.baseData.isNightDayBattle()))
            {
                _view.bannerLayer.friends.tweenDefaultPositionAll();
                _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
                _view.bannerLayer.enemys.tweenDefaultPositionAll();
            }
            _phaseInit();
            return;
        }

        private function _phaseInit():void
        {
            common.debug.Debug.log("[Phase2_1 初期化]");
            _view.upperBar.show(13);
            var loc1:*=new battle.phase.night.PhaseOpening(_view, _data);
            loc1.getTween().onComplete(_phaseAttack).play();
            return;
        }

        private function _phaseAttack():void
        {
            common.debug.Debug.log("[Phase2_2 攻撃]");
            var loc1:*=new battle.phase.combined.PhaseHougekiNight(_view, _data);
            loc1.getTween().onComplete(_phaseEnding).play();
            return;
        }

        private function _phaseEnding():void
        {
            common.debug.Debug.log("[Phase2_3 終了処理]");
            _view.upperBar.hide(13);
            var loc1:*=new battle.phase.night.PhaseEnding(_view, _data, _initHPs_e);
            loc1.getTween().onComplete(_phaseEnd).play();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//        class PhaseDayCombatKidou
package battle.phase.combined
{
    import battle.models.*;
    import battle.phase.*;
    import battle.phase.day.*;
    import battle.phase.extra.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;

    public class PhaseDayCombatKidou extends battle.phase.PhaseDayNightBase
    {
        public function PhaseDayCombatKidou(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, false);
            return;
        }

        public override function start():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _initHPs_e = _data.getHPs_e();
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = battle.vo.EnemyShipData(_data.enemyShips[loc2]);
                if (loc1 != null)
                {
                    loc1.clearPrePlayedVoiceFlg();
                }
                ++loc2;
            }
            _phaseSakuteki();
            return;
        }

        private function _phaseSakuteki():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 索敵]");
            var loc1:*=new battle.phase.day.PhaseSakuteki(_view, _data);
            loc1.getTween().onComplete(_phaseRation).play();
            return;
        }

        private function _phaseRation():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 戦闘糧食]");
            var loc1:*=new battle.phase.extra.PhaseRation(_view, _data, _isNight);
            loc1.getTween().onComplete(_phaseAirUnit).play();
            return;
        }

        private function _phaseAirUnit():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 基地航空隊支援]");
            var loc1:*=new battle.phase.day.PhaseAirUnit(_view, _data);
            loc1.getTween().onComplete(_phaseKoukuu).play();
            return;
        }

        private function _phaseKoukuu():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 航空戦]");
            var loc1:*=new battle.phase.combined.PhaseKouku(_view, _data, true);
            loc1.getTween().onComplete(_phaseShien).play();
            return;
        }

        private function _phaseShien():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 支援攻撃]");
            var loc1:*=new battle.phase.day.PhaseShien(_view, _data);
            loc1.getTween().onComplete(_phaseKaimaku).play();
            return;
        }

        private function _phaseKaimaku():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 開幕戦]");
            var loc1:*=new battle.phase.combined.PhaseKaimaku_F2_E1(_view, _data);
            loc1.getTween().onComplete(_phaseHougeki1).play();
            return;
        }

        private function _phaseHougeki1():void
        {
            common.debug.Debug.log("[Phase 砲撃戦 -- 随伴護衛艦隊 vs 敵本隊]");
            var loc1:*=new battle.phase.combined.PhaseHougeki_F2_E1(_view, _data, 1, 1, true);
            loc1.getTween().onComplete(_phaseRaigeki).play();
            return;
        }

        private function _phaseRaigeki():void
        {
            common.debug.Debug.log("[Phase 雷撃戦]");
            var loc1:*=new battle.phase.combined.PhaseRaigeki_F2_E1(_view, _data);
            loc1.getTween().onComplete(_phaseHougeki2).play();
            return;
        }

        private function _phaseHougeki2():void
        {
            common.debug.Debug.log("[Phase 砲撃戦 -- 機動部隊本体 vs 敵本隊]");
            var loc1:*=new battle.phase.combined.PhaseHougeki_F1_E1(_view, _data, 2, 3, false);
            loc1.getTween().onComplete(_phaseEnding).play();
            return;
        }

        private function _phaseEnding():void
        {
            common.debug.Debug.log("[Phase 最終処理]");
            var loc1:*=new battle.phase.day.PhaseEnding(_view, _data, _initHPs_e);
            loc1.getTween().onComplete(_phaseEnd).play();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//        class PhaseDayCombatSuijo
package battle.phase.combined
{
    import battle.models.*;
    import battle.phase.*;
    import battle.phase.day.*;
    import battle.phase.extra.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;

    public class PhaseDayCombatSuijo extends battle.phase.PhaseDayNightBase
    {
        public function PhaseDayCombatSuijo(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, false);
            return;
        }

        public override function start():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _initHPs_e = _data.getHPs_e();
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = battle.vo.EnemyShipData(_data.enemyShips[loc2]);
                if (loc1 != null)
                {
                    loc1.clearPrePlayedVoiceFlg();
                }
                ++loc2;
            }
            _phaseSakuteki();
            return;
        }

        private function _phaseSakuteki():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 索敵]");
            var loc1:*=new battle.phase.day.PhaseSakuteki(_view, _data);
            loc1.getTween().onComplete(_phaseRation).play();
            return;
        }

        private function _phaseRation():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 戦闘糧食]");
            var loc1:*=new battle.phase.extra.PhaseRation(_view, _data, _isNight);
            loc1.getTween().onComplete(_phaseAirUnit).play();
            return;
        }

        private function _phaseAirUnit():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 基地航空隊支援]");
            var loc1:*=new battle.phase.day.PhaseAirUnit(_view, _data);
            loc1.getTween().onComplete(_phaseKoukuu).play();
            return;
        }

        private function _phaseKoukuu():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 航空戦]");
            var loc1:*=new battle.phase.combined.PhaseKouku(_view, _data, true);
            loc1.getTween().onComplete(_phaseShien).play();
            return;
        }

        private function _phaseShien():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 支援攻撃]");
            var loc1:*=new battle.phase.day.PhaseShien(_view, _data);
            loc1.getTween().onComplete(_phaseKaimaku).play();
            return;
        }

        private function _phaseKaimaku():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 開幕戦]");
            var loc1:*=new battle.phase.combined.PhaseKaimaku_F2_E1(_view, _data);
            loc1.getTween().onComplete(_phaseHougeki1).play();
            return;
        }

        private function _phaseHougeki1():void
        {
            common.debug.Debug.log("[Phase 砲撃戦 -- 水上部隊本体 vs 敵本隊]");
            var loc1:*=new battle.phase.combined.PhaseHougeki_F1_E1(_view, _data, 1, 2, true);
            loc1.getTween().onComplete(_phaseHougeki2).play();
            return;
        }

        private function _phaseHougeki2():void
        {
            common.debug.Debug.log("[Phase 砲撃戦 -- 随伴護衛艦隊 vs 敵本隊]");
            var loc1:*=new battle.phase.combined.PhaseHougeki_F2_E1(_view, _data, 3, 3, false);
            loc1.getTween().onComplete(_phaseRaigeki).play();
            return;
        }

        private function _phaseRaigeki():void
        {
            common.debug.Debug.log("[Phase 雷撃戦]");
            var loc1:*=new battle.phase.combined.PhaseRaigeki_F2_E1(_view, _data);
            loc1.getTween().onComplete(_phaseEnding).play();
            return;
        }

        private function _phaseEnding():void
        {
            common.debug.Debug.log("[Phase 最終処理]");
            var loc1:*=new battle.phase.day.PhaseEnding(_view, _data, _initHPs_e);
            loc1.getTween().onComplete(_phaseEnd).play();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//        class PhaseHougekiNight
package battle.phase.combined
{
    import __AS3__.vec.*;
    import battle.models.*;
    import battle.phase.night.*;
    import battle.views.*;

    public class PhaseHougekiNight extends battle.phase.night.PhaseAttack
    {
        public function PhaseHougekiNight(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            _view.bannerLayer.friends.visible = false;
            _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
            _view.bannerLayer.enemys.tweenDefaultPositionAll();
            _phaseAttack();
            return;
        }

        protected override function _phaseAttack():void
        {
            var loc1:*=_data.combatDataN.hougekiData.createAttackArray(_data.friendShips_combined, _data.enemyShips);
            phaseAttackTurn(loc1);
            return;
        }
    }
}


//        class PhaseHougeki_F1_E1
package battle.phase.combined
{
    import battle.models.*;
    import battle.phase.day.*;
    import battle.views.*;

    public class PhaseHougeki_F1_E1 extends battle.phase.day.PhaseHougeki
    {
        public function PhaseHougeki_F1_E1(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:int, arg4:int, arg5:Boolean)
        {
            super(arg1, arg2);
            phase_name = "砲撃戦(連合艦隊戦 - 機動部隊本隊vs敵本隊)";
            _stage_start = arg3;
            _stage_end = arg4;
            _need_formation_cutin = arg5;
            return;
        }

        protected override function _preInit():void
        {
            _view.bannerLayer.friends.tweenDefaultPositionAll();
            _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
            return;
        }

        protected override function _phaseHougeki():void
        {
            if (_need_formation_cutin)
            {
                _phaseHougekiWithFormationCutin();
            }
            else
            {
                _phaseHougekiWithoutFormationCutin();
            }
            return;
        }

        private var _need_formation_cutin:Boolean;
    }
}


//        class PhaseHougeki_F2_E1
package battle.phase.combined
{
    import __AS3__.vec.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.day.*;
    import battle.views.*;

    public class PhaseHougeki_F2_E1 extends battle.phase.day.PhaseHougeki
    {
        public function PhaseHougeki_F2_E1(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:int, arg4:int, arg5:Boolean)
        {
            super(arg1, arg2);
            phase_name = "砲撃戦(連合艦隊戦 - 随伴護衛艦隊vs敵本隊)";
            _stage_start = arg3;
            _stage_end = arg4;
            _need_formation_cutin = arg5;
            return;
        }

        protected override function _preInit():void
        {
            _view.bannerLayer.friends.tweenDefaultPositionAll();
            _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
            return;
        }

        protected override function _phaseHougeki():void
        {
            if (_need_formation_cutin)
            {
                _phaseHougekiWithFormationCutin();
            }
            else
            {
                _phaseHougekiWithoutFormationCutin();
            }
            return;
        }

        protected override function __phaseHougeki(arg1:int):void
        {
            var loc1:*=_data.combatDataD.hougekiData;
            var loc2:*=loc1.createAttackArray(arg1, _data.friendShips_combined, _data.enemyShips);
            phaseHougekiTurn(loc2, arg1);
            return;
        }

        private var _need_formation_cutin:Boolean;
    }
}


//        class PhaseKaimaku_F2_E1
package battle.phase.combined
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.views.*;
    import common.debug.*;

    public class PhaseKaimaku_F2_E1 extends battle.phase.combined.PhaseRaigeki_F2_E1
    {
        public function PhaseKaimaku_F2_E1(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            var formationE:int;
            var raderTween:a24.tween.Tween24;

            var loc1:*;
            if (_data.combatDataD.kaimakuData.exist())
            {
                common.debug.Debug.log("-- [開幕魚雷戦] --");
                if (_view.bannerLayer.enemys.isEnter())
                {
                    _view.bannerLayer.friends.tweenDefaultPositionAll();
                    _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
                    _view.bannerLayer.enemys.tweenDefaultPositionAll();
                    _phaseKaimaku();
                }
                else
                {
                    formationE = _data.combatData.getFormationID_e();
                    raderTween = _view.raderLayer.getTweenShowE(formationE, _data.countShips_e());
                    a24.tween.Tween24.parallel(_view.infoLayer.getTween(5), a24.tween.Tween24.func(raderTween.play), _view.bannerLayer.enemys.getTweenEnter()).onComplete(function ():void
                    {
                        _view.bannerLayer.friends.tweenDefaultPositionAll();
                        _phaseKaimaku();
                        return;
                    }).play()
                }
            }
            else
            {
                common.debug.Debug.log("[開幕魚雷戦] - 無し");
                _phaseEnd();
            }
            return;
        }

        private function _phaseKaimaku():void
        {
            var loc1:*=_data.combatDataD.kaimakuData;
            var loc2:*=loc1.createAttackArray(_data.friendShips_combined, _data.enemyShips);
            common.debug.Debug.log(loc2.join("\n"));
            _phaseShoot(loc2);
            return;
        }

        protected override function _phasePreEnd():void
        {
            _phaseEnd();
            return;
        }
    }
}


//        class PhaseKouku
package battle.phase.combined
{
    import __AS3__.vec.*;
    import battle.display.main.plane.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.day.*;
    import battle.views.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;
    import flash.geom.*;

    public class PhaseKouku extends battle.phase.day.PhaseKouku
    {
        public function PhaseKouku(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:Boolean, arg4:String="")
        {
            super(arg1, arg2, arg3, arg4);
            return;
        }

        protected override function _plane_Gyorai():void
        {
            var loc9:*=0;
            var loc7:*=null;
            var loc3:*=null;
            var loc6:*=null;
            var loc8:*=null;
            var loc2:*=null;
            if (!_kk.existStage3())
            {
                return;
            }
            common.debug.Debug.log("[航空戦] 魚雷発射 ");
            var loc10:*=new battle.views.effects.torpedo.AerialTorpedoCanvas();
            var loc1:*=[];
            var loc5:*=[];
            var loc4:*=[];
            loc9 = 0;
            while (loc9 < 6)
            {
                if (_kk.getStage3Raigeki(loc9, false))
                {
                    if (loc7 = _canvas.getRandomPlane_e())
                    {
                        loc3 = loc7.getGlobalPos();
                        loc6 = _data.friendShips[loc9];
                        loc10.reserveTorpedoToShip(loc3, loc6);
                        loc1.push(loc6);
                    }
                }
                if (_kk.getStage3Raigeki(loc9, false, true))
                {
                    if (loc7 = _canvas.getRandomPlane_e())
                    {
                        loc3 = loc7.getGlobalPos();
                        loc6 = _data.friendShips_combined[loc9];
                        loc10.reserveTorpedoToShip(loc3, loc6);
                        loc5.push(loc6);
                    }
                }
                if (_kk.getStage3Raigeki(loc9, true))
                {
                    if (loc8 = _canvas.getRandomPlane_f())
                    {
                        loc2 = loc8.getGlobalPos();
                        loc6 = _data.enemyShips[loc9];
                        loc10.reserveTorpedoToShip(loc2, loc6);
                        loc4.push(loc6);
                    }
                }
                ++loc9;
            }
            common.debug.Debug.log("魚雷被弾する自艦：" + loc1);
            common.debug.Debug.log("魚雷被弾する護衛艦：" + loc5);
            common.debug.Debug.log("魚雷被弾する敵艦：" + loc4);
            _view.torpedoLayer.getTweenAerialTorpedo(loc10).play();
            return;
        }

        protected override function _plane_Bakugeki():void
        {
            if (!_kk.existStage3())
            {
                return;
            }
            var loc3:*=_kk.isStage3Bakugeki(true);
            var loc2:*=_kk.isStage3Bakugeki(true, true);
            var loc1:*=_kk.isStage3Bakugeki(false);
            common.debug.Debug.log("[航空戦] 爆撃 ");
            common.debug.Debug.log("味方側 艦隊の爆撃：" + (loc3 ? "有" : "無"));
            common.debug.Debug.log("味方側 随伴護衛艦隊の爆撃：" + (loc2 ? "有" : "無"));
            common.debug.Debug.log("相手側 艦隊の爆撃：" + (loc1 ? "有" : "無"));
            _view.bombLayer.getTweenBombs(__AS3__.vec.Vector.<Boolean>([loc3, loc1, loc2])).play();
            return;
        }

        protected override function _setDmgTweens_f(arg1:Array, arg2:Array):void
        {
            var loc4:*=0;
            var loc1:*=null;
            var loc2:*=null;
            super._setDmgTweens_f(arg1, arg2);
            var loc3:*;
            (loc3 = _data.combatDataD.koukuuData.createAttacks_e(_data.friendShips_combined, true)).length ? common.debug.Debug.log("*自軍側 随伴護衛艦隊 航空戦被弾") : null;
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                common.debug.Debug.log(loc3[loc4]);
                loc1 = loc3[loc4];
                loc2 = loc1.defender;
                _view.damageCanvas.addDamegeNumber(loc1.defender, loc1.damage, loc1.hitState);
                arg1.push(loc2.banner.getTweenDamage(loc2.nowHP, loc2.getMaxHp(), loc1.hasShield));
                arg2.push(_view.bombLayer.getTweenBomb(loc1.defender, loc1.damage));
                if (_kk.getStage3Raigeki(loc1.defender.index, false, true))
                {
                    arg2.push(_view.bombLayer.getTweenBomb(loc2, loc1.damage, "EXPLOSION_TYPE:MIZUHASIRA"));
                }
                ++loc4;
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            common.debug.Debug.log("PHASE KOUKU END " + _data_suffix);
            super._phaseEnd();
            return;
        }
    }
}


//        class PhaseRaigeki_F2_E1
package battle.phase.combined
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.day.*;
    import battle.views.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;

    public class PhaseRaigeki_F2_E1 extends battle.phase.day.PhaseRaigeki
    {
        public function PhaseRaigeki_F2_E1(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            phase_name = "[雷撃戦(連合艦隊戦 - 随伴護衛艦隊vs敵本隊)]";
            super(arg1, arg2);
            return;
        }

        protected override function _preInit():void
        {
            _view.bannerLayer.friends.tweenDefaultPositionAll();
            _view.bannerLayer.enemys.tweenDefaultPositionAll();
            _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
            return;
        }

        protected override function _phaseRaigeki():void
        {
            var loc1:*=_data.combatDataD.raigekiData;
            var loc2:*=loc1.createAttackArray(_data.friendShips_combined, _data.enemyShips);
            common.debug.Debug.log(loc2.join("\n"));
            _phaseShoot(loc2);
            return;
        }

        protected override function _createTorpedoCanvas():battle.views.effects.torpedo.TorpedoCanvas
        {
            return new battle.views.effects.torpedo.TorpedoCanvas(1);
        }

        protected override function _getTweenPlayVoice(arg1:int):a24.tween.Tween24
        {
            var loc2:*=_data.friendShips_combined[arg1];
            var loc1:*=loc2.getCharaID();
            return a24.tween.Tween24.func(common.util.SoundUtil.playVoiceAtRandom, loc1, [15, 16], [50, 50]);
        }
    }
}


//      package day
//        class PhaseAerialWarfare
package battle.phase.day
{
    import battle.models.*;
    import battle.phase.*;
    import battle.phase.extra.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;

    public class PhaseAerialWarfare extends battle.phase.PhaseDayNightBase
    {
        public function PhaseAerialWarfare(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, false);
            return;
        }

        public override function start():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _initHPs_e = _data.getHPs_e();
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = battle.vo.EnemyShipData(_data.enemyShips[loc2]);
                if (loc1 != null)
                {
                    loc1.clearPrePlayedVoiceFlg();
                }
                ++loc2;
            }
            _phaseSakuteki();
            return;
        }

        private function _phaseSakuteki():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 索敵]");
            var loc1:*=new battle.phase.day.PhaseSakuteki(_view, _data);
            loc1.getTween().onComplete(_phaseRation).play();
            return;
        }

        private function _phaseRation():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 戦闘糧食]");
            var loc1:*=new battle.phase.extra.PhaseRation(_view, _data, _isNight);
            loc1.getTween().onComplete(_phaseAirUnit).play();
            return;
        }

        private function _phaseAirUnit():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 基地航空隊支援]");
            var loc1:*=new battle.phase.day.PhaseAirUnit(_view, _data);
            loc1.getTween().onComplete(_phaseKoukuu).play();
            return;
        }

        private function _phaseKoukuu():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 航空戦]");
            var loc1:*=new battle.phase.day.PhaseKouku(_view, _data, true);
            loc1.getTween().onComplete(_phaseShien).play();
            return;
        }

        private function _phaseShien():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 支援攻撃]");
            var loc1:*=new battle.phase.day.PhaseShien(_view, _data);
            loc1.getTween().onComplete(_phaseFormation).play();
            return;
        }

        private function _phaseFormation():void
        {
            common.debug.Debug.log("[Phase 陣形演出]");
            var loc1:*=new battle.phase.day.PhaseFormation(_view, _data);
            loc1.getTween().onComplete(_phaseKoukuu2).play();
            return;
        }

        private function _phaseKoukuu2():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 航空戦その2]");
            var loc1:*=new battle.phase.day.PhaseKouku(_view, _data, false, "2");
            loc1.getTween().onComplete(_phaseEnding).play();
            return;
        }

        private function _phaseEnding():void
        {
            common.debug.Debug.log("[Phase 最終処理]");
            var loc1:*=new battle.phase.day.PhaseEnding(_view, _data, _initHPs_e);
            loc1.getTween().onComplete(_phaseEnd).play();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//        class PhaseAirUnit
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.main.*;
    import battle.display.main.banner.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.util.*;
    import battle.views.*;
    import battle.views.airunit.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.geom.*;

    public class PhaseAirUnit extends battle.phase.PhaseDayNightBase
    {
        public function PhaseAirUnit(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, false);
            return;
        }

        public override function start():void
        {
            _air_unit_support_data = _data.combatDataD.aurUnitsSupportData;
            if (_air_unit_support_data == null || _air_unit_support_data.isExist() == false)
            {
                _phaseEnd();
            }
            else
            {
                common.debug.Debug.log("[Phase Start] 基地航空隊支援");
                _view.upperBar.show(3);
                if (_data.baseData.getBoukuuData() == null)
                {
                    a24.tween.Tween24.wait(0.6).onComplete(_showOpeningTelop).play();
                }
                else
                {
                    a24.tween.Tween24.wait(1.6).onComplete(_phaseFlyPlane).play();
                }
            }
            return;
        }

        private function _showOpeningTelop():void
        {
            var loc1:*=new battle.views.airunit.OpeningTelop();
            loc1.initialize();
            _view.addChild(loc1);
            a24.tween.Tween24.funcAndWaitEvent(loc1, "complete", loc1.play).onComplete(_phaseFlyPlane).play();
            return;
        }

        private function _phaseFlyPlane():void
        {
            var loc1:*=0;
            var loc2:*=_air_unit_support_data.airUnits;
            if (_current_aurunit_data != null)
            {
                loc1 = loc2.indexOf(_current_aurunit_data);
                if (loc1 == loc2.length - 1)
                {
                    _phaseEnd();
                    return;
                }
                _current_aurunit_data = loc2[loc1 + 1];
            }
            else
            {
                _current_aurunit_data = loc2[0];
            }
            _canvas = new battle.views.airunit.FlyingAirUnitCanvas(_data, _current_aurunit_data);
            _mainTween = a24.tween.Tween24.serial(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_hikouki2), a24.tween.Tween24.addChild(_view.contentsLayer, _canvas), a24.tween.Tween24.parallel(_canvas.getTween(_data), a24.tween.Tween24.func(_showResult).delay(0.766666666667), a24.tween.Tween24.func(_plane_AirAirAttack).delay(0.766666666667), a24.tween.Tween24.func(_plane_AirAirBomb).delay(1.03333333333), a24.tween.Tween24.func(_plane_AntiAirCraft).delay(1.2), a24.tween.Tween24.func(_plane_AntiAirCraftBomb).delay(1.36666666667), a24.tween.Tween24.func(_plane_Gyorai).delay(1.7), a24.tween.Tween24.func(_plane_Bakugeki).delay(2.96666666667), a24.tween.Tween24.func(_plane_Damage).delay(3.33333333333))).onComplete(_phaseGekichinCutin, _loop);
            _mainTween.play();
            return;
        }

        private function _loop():void
        {
            _view.contentsLayer.removeChild(_canvas);
            _canvas = null;
            _mainTween = null;
            _phaseFlyPlane();
            return;
        }

        private function _showResult():void
        {
            var loc3:*=new battle.views.airunit.AirUnitSupportResult();
            loc3.x = 800 / 2;
            loc3.y = 480 - 60;
            var loc2:*=_current_aurunit_data.getFriendStage1StartCount();
            var loc1:*=_current_aurunit_data.getFriendStage2EndCount();
            loc3.initialize(loc2, loc1);
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.cutinLayer, loc3), a24.tween.Tween24.funcAndWaitEvent(loc3, "complete", loc3.start), a24.tween.Tween24.func(loc3.dispose), a24.tween.Tween24.removeChild(loc3)).play();
            return;
        }

        private function _plane_AirAirAttack():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < _canvas.trio_f.length)
            {
                _canvas.trio_f[loc1].attack(_data);
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < _canvas.trio_e.length)
            {
                _canvas.trio_e[loc1].attack(_data);
                ++loc1;
            }
            return;
        }

        private function pauseAnimation():void
        {
            if (!(_mainTween == null) && _mainTween.pausing == false)
            {
                _canvas.pause();
                _mainTween.pause();
            }
            return;
        }

        private function resumeAnimation():void
        {
            if (!(_mainTween == null) && _mainTween.pausing == true)
            {
                _canvas.play();
                _mainTween.play();
            }
            return;
        }

        private function _plane_AirAirBomb():void
        {
            _canvas.changeStateAfterStage1();
            return;
        }

        private function _plane_AntiAirCraft():void
        {
            var loc7:*=0;
            var loc3:*=null;
            var loc6:*=null;
            var loc2:*=0;
            var loc1:*=null;
            common.debug.Debug.log("[航空戦] 対空砲火 ");
            if (_canvas.getPowerStage1End_e() <= 0)
            {
                return;
            }
            var loc4:*=_data.hasAntiAircraftAbility_f();
            common.debug.Debug.log("自軍の対空能力：" + loc4);
            if (_current_aurunit_data.isExistStage2() == false)
            {
                common.debug.Debug.log("対空能力無し");
                return;
            }
            var loc5:*=[a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_shoot)];
            loc7 = 0;
            while (loc7 < 6)
            {
                loc3 = _data.friendShips[loc7];
                if (loc3 != null)
                {
                    loc6 = loc3.banner;
                    loc2 = loc4[loc7];
                    loc1 = "";
                    if (loc2 > 0)
                    {
                        loc5.push(loc6.getTweenAA(loc2).delay(Math.random() * 0.5));
                        loc5.push(loc6.getTweenAttackPos());
                        loc1 = loc1 + (" " + loc2 + "番の対空攻撃発動 ");
                    }
                    else if ((loc7 == 0 || loc7 == 6) && !battle.util.BattleUtil.isAAAttackable(loc4))
                    {
                        loc5.push(loc6.getTweenAA().delay(Math.random() * 0.5));
                        loc5.push(loc6.getTweenAttackPos());
                        loc1 = loc1 + " デフォルトの対空攻撃発動 ";
                    }
                    if (loc1 != "")
                    {
                        common.debug.Debug.log("" + loc3 + loc1);
                    }
                }
                if (loc4.length == 6 * 2)
                {
                    loc3 = _data.friendShips_combined[loc7];
                    if (loc3 != null)
                    {
                        loc2 = loc4[loc7 + 6];
                        loc1 = "";
                        if (loc2 > 0)
                        {
                            loc5.push(loc3.banner.getTweenAA(loc2).delay(Math.random() * 0.5));
                            loc5.push(loc3.banner.getTweenAttackPos());
                            loc1 = loc1 + (" " + loc2 + "番の対空攻撃発動 ");
                        }
                        else if ((loc7 == 0 || loc7 == 6) && !battle.util.BattleUtil.isAAAttackable(loc4))
                        {
                            loc5.push(loc6.getTweenAA().delay(Math.random() * 0.5));
                            loc5.push(loc6.getTweenAttackPos());
                            loc1 = loc1 + " デフォルトの対空攻撃発動 ";
                        }
                        if (loc1 != "")
                        {
                            common.debug.Debug.log("" + loc3 + loc1);
                        }
                    }
                }
                ++loc7;
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.parallel.apply(null, loc5), _view.bannerLayer.friends.getTweenDefaultPositionAll(), a24.tween.Tween24.ifCase(_data.baseData.isCombinedFriend(), _view.bannerLayer.friends_combined.getTweenDefaultPositionAll(), a24.tween.Tween24.wait(0))).play();
            return;
        }

        private function _plane_AntiAirCraftBomb():void
        {
            _canvas.changeStateAfterStage2();
            return;
        }

        protected function _plane_Gyorai():void
        {
            var loc7:*=0;
            var loc5:*=null;
            var loc2:*=null;
            var loc4:*=null;
            var loc6:*=null;
            var loc1:*=null;
            var loc3:*=null;
            if (_current_aurunit_data.isExistStage3() == false)
            {
                return;
            }
            common.debug.Debug.log("[航空戦] 魚雷発射 ");
            var loc8:*=new battle.views.effects.torpedo.AerialTorpedoCanvas();
            loc7 = 0;
            while (loc7 < 6)
            {
                if (_current_aurunit_data.isReceiveRaigeki_f(loc7) == true)
                {
                    if (loc5 = _canvas.getRandomPlane_e())
                    {
                        loc2 = loc5.getGlobalPos();
                        loc4 = _data.friendShips[loc7];
                        loc8.reserveTorpedoToShip(loc2, loc4);
                        common.debug.Debug.log("\t" + loc4.getName() + "[" + loc7 + "] に魚雷発射");
                    }
                }
                if (_current_aurunit_data.isReceiveRaigeki_e(loc7) == true)
                {
                    if (loc6 = _canvas.getRandomPlane_f())
                    {
                        loc1 = loc6.getGlobalPos();
                        loc3 = _data.enemyShips[loc7];
                        loc8.reserveTorpedoToShip(loc1, loc3);
                        common.debug.Debug.log("\t" + loc3.getName() + "[" + loc7 + "] に魚雷発射");
                    }
                }
                ++loc7;
            }
            _view.torpedoLayer.getTweenAerialTorpedo(loc8).play();
            return;
        }

        protected function _plane_Bakugeki():void
        {
            if (_current_aurunit_data.isExistStage3() == false)
            {
                return;
            }
            var loc2:*=_current_aurunit_data.isActBakugeki_e();
            var loc1:*=_current_aurunit_data.isActBakugeki_f();
            common.debug.Debug.log("[航空戦] 爆撃 ");
            common.debug.Debug.log("自艦隊の爆撃：" + (loc2 ? "有" : "無"));
            common.debug.Debug.log("敵艦隊の爆撃：" + (loc1 ? "有" : "無"));
            _view.bombLayer.getTweenBombs(__AS3__.vec.Vector.<Boolean>([loc2, loc1])).play();
            return;
        }

        private function _plane_Damage():void
        {
            if (_current_aurunit_data.isExistStage3() == false)
            {
                return;
            }
            var loc1:*=_view.damageCanvas;
            var loc2:*=[];
            var loc3:*=[];
            _setDmgTweens_f(loc2, loc3);
            _setDmgTweens_e(loc2, loc3);
            a24.tween.Tween24.parallel(loc1.getTweenAnimation(), loc2, loc3).play();
            return;
        }

        protected function _setDmgTweens_f(arg1:Array, arg2:Array):void
        {
            var loc4:*=0;
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*;
            (loc3 = _current_aurunit_data.createAttacks_e(_data.friendShips)).length ? common.debug.Debug.log("*自軍側 航空戦被弾") : null;
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                common.debug.Debug.log(loc3[loc4]);
                loc1 = loc3[loc4];
                loc2 = loc1.defender;
                _view.damageCanvas.addDamegeNumber(loc1.defender, loc1.damage, loc1.hitState);
                arg1.push(loc2.banner.getTweenDamage(loc2.nowHP, loc2.getMaxHp(), loc1.hasShield));
                arg2.push(_view.bombLayer.getTweenBomb(loc1.defender, loc1.damage));
                if (_current_aurunit_data.isReceiveRaigeki_f(loc1.defender.index))
                {
                    arg2.push(_view.bombLayer.getTweenBomb(loc2, loc1.damage, "EXPLOSION_TYPE:MIZUHASIRA"));
                }
                ++loc4;
            }
            return;
        }

        protected function _setDmgTweens_e(arg1:Array, arg2:Array):void
        {
            var loc4:*=0;
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*;
            (loc3 = _current_aurunit_data.createAttacks_f(_data.enemyShips)).length ? common.debug.Debug.log("*相手側 航空戦被弾") : null;
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                common.debug.Debug.log(loc3[loc4]);
                loc1 = loc3[loc4];
                loc2 = loc1.defender;
                _view.damageCanvas.addDamegeNumber(loc1.defender, loc1.damage, loc1.hitState);
                arg1.push(loc2.banner.getTweenDamage(loc2.nowHP, loc2.getMaxHp(), loc1.hasShield));
                arg2.push(_view.bombLayer.getTweenBomb(loc1.defender, loc1.damage));
                if (_current_aurunit_data.isReceiveRaigeki_e(loc1.defender.index))
                {
                    arg2.push(_view.bombLayer.getTweenBomb(loc2, loc1.damage, "EXPLOSION_TYPE:MIZUHASIRA"));
                }
                ++loc4;
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            common.debug.Debug.log("[Phase End] 基地航空隊支援");
            if (_canvas != null)
            {
                _canvas.finalize();
            }
            _air_unit_support_data = null;
            _current_aurunit_data = null;
            _canvas = null;
            _mainTween = null;
            _view.contentsLayer.removeChildren();
            _view.topLayer.removeChildren();
            _view.cutinLayer.removeChildren();
            _view.upperBar.hide(3);
            a24.tween.Tween24.wait(0.8).onComplete(super(
#error('findrop') _phaseEnd
            )._phaseEnd).play();
            return;
        }

        public const LOG:Boolean=false;

        protected var _air_unit_support_data:battle.models.attack.AirUnitsSupportData;

        protected var _current_aurunit_data:battle.models.attack.AirUnitSupportData;

        protected var _canvas:battle.views.airunit.FlyingAirUnitCanvas;

        protected var _mainTween:a24.tween.Tween24=null;
    }
}


//        class PhaseEnding
package battle.phase.day
{
    import a24.tween.*;
    import battle.models.*;
    import battle.phase.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.events.*;
    import flash.media.*;

    public class PhaseEnding extends battle.phase.PhaseDayNightBase
    {
        public function PhaseEnding(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:Array)
        {
            _initHPs_e = arg3;
            super(arg1, arg2, false);
            return;
        }

        public override function start():void
        {
            _phaseWaitGaugeBomb();
            return;
        }

        private function _phaseWaitGaugeBomb():void
        {
            if (!(_view.hpGaugeLayer.hpGauge == null) && _view.hpGaugeLayer.hpGauge.animateNow == true)
            {
                a24.tween.Tween24.wait(0.5).onComplete(_phaseWaitGaugeBomb).play();
            }
            else
            {
                a24.tween.Tween24.wait(1).onComplete(_phaseBossAgonies).play();
            }
            return;
        }

        private function _phaseBossAgonies():void
        {
            var loc2:*=0;
            var loc1:*=null;
            var loc3:*=battle.vo.EnemyShipData(_data.enemyShips[0]);
            if (loc3.eVoiceID > 0)
            {
                if (loc3.nowHP <= 0 && _initHPs_e[0] > 0)
                {
                    if (!(_view.hpGaugeLayer.hpGauge == null) && _view.hpGaugeLayer.hpGauge.bombed == true)
                    {
                        loc2 = loc3.eVoiceID;
                        loc1 = common.util.SoundUtil.playVoice(9998, loc2, _handleAgoniesEnd, _handleAgoniesErrorEnd);
                        if (loc1 != null)
                        {
                            return;
                        }
                    }
                }
            }
            _phaseWait();
            return;
        }

        private function _handleAgoniesEnd(arg1:flash.events.Event=null):void
        {
            common.debug.Debug.log("ボスボイス再生");
            _phaseWait();
            return;
        }

        private function _handleAgoniesErrorEnd(arg1:Error=null):void
        {
            common.debug.Debug.log("ボスボイス再生エラー");
            _phaseWait();
            return;
        }

        private function _phaseWait():void
        {
            a24.tween.Tween24.wait(1).onComplete(_phaseFadeoutBGM).play();
            return;
        }

        private function _phaseFadeoutBGM():void
        {
            _view.shutter.setDark();
            if (_data.baseData.isPractice() == false && _data.combatCount == 1 && _data.combatData.hasNextNight() && BattleAssets.isSameBGM(_data.baseData.isBossMap(), _data.baseData.areaID, _data.baseData.mapNo))
            {
                a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(_view.shutter, "ShutterView::EVENT_CLOSED_COMPLETE"), a24.tween.Tween24.func(_view.shutter.close)).onComplete(_phaseFadeoutBGMEnd, 0).play();
            }
            else
            {
                _view.shutter.close();
                common.util.SoundUtil.stopBGMFadeout("MAIN_BGM", 2, _phaseFadeoutBGMEnd);
            }
            return;
        }

        private function _phaseFadeoutBGMEnd(arg1:Number):void
        {
            _data.preSoundStoppedPosition = arg1;
            _phaseEnd();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//        class PhaseFormation
package battle.phase.day
{
    import a24.tween.*;
    import battle.display.common.*;
    import battle.display.day.hougeki.*;
    import battle.models.*;
    import battle.phase.*;
    import battle.views.*;

    public class PhaseFormation extends battle.phase.PhaseBase
    {
        public function PhaseFormation(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public function get PHASE_NAME():String
        {
            return _phase_name;
        }

        protected function set phase_name(arg1:String):void
        {
            _phase_name = arg1;
            return;
        }

        public override function start():void
        {
            _formationCutin();
            return;
        }

        protected function _formationCutin():void
        {
            var jin_f:int;
            var jin_e:int;
            var rader_f:battle.display.common.RaderView;
            var rader_e:battle.display.common.RaderView;
            var cutin:battle.display.day.hougeki.OpeningCutin;

            var loc1:*;
            jin_f = _data.combatData.getFormationID_f();
            jin_e = _data.combatData.getFormationID_e();
            rader_f = _view.raderLayer.rader_f;
            rader_e = _view.raderLayer.rader_e;
            cutin = new battle.display.day.hougeki.OpeningCutin();
            cutin.x = 800 / 2;
            cutin.y = 480 / 2;
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.infoLayer, cutin, rader_f, rader_e), a24.tween.Tween24.parallel(cutin.getTweenAnimation(jin_f, jin_e, _data.combatData.getCombatFormation()), a24.tween.Tween24.func(function ():void
            {
                var loc1:*=0;
                if (!rader_f.isShow())
                {
                    if (_data.combatData.isCombinedFormation_f() && _data.baseData.isCombinedFriend())
                    {
                        rader_f.getTweenShow(jin_f, _data.countShips_f(), _data.countShips_f_Combined()).play();
                    }
                    else
                    {
                        rader_f.getTweenShow(jin_f, _data.countShips_e()).play();
                    }
                }
                if (!rader_e.isShow())
                {
                    loc1 = _data.countShips_e();
                    rader_e.getTweenShow(jin_e, loc1).play();
                }
                return;
            }).delay(0.5)), a24.tween.Tween24.func(_view.raderLayer.addChildRaders), a24.tween.Tween24.removeChild(cutin)).onComplete(_phaseEnd).play()
            return;
        }

        private var _phase_name:String="陣形演出";
    }
}


//        class PhaseHougeki
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.common.*;
    import battle.display.cutin.*;
    import battle.display.day.hougeki.*;
    import battle.display.main.*;
    import battle.events.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.phase.attack.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.display.*;

    public class PhaseHougeki extends battle.phase.PhaseDayNightBase
    {
        public function PhaseHougeki(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            _stage_start = 1;
            _stage_end = 3;
            super(arg1, arg2, false);
            return;
        }

        public function get PHASE_NAME():String
        {
            return _phase_name;
        }

        protected function set phase_name(arg1:String):void
        {
            _phase_name = arg1;
            return;
        }

        public override function start():void
        {
            var loc2:*=0;
            var loc1:*=0;
            if (!_data.combatDataD.hougekiData.existStage(0))
            {
                common.debug.Debug.log(PHASE_NAME + " - 無し");
                _phaseEnd();
                return;
            }
            _preInit();
            if (_view.bannerLayer.enemys.isEnter())
            {
                _phaseHougeki();
            }
            else
            {
                loc2 = _data.combatData.getFormationID_e();
                loc1 = _data.countShips_e();
                a24.tween.Tween24.parallel(_view.infoLayer.getTween(5), _view.raderLayer.getTweenShowE(loc2, loc1), _view.bannerLayer.enemys.getTweenEnter()).onComplete(_phaseHougeki).play();
            }
            return;
        }

        protected function _preInit():void
        {
            _view.bannerLayer.friends.tweenDefaultPositionAll();
            _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
            return;
        }

        protected function _phaseHougeki():void
        {
            _phaseHougekiWithFormationCutin();
            return;
        }

        protected function _phaseHougekiWithFormationCutin():void
        {
            var jin_f:int;
            var jin_e:int;
            var rader_f:battle.display.common.RaderView;
            var rader_e:battle.display.common.RaderView;
            var cutin:battle.display.day.hougeki.OpeningCutin;

            var loc1:*;
            jin_f = _data.combatData.getFormationID_f();
            jin_e = _data.combatData.getFormationID_e();
            rader_f = _view.raderLayer.rader_f;
            rader_e = _view.raderLayer.rader_e;
            cutin = new battle.display.day.hougeki.OpeningCutin();
            cutin.x = 800 / 2;
            cutin.y = 480 / 2;
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.infoLayer, cutin, rader_f, rader_e), a24.tween.Tween24.parallel(cutin.getTweenAnimation(jin_f, jin_e, _data.combatData.getCombatFormation()), a24.tween.Tween24.func(function ():void
            {
                var loc1:*=0;
                if (!rader_f.isShow())
                {
                    _view.raderLayer.getTweenShowF(_data).play();
                }
                if (!rader_e.isShow())
                {
                    loc1 = _data.countShips_e();
                    rader_e.getTweenShow(jin_e, loc1).play();
                }
                return;
            }).delay(0.5)), a24.tween.Tween24.func(_view.raderLayer.addChildRaders), a24.tween.Tween24.removeChild(cutin), a24.tween.Tween24.func(_view.upperBar.show, 9)).onComplete(__phaseHougeki, _stage_start).play()
            return;
        }

        protected function _phaseHougekiWithoutFormationCutin():void
        {
            _view.upperBar.show(9);
            __phaseHougeki(_stage_start);
            return;
        }

        protected function __phaseHougeki(arg1:int):void
        {
            var loc1:*=_data.combatDataD.hougekiData;
            var loc2:*=loc1.createAttackArray(arg1, _data.friendShips, _data.enemyShips);
            phaseHougekiTurn(loc2, arg1);
            return;
        }

        public function phaseHougekiTurn(arg1:__AS3__.vec.Vector.<battle.models.attack.AttackData>, arg2:int):void
        {
            if (arg1.length != 0)
            {
                _phaseHougekiTurn(arg1, arg2);
            }
            else
            {
                ++arg2;
                if (arg2 <= _stage_end)
                {
                    __phaseHougeki(arg2);
                }
                else
                {
                    _phaseEnd();
                }
            }
            return;
        }

        protected function _phaseHougekiTurn(arg1:__AS3__.vec.Vector.<battle.models.attack.AttackData>, arg2:int):void
        {
            var loc2:*=null;
            var loc5:*=null;
            var loc4:*;
            var loc1:*=(loc4 = arg1.shift()).attacker is battle.vo.FriendShipData;
            var loc3:*;
            (loc3 = new battle.display.cutin.Cutin(loc1, false)).addEventListener("ShipVoiceEvent::VOICE", _handlePlayVoiceInCutin);
            if (loc4.rocketFlg)
            {
                loc5 = new battle.phase.attack.PhaseRocket(_view, _data, loc4, false);
            }
            else if (loc4.hougekiAttackType != 7)
            {
                if (loc4.hougekiAttackType != 8)
                {
                    if (loc4.hougekiAttackType != 1)
                    {
                        if (loc4.hougekiAttackType != 2)
                        {
                            if (loc4.hougekiAttackType != 3)
                            {
                                if (loc4.hougekiAttackType != 4)
                                {
                                    if (loc4.hougekiAttackType != 5)
                                    {
                                        if (loc4.hougekiAttackType != 6)
                                        {
                                            if (loc4.hougekiAttackType == 0)
                                            {
                                                loc5 = new battle.phase.attack.PhaseAttackNormal(_view, _data, loc4, false);
                                            }
                                        }
                                        else
                                        {
                                            loc5 = new battle.phase.attack.PhaseDaySuper4(_view, _data, loc4, false);
                                        }
                                    }
                                    else
                                    {
                                        loc5 = new battle.phase.attack.PhaseDaySuper3(_view, _data, loc4, false);
                                    }
                                }
                                else
                                {
                                    loc5 = new battle.phase.attack.PhaseDaySuper2(_view, _data, loc4, false);
                                }
                            }
                            else
                            {
                                loc5 = new battle.phase.attack.PhaseDaySuper1(_view, _data, loc4, false);
                            }
                        }
                        else
                        {
                            loc5 = new battle.phase.attack.PhaseDoubleH(_view, _data, loc4, false);
                        }
                    }
                    else
                    {
                        loc2 = a24.tween.Tween24.serial(loc3.getTweenInitialize(loc4.attacker, loc4.slotitemMasterID, 8), loc3.getTween(), _getTweenLeaserAttack(loc4), _getTweenDamageEffectForLeaser(loc4));
                    }
                }
                else
                {
                    loc5 = new battle.phase.attack.PhaseBakurai(_view, _data, loc4, false);
                }
            }
            else
            {
                loc5 = new battle.phase.attack.PhaseKansaiki(_view, _data, loc4, false);
            }
            if (loc2 == null)
            {
                if (loc5 != null)
                {
                    a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc5, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc5.start), a24.tween.Tween24.func(loc3.removeEventListener, "ShipVoiceEvent::VOICE", _handlePlayVoiceInCutin)).onComplete(_phaseGekichinCutin, phaseHougekiTurn, arg1, arg2).play();
                }
            }
            else
            {
                a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.cutinLayer, loc3), loc2, a24.tween.Tween24.func(loc3.removeEventListener, "ShipVoiceEvent::VOICE", _handlePlayVoiceInCutin)).onComplete(_phaseGekichinCutin, phaseHougekiTurn, arg1, arg2).play();
            }
            return;
        }

        private function _getTweenLeaserAttack(arg1:battle.models.attack.AttackData):a24.tween.Tween24
        {
            var loc2:*=new flash.display.Shape();
            loc2.graphics.beginFill(255, 0.5);
            loc2.graphics.drawRect(0, 0, 800, 5);
            loc2.graphics.endFill();
            var loc1:*=[arg1.attacker.banner.getTweenAttackPos()];
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[レーザー攻撃] " + arg1), arg1.attacker.banner.getTweenAttackPos(), a24.tween.Tween24.addChild(_view.contentsLayer, loc2), a24.tween.Tween24.tween(loc2, 2.5).y(480), a24.tween.Tween24.removeChild(loc2));
        }

        private function _getTweenDamageEffectForLeaser(arg1:battle.models.attack.AttackData):a24.tween.Tween24
        {
            var loc5:*=0;
            var loc3:*=null;
            var loc1:*=[];
            var loc4:*=_view.damageCanvas;
            loc5 = 0;
            while (loc5 < arg1.defenderCount)
            {
                loc3 = arg1.getDefender(loc5);
                loc4.addDamegeNumber(loc3, arg1.getDamage(loc5), arg1.getHitState(loc5));
                loc1.push(loc3.banner.getTweenDamage(loc3.nowHP, loc3.getMaxHp(), arg1.hasShield));
                ++loc5;
            }
            var loc2:*=arg1.attacker is battle.vo.FriendShipData;
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc4.getTweenAnimation(), loc1, _view.bombLayer.getTweenBombs(__AS3__.vec.Vector.<Boolean>([!loc2, loc2]))), arg1.attacker.banner.getTweenDefaultPos());
        }

        private function _handlePlayVoiceInCutin(arg1:battle.events.ShipVoiceEvent):void
        {
            var loc2:*=0;
            var loc1:*=0;
            var loc3:*;
            if ((loc3 = arg1.ship) is battle.vo.FriendShipData)
            {
                loc2 = loc3.getCharaID();
                loc1 = loc3.getShipType();
                if (loc1 == 7 || loc1 == 11)
                {
                    common.util.SoundUtil.playVoiceAtRandom(loc2, [16, 18], [50, 50]);
                }
                else
                {
                    common.util.SoundUtil.playVoiceAtRandom(loc2, [15, 16], [50, 50]);
                }
            }
            else
            {
                battle.vo.EnemyShipData(loc3).playVoice_Offence();
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            _view.upperBar.hide(9);
            a24.tween.Tween24.wait(0.8).onComplete(super(
#error('findrop') _phaseEnd
            )._phaseEnd).play();
            return;
        }

        private var _phase_name:String="砲撃戦";

        protected var _stage_start:int;

        protected var _stage_end:int;
    }
}


//        class PhaseKaimaku
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.views.*;
    import common.debug.*;

    public class PhaseKaimaku extends battle.phase.day.PhaseRaigeki
    {
        public function PhaseKaimaku(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            var formationE:int;
            var raderTween:a24.tween.Tween24;

            var loc1:*;
            if (_data.combatDataD.kaimakuData.exist())
            {
                common.debug.Debug.log("-- [開幕魚雷戦] --");
                if (_view.bannerLayer.enemys.isEnter())
                {
                    _view.bannerLayer.friends.tweenDefaultPositionAll();
                    _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
                    _view.bannerLayer.enemys.tweenDefaultPositionAll();
                    _phaseKaimaku();
                }
                else
                {
                    formationE = _data.combatData.getFormationID_e();
                    raderTween = _view.raderLayer.getTweenShowE(formationE, _data.countShips_e());
                    a24.tween.Tween24.parallel(_view.infoLayer.getTween(5), a24.tween.Tween24.func(raderTween.play), _view.bannerLayer.enemys.getTweenEnter()).onComplete(function ():void
                    {
                        _view.bannerLayer.friends.tweenDefaultPositionAll();
                        _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
                        _phaseKaimaku();
                        return;
                    }).play()
                }
            }
            else
            {
                common.debug.Debug.log("[開幕魚雷戦] - 無し");
                _phaseEnd();
            }
            return;
        }

        private function _phaseKaimaku():void
        {
            var loc1:*=_data.combatDataD.kaimakuData;
            var loc2:*=loc1.createAttackArray(_data.friendShips, _data.enemyShips);
            common.debug.Debug.log(loc2.join("\n"));
            _phaseShoot(loc2);
            return;
        }

        protected override function _phasePreEnd():void
        {
            _phaseEnd();
            return;
        }
    }
}


//        class PhaseKouku
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.day.kouku.*;
    import battle.display.main.*;
    import battle.display.main.banner.*;
    import battle.display.main.plane.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.models.attack.koukuu.*;
    import battle.phase.*;
    import battle.util.*;
    import battle.views.*;
    import battle.views.cutins.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.geom.*;

    public class PhaseKouku extends battle.phase.PhaseDayNightBase
    {
        public function PhaseKouku(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:Boolean=true, arg4:String="")
        {
            super(arg1, arg2, false);
            _dispSeiku = arg3;
            _data_suffix = arg4;
            return;
        }

        public override function start():void
        {
            _kk = _data.combatDataD.koukuuData;
            _kk.dataSuffix = _data_suffix;
            if (isGoPlane_f() || isGoPlane_e())
            {
                _view.upperBar.show(3);
                a24.tween.Tween24.wait(0.6).onComplete(_initTaikuCutin).play();
            }
            else
            {
                _phaseEnd();
            }
            return;
        }

        protected function isGoPlane_f():Boolean
        {
            return _data.combatDataD.sakutekiData.isSuccess_f() && _kk.planeFrom_f.length > 0 && _data.isNotSubMarineAll_e();
        }

        protected function isGoPlane_e():Boolean
        {
            return _data.combatDataD.sakutekiData.isSuccess_e() && _kk.planeFrom_e.length > 0 && _data.isNotSubMarineAll_f();
        }

        protected function _initTaikuCutin():void
        {
            var loc3:*=null;
            var loc1:*=0;
            var loc2:*=0;
            var loc5:*=undefined;
            var loc4:*;
            if (loc4 = _kk.getTaikuCutinData_f(_data.friendShips.concat(_data.friendShips_combined)))
            {
                _taikuCutin = new battle.views.cutins.TaikuCutin();
                loc3 = loc4.ship;
                loc1 = loc3.getCharaID();
                loc2 = loc3.getCondition();
                loc5 = loc4.slotitems;
                _taikuCutin.getTweenInitialize(loc1, loc2, loc5).onComplete(_phaseCutin).play();
            }
            else
            {
                _phaseCutin();
            }
            return;
        }

        protected function _phaseCutin():void
        {
            var loc5:*=null;
            var loc4:*=0;
            var loc1:*=0;
            var loc6:*=0;
            var loc3:*=undefined;
            var loc2:*=new battle.views.cutins.FunnelCutin();
            if (isGoPlane_f())
            {
                loc4 = _kk.planeFrom_f[0];
                loc1 = (loc5 = _data.friendShipAll[loc4]).getCharaID();
                loc6 = loc5.getCondition();
                loc3 = __AS3__.vec.Vector.<int>(loc5.getSlotItemIDs());
                loc2.initialize_f(loc1, loc6, loc3);
            }
            if (isGoPlane_e() && _data.baseData.isLongDistanceAirRaid() == false)
            {
                loc4 = _kk.planeFrom_e[0];
                loc1 = (loc5 = _data.enemyShips[loc4]).getCharaID();
                loc6 = loc5.getCondition();
                loc3 = __AS3__.vec.Vector.<int>(loc5.getSlotItemIDs());
                loc2.initialize_e(loc1, loc6, loc3);
            }
            a24.tween.Tween24.serial(loc2.getTweenInitialize(), a24.tween.Tween24.addChild(_view.cutinLayer, loc2), loc2.getTween(), a24.tween.Tween24.removeChild(loc2), a24.tween.Tween24.func(loc2.finalize)).onComplete(_phaseFlyPlane).play();
            return;
        }

        private function _phaseFlyPlane():void
        {
            _canvas = new battle.display.main.plane.FlyPlaneCanvas(_data);
            _mainTween = a24.tween.Tween24.serial(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_hikouki2), a24.tween.Tween24.addChild(_view.contentsLayer, _canvas), a24.tween.Tween24.parallel(_canvas.getTween(_data), a24.tween.Tween24.func(_subPhaseTouchPlaneStart), a24.tween.Tween24.func(_plane_AirAirAttack).delay(0.766666666667), a24.tween.Tween24.func(_plane_TaikuCutin).delay(0.9), a24.tween.Tween24.func(_plane_AirAirBomb).delay(1.03333333333), a24.tween.Tween24.func(_plane_AntiAirCraft).delay(1.2), a24.tween.Tween24.func(_plane_AntiAirCraftBomb).delay(1.36666666667), a24.tween.Tween24.func(_plane_Gyorai).delay(1.7), a24.tween.Tween24.func(_plane_Bakugeki).delay(2.96666666667), a24.tween.Tween24.func(_plane_Damage).delay(3.33333333333))).onComplete(_phaseGekichinCutin, _phaseEnd);
            _mainTween.play();
            return;
        }

        private function _plane_AirAirAttack():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < _canvas.trio_f.length)
            {
                _canvas.trio_f[loc1].attack(_data);
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < _canvas.trio_e.length)
            {
                _canvas.trio_e[loc1].attack(_data);
                ++loc1;
            }
            return;
        }

        private function _plane_TaikuCutin():void
        {
            if (_taikuCutin)
            {
                a24.tween.Tween24.serial(a24.tween.Tween24.prop(_taikuCutin).alpha(0), a24.tween.Tween24.addChild(_view.cutinLayer, _taikuCutin), a24.tween.Tween24.tween(_taikuCutin, 0.1).alpha(1), a24.tween.Tween24.func(pauseAnimation), _taikuCutin.getTween(), a24.tween.Tween24.func(resumeAnimation), a24.tween.Tween24.tween(_taikuCutin, 0.1).alpha(0), a24.tween.Tween24.removeChild(_taikuCutin)).play();
            }
            return;
        }

        private function pauseAnimation():void
        {
            if (!(_mainTween == null) && _mainTween.pausing == false)
            {
                _canvas.pause();
                _mainTween.pause();
            }
            return;
        }

        private function resumeAnimation():void
        {
            if (!(_mainTween == null) && _mainTween.pausing == true)
            {
                _canvas.play();
                _mainTween.play();
            }
            return;
        }

        private function _plane_AirAirBomb():void
        {
            _canvas.changeStateAfterStage1();
            return;
        }

        private function _plane_AntiAirCraft():void
        {
            var loc5:*=null;
            var loc7:*=0;
            var loc3:*=null;
            var loc6:*=null;
            var loc2:*=0;
            var loc1:*=null;
            common.debug.Debug.log("[航空戦] 対空砲火 ");
            if (_kk.planeFrom_e.length == 0)
            {
                return;
            }
            var loc4:*=_data.hasAntiAircraftAbility_f();
            common.debug.Debug.log("自軍の対空能力：" + loc4);
            if (_kk.existStage2())
            {
                loc5 = [a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_shoot)];
                loc7 = 0;
                while (loc7 < 6)
                {
                    loc3 = _data.friendShips[loc7];
                    if (loc3 != null)
                    {
                        loc6 = loc3.banner;
                        loc2 = loc4[loc7];
                        loc1 = "";
                        if (loc2 > 0)
                        {
                            loc5.push(loc6.getTweenAA(loc2).delay(Math.random() * 0.5));
                            loc5.push(loc6.getTweenAttackPos());
                            loc1 = loc1 + (" " + loc2 + "番の対空攻撃発動 ");
                        }
                        else if ((loc7 == 0 || loc7 == 6) && !battle.util.BattleUtil.isAAAttackable(loc4))
                        {
                            loc5.push(loc6.getTweenAA().delay(Math.random() * 0.5));
                            loc5.push(loc6.getTweenAttackPos());
                            loc1 = loc1 + " デフォルトの対空攻撃発動 ";
                        }
                        if (loc1 != "")
                        {
                            common.debug.Debug.log("" + loc3 + loc1);
                        }
                    }
                    if (loc4.length == 6 * 2)
                    {
                        loc3 = _data.friendShips_combined[loc7];
                        if (loc3 != null)
                        {
                            loc2 = loc4[loc7 + 6];
                            loc1 = "";
                            if (loc2 > 0)
                            {
                                loc5.push(loc3.banner.getTweenAA(loc2).delay(Math.random() * 0.5));
                                loc5.push(loc3.banner.getTweenAttackPos());
                                loc1 = loc1 + (" " + loc2 + "番の対空攻撃発動 ");
                            }
                            else if ((loc7 == 0 || loc7 == 6) && !battle.util.BattleUtil.isAAAttackable(loc4))
                            {
                                loc5.push(loc6.getTweenAA().delay(Math.random() * 0.5));
                                loc5.push(loc6.getTweenAttackPos());
                                loc1 = loc1 + " デフォルトの対空攻撃発動 ";
                            }
                            if (loc1 != "")
                            {
                                common.debug.Debug.log("" + loc3 + loc1);
                            }
                        }
                    }
                    ++loc7;
                }
                a24.tween.Tween24.serial(a24.tween.Tween24.parallel.apply(null, loc5), _view.bannerLayer.friends.getTweenDefaultPositionAll(), a24.tween.Tween24.ifCase(_data.baseData.isCombinedFriend(), _view.bannerLayer.friends_combined.getTweenDefaultPositionAll(), a24.tween.Tween24.wait(0))).play();
            }
            else
            {
                common.debug.Debug.log("対空能力無し");
            }
            return;
        }

        private function _plane_AntiAirCraftBomb():void
        {
            var loc1:*=null;
            if (_dispSeiku)
            {
                loc1 = new battle.display.day.kouku.SeikuukenView();
                loc1.getTween(_kk.getSeikuukenID(), _view.contentsLayer).play();
            }
            _canvas.changeStateAfterStage2();
            return;
        }

        protected function _plane_Gyorai():void
        {
            var loc8:*=0;
            var loc6:*=null;
            var loc3:*=null;
            var loc5:*=null;
            var loc7:*=null;
            var loc2:*=null;
            if (!_kk.existStage3())
            {
                return;
            }
            common.debug.Debug.log("[航空戦] 魚雷発射 ");
            var loc9:*=new battle.views.effects.torpedo.AerialTorpedoCanvas();
            var loc1:*=[];
            var loc4:*=[];
            loc8 = 0;
            while (loc8 < 6)
            {
                if (_kk.getStage3Raigeki(loc8, false))
                {
                    if (loc6 = _canvas.getRandomPlane_e())
                    {
                        loc3 = loc6.getGlobalPos();
                        loc5 = _data.friendShips[loc8];
                        loc9.reserveTorpedoToShip(loc3, loc5);
                        loc1.push(loc5);
                    }
                }
                if (_kk.getStage3Raigeki(loc8, true))
                {
                    if (loc7 = _canvas.getRandomPlane_f())
                    {
                        loc2 = loc7.getGlobalPos();
                        loc5 = _data.enemyShips[loc8];
                        loc9.reserveTorpedoToShip(loc2, loc5);
                        loc4.push(loc5);
                    }
                }
                ++loc8;
            }
            common.debug.Debug.log("魚雷被弾する自艦：" + loc1);
            common.debug.Debug.log("魚雷被弾する敵艦：" + loc4);
            _view.torpedoLayer.getTweenAerialTorpedo(loc9).play();
            return;
        }

        protected function _plane_Bakugeki():void
        {
            if (!_kk.existStage3())
            {
                return;
            }
            var loc2:*=_kk.isStage3Bakugeki(true);
            var loc1:*=_kk.isStage3Bakugeki(false);
            common.debug.Debug.log("[航空戦] 爆撃 ");
            common.debug.Debug.log("自艦隊の爆撃：" + (loc2 ? "有" : "無"));
            common.debug.Debug.log("敵艦隊の爆撃：" + (loc1 ? "有" : "無"));
            _view.bombLayer.getTweenBombs(__AS3__.vec.Vector.<Boolean>([loc2, loc1])).play();
            return;
        }

        private function _plane_Damage():void
        {
            if (!_kk.existStage3())
            {
                return;
            }
            var loc1:*=_view.damageCanvas;
            var loc2:*=[];
            var loc3:*=[];
            _setDmgTweens_f(loc2, loc3);
            _setDmgTweens_e(loc2, loc3);
            a24.tween.Tween24.parallel(loc1.getTweenAnimation(), loc2, loc3).play();
            return;
        }

        protected function _setDmgTweens_f(arg1:Array, arg2:Array):void
        {
            var loc4:*=0;
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*;
            (loc3 = _data.combatDataD.koukuuData.createAttacks_e(_data.friendShips)).length ? common.debug.Debug.log("*自軍側 航空戦被弾") : null;
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                common.debug.Debug.log(loc3[loc4]);
                loc1 = loc3[loc4];
                loc2 = loc1.defender;
                _view.damageCanvas.addDamegeNumber(loc1.defender, loc1.damage, loc1.hitState);
                arg1.push(loc2.banner.getTweenDamage(loc2.nowHP, loc2.getMaxHp(), loc1.hasShield));
                arg2.push(_view.bombLayer.getTweenBomb(loc1.defender, loc1.damage));
                if (_kk.getStage3Raigeki(loc1.defender.index, false))
                {
                    arg2.push(_view.bombLayer.getTweenBomb(loc2, loc1.damage, "EXPLOSION_TYPE:MIZUHASIRA"));
                }
                ++loc4;
            }
            return;
        }

        protected function _setDmgTweens_e(arg1:Array, arg2:Array):void
        {
            var loc4:*=0;
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*;
            (loc3 = _data.combatDataD.koukuuData.createAttacks_f(_data.enemyShips)).length ? common.debug.Debug.log("*相手側 航空戦被弾") : null;
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                common.debug.Debug.log(loc3[loc4]);
                loc1 = loc3[loc4];
                loc2 = loc1.defender;
                _view.damageCanvas.addDamegeNumber(loc1.defender, loc1.damage, loc1.hitState);
                arg1.push(loc2.banner.getTweenDamage(loc2.nowHP, loc2.getMaxHp(), loc1.hasShield));
                arg2.push(_view.bombLayer.getTweenBomb(loc1.defender, loc1.damage));
                if (_kk.getStage3Raigeki(loc1.defender.index, true))
                {
                    arg2.push(_view.bombLayer.getTweenBomb(loc2, loc1.damage, "EXPLOSION_TYPE:MIZUHASIRA"));
                }
                ++loc4;
            }
            return;
        }

        private function _subPhaseTouchPlaneStart():void
        {
            if (_kk.hasTouchPlane_f())
            {
                _view.raderLayer.rader_e.showTouchPlane(_kk.getTouchPlaneID_f(), true);
            }
            if (_kk.hasTouchPlane_e())
            {
                _view.raderLayer.rader_f.showTouchPlane(_kk.getTouchPlaneID_e(), true);
            }
            return;
        }

        private function _subPhaseTouchPlaneEnd():void
        {
            if (_kk.hasTouchPlane_f())
            {
                _view.raderLayer.rader_e.hideTouchPlane();
            }
            if (_kk.hasTouchPlane_e())
            {
                _view.raderLayer.rader_f.hideTouchPlane();
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            common.debug.Debug.log("PHASE KOUKU END " + _data_suffix);
            _subPhaseTouchPlaneEnd();
            if (_canvas != null)
            {
                _canvas.finalize();
            }
            _kk = null;
            _canvas = null;
            _mainTween = null;
            _taikuCutin = null;
            _view.contentsLayer.removeChildren();
            _view.topLayer.removeChildren();
            _view.cutinLayer.removeChildren();
            _view.upperBar.hide(3);
            a24.tween.Tween24.wait(0.8).onComplete(super(
#error('findrop') _phaseEnd
            )._phaseEnd).play();
            return;
        }

        public const LOG:Boolean=false;

        protected var _kk:battle.models.attack.KoukuuData;

        protected var _canvas:battle.display.main.plane.FlyPlaneCanvas;

        protected var _mainTween:a24.tween.Tween24=null;

        protected var _taikuCutin:battle.views.cutins.TaikuCutin=null;

        protected var _dispSeiku:Boolean=true;

        protected var _data_suffix:String="";
    }
}


//        class PhaseRaigeki
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.views.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;

    public class PhaseRaigeki extends battle.phase.PhaseDayNightBase
    {
        public function PhaseRaigeki(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, false);
            return;
        }

        public function get PHASE_NAME():String
        {
            return _phase_name;
        }

        protected function set phase_name(arg1:String):void
        {
            _phase_name = arg1;
            return;
        }

        public override function start():void
        {
            if (!_data.combatDataD.raigekiData.exist())
            {
                common.debug.Debug.log(PHASE_NAME + " - 無し");
                _phaseEnd();
                return;
            }
            _preInit();
            _view.upperBar.show(10);
            a24.tween.Tween24.serial(_view.infoLayer.getTween(6)).onComplete(_phaseRaigeki).play();
            return;
        }

        protected function _preInit():void
        {
            _view.bannerLayer.friends.tweenDefaultPositionAll();
            _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
            _view.bannerLayer.enemys.tweenDefaultPositionAll();
            return;
        }

        protected function _phaseRaigeki():void
        {
            var loc1:*=_data.combatDataD.raigekiData;
            var loc2:*=loc1.createAttackArray(_data.friendShips, _data.enemyShips);
            common.debug.Debug.log(loc2.join("\n"));
            _phaseShoot(loc2);
            return;
        }

        protected function _createTorpedoCanvas():battle.views.effects.torpedo.TorpedoCanvas
        {
            return new battle.views.effects.torpedo.TorpedoCanvas(0);
        }

        protected function _phaseShoot(arg1:__AS3__.vec.Vector.<battle.models.attack.AttackData>):void
        {
            var loc6:*=0;
            var loc4:*=null;
            var loc5:*=0;
            var loc3:*=null;
            var loc1:*=[];
            var loc2:*=_createTorpedoCanvas();
            loc6 = 0;
            while (loc6 < arg1.length)
            {
                loc4 = arg1[loc6];
                loc5 = 0;
                while (loc5 < loc4.attackerCount)
                {
                    loc3 = loc4.getAttacker(loc5);
                    loc1.push(loc3.banner.getTweenGyoraiShoot());
                    loc2.reserveGyorai(loc3, loc4.defender);
                    ++loc5;
                }
                ++loc6;
            }
            if (loc2.shootShipFirst_f != -1)
            {
                loc1.push(_getTweenPlayVoice(loc2.shootShipFirst_f));
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc1), _view.torpedoLayer.getTweenRaigeki(loc2)).onComplete(_phaseExplosion, arg1).play();
            return;
        }

        protected function _getTweenPlayVoice(arg1:int):a24.tween.Tween24
        {
            var loc2:*=_data.friendShips[arg1];
            var loc1:*=loc2.getCharaID();
            return a24.tween.Tween24.func(common.util.SoundUtil.playVoiceAtRandom, loc1, [15, 16], [50, 50]);
        }

        protected function _phaseExplosion(arg1:__AS3__.vec.Vector.<battle.models.attack.AttackData>):void
        {
            var loc5:*=0;
            var loc4:*=null;
            var loc3:*=null;
            var loc6:*=[];
            var loc2:*=[];
            var loc1:*=new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            loc5 = 0;
            while (loc5 < arg1.length)
            {
                loc3 = (loc4 = arg1[loc5]).defender;
                loc1.push(loc3);
                _view.damageCanvas.addDamegeNumber(loc3, loc4.damage, loc4.hitState);
                loc2.push(loc3.banner.getTweenDamage(loc3.nowHP, loc3.getMaxHp(), loc4.hasShield));
                loc6.push(_view.bombLayer.getTweenBomb(loc3, loc4.damage));
                ++loc5;
            }
            a24.tween.Tween24.parallel(_view.torpedoLayer.getTweenWaterBomb(loc1), a24.tween.Tween24.parallel(loc6, loc2).delay(0.1), _view.damageCanvas.getTweenAnimation().delay(0.6)).onComplete(_phaseGekichinCutin, _phasePreEnd).play();
            return;
        }

        protected function _phasePreEnd():void
        {
            _view.upperBar.hide(10);
            a24.tween.Tween24.wait(0.8).onComplete(_phaseEnd).play();
            return;
        }

        protected override function _phaseEnd():void
        {
            _view.contentsLayer.removeChildren();
            _view.topLayer.removeChildren();
            super._phaseEnd();
            return;
        }

        private var _phase_name:String="[雷撃戦]";
    }
}


//        class PhaseSakuteki
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.common.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.views.*;
    import battle.vo.*;
    import common.util.*;
    import flash.display.*;
    import res.images.battle.*;

    public class PhaseSakuteki extends battle.phase.PhaseBase
    {
        public function PhaseSakuteki(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            _sakuteki = _data.combatDataD.sakutekiData;
            var loc1:*=_getTweenSubmarineEffectF();
            var loc2:*=_getTweenSubmarineEffectE();
            var loc3:*=loc1.concat(loc2);
            if (loc3.length > 0)
            {
                a24.tween.Tween24.parallel(loc3, a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_sonar002), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_dip)).onComplete(_phase2).play();
            }
            else
            {
                _phase2();
            }
            return;
        }

        private function _phase2():void
        {
            if (!_sakuteki.hasPlane_f() && !_sakuteki.isSuccess_f())
            {
                _phaseEnd();
                return;
            }
            _view.upperBar.getTween(2, 1.5).play();
            a24.tween.Tween24.serial(_view.infoLayer2.getTween(0), a24.tween.Tween24.ifCase(_sakuteki.hasPlane_f(), a24.tween.Tween24.func(_phase3_hasPlane), a24.tween.Tween24.func(_phase3_noPlane))).play();
            return;
        }

        private function _phase3_hasPlane():void
        {
            var loc3:*=new res.images.battle.SakutekiLineMC();
            var loc4:*=new battle.display.common.BlackBox();
            var loc2:*=common.util.Util.createImageResourceWithCentering(res.images.battle.PlaneFriendImage);
            var loc1:*=a24.tween.Tween24.serial(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_hikouki), a24.tween.Tween24.tween(loc2, 2).xy(865, 0), a24.tween.Tween24.removeChild(loc2));
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(loc4).alpha(0), a24.tween.Tween24.prop(loc2).xy(-66, 526), a24.tween.Tween24.addChild(_view.infoLayer2, loc3, loc4, loc2), a24.tween.Tween24.parallel(a24.tween.Tween24.serial(a24.tween.Tween24.prop(loc3).scale(0.11).xy(400, 240), a24.tween.Tween24.tween(loc3, 0.5).scale(2.85)), a24.tween.Tween24.tween(loc4, 0.7).alpha(0.5), loc1.delay(0.2), a24.tween.Tween24.func(_view.raderLayer.rader_e.wave).delay(1.8)), a24.tween.Tween24.addChild(_view.cutinLayer, _view.raderLayer.rader_e), a24.tween.Tween24.parallel(_view.infoLayer2.getTween(_sakuteki.getMessageID()), _getTweenShowRaderOnBar(), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(loc3, 0.5).alpha(0), a24.tween.Tween24.tween(loc4, 0.5).alpha(0)).delay(1.3)), a24.tween.Tween24.func(_view.raderLayer.addChildRaders), a24.tween.Tween24.removeChild(loc3, loc4, loc2), a24.tween.Tween24.removeAllChildren(_view.cutinLayer)).onComplete(_phase4).play();
            return;
        }

        private function _phase3_noPlane():void
        {
            var loc1:*=new battle.display.common.BlackBox();
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(loc1).alpha(0), a24.tween.Tween24.addChild(_view.infoLayer2, loc1), a24.tween.Tween24.tween(loc1, 0.7).alpha(0.5), a24.tween.Tween24.addChild(_view.cutinLayer, _view.raderLayer.rader_e), a24.tween.Tween24.parallel(_view.infoLayer2.getTween(_sakuteki.getMessageID()), _getTweenShowRaderOnBar(), a24.tween.Tween24.tween(loc1, 0.5).alpha(0).delay(2)), a24.tween.Tween24.func(_view.raderLayer.addChildRaders), a24.tween.Tween24.removeChild(loc1), a24.tween.Tween24.removeAllChildren(_view.cutinLayer)).onComplete(_phase4).play();
            return;
        }

        private function _phase4():void
        {
            if (_sakuteki.isSuccess_f())
            {
                a24.tween.Tween24.parallel(_view.infoLayer2.getTween(5), _view.bannerLayer.enemys.getTweenSakutekiFound()).onComplete(_phaseEnd).play();
            }
            else
            {
                _phaseEnd();
            }
            return;
        }

        private function _getTweenSubmarineEffectF():Array
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc1:*=[];
            var loc3:*=_data.friendShips;
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                loc2 = loc3[loc4];
                if (!(loc2 == null) && loc2.isSubMarine())
                {
                    loc1.push(loc4);
                    loc2.banner.showBabbles(false);
                }
                ++loc4;
            }
            return _view.bannerLayer.friends.getTweenSubmarineEffect(loc1);
        }

        private function _getTweenSubmarineEffectE():Array
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc1:*=[];
            var loc3:*=_data.enemyShips;
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                loc2 = loc3[loc4];
                if (!(loc2 == null) && loc2.isSubMarine())
                {
                    loc1.push(loc4);
                    loc2.banner.showBabbles(true);
                }
                ++loc4;
            }
            return _view.bannerLayer.enemys.getTweenSubmarineEffect(loc1);
        }

        private function _getTweenShowRaderOnBar():a24.tween.Tween24
        {
            var loc1:*=_data.combatData.getFormationID_e();
            var loc2:*=0;
            if (_sakuteki.isSuccess_f())
            {
                loc2 = _data.countShips_e();
            }
            return a24.tween.Tween24.parallel(_view.raderLayer.getTweenShowE(loc1, loc2));
        }

        private var _sakuteki:battle.models.attack.SakutekiData;
    }
}


//        class PhaseShien
package battle.phase.day
{
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.views.*;
    import common.debug.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import vo.*;

    public class PhaseShien extends battle.phase.PhaseBase
    {
        public function PhaseShien(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            _s = _data.combatDataD.shienData;
            if (_s.isSupportK())
            {
                _phasePreShien(_phaseShienK);
            }
            else if (_s.isSupportH())
            {
                _phasePreShien(_phaseShienH);
            }
            else if (_s.isSupportR())
            {
                _phasePreShien(_phaseShienR);
            }
            else
            {
                common.debug.Debug.log("[支援攻撃] - 無し");
                _view.bannerLayer.friends.tweenDefaultPositionAll();
                _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
                _view.bannerLayer.enemys.tweenDefaultPositionAll();
                _phaseEnd();
            }
            return;
        }

        private function _phasePreShien(arg1:Function):void
        {
            var nextPhase:Function;
            var formationE:int;
            var raderTween:a24.tween.Tween24;

            var loc1:*;
            nextPhase = arg1;
            if (_view.bannerLayer.enemys.isEnter())
            {
                _view.bannerLayer.friends.tweenDefaultPositionAll();
                _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
                _view.bannerLayer.enemys.tweenDefaultPositionAll();
                nextPhase();
            }
            else
            {
                formationE = _data.combatData.getFormationID_e();
                raderTween = _view.raderLayer.getTweenShowE(formationE, _data.countShips_e());
                a24.tween.Tween24.serial(a24.tween.Tween24.parallel(_view.infoLayer.getTween(5), _view.bannerLayer.enemys.getTweenEnter(), a24.tween.Tween24.func(raderTween.play)), a24.tween.Tween24.wait(0.2)).onComplete(function ():void
                {
                    _view.bannerLayer.friends.tweenDefaultPositionAll();
                    _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
                    return;
                }).play()
            }
            return;
        }

        private function _phaseShienK():void
        {
            common.debug.Debug.log("[支援攻撃] - 航空支援");
            _view.upperBar.show(5);
            a24.tween.Tween24.serial(_getTweenCutin(), new battle.phase.day.PhaseShienK(_view, _data).getTween()).onComplete(_phaseEnd).play();
            return;
        }

        private function _phaseShienH():void
        {
            common.debug.Debug.log("[支援攻撃] - 砲撃支援");
            _view.upperBar.show(6);
            a24.tween.Tween24.serial(_getTweenCutin(), new battle.phase.day.PhaseShienH(_view, _data, _s).getTween()).onComplete(_phaseEnd).play();
            return;
        }

        private function _phaseShienR():void
        {
            common.debug.Debug.log("[支援攻撃] - 雷撃支援");
            _view.upperBar.show(7);
            a24.tween.Tween24.serial(_getTweenCutin(), new battle.phase.day.PhaseShienR(_view, _data, _s).getTween()).onComplete(_phaseEnd).play();
            return;
        }

        private function _getTweenCutin():a24.tween.Tween24
        {
            var deckID:int;
            var ships:Array;
            var flagship:vo.UserShipData;
            var isDamaged:Boolean;
            var cutin:battle.display.cutin.SupportCutin;
            var chara:flash.display.Sprite;
            var charaCanvas:flash.display.Sprite;
            var attacher:manager.resource.IShipAttacher;

            var loc1:*;
            deckID = _s.getSupportDeckID();
            ships = DataFacade.getUserDeckData().getShipDataInDeck(deckID);
            flagship = ships[0];
            isDamaged = _s.isSupportDeck_FlagshipDamaged();
            cutin = new battle.display.cutin.SupportCutin(ships);
            chara = new flash.display.Sprite();
            charaCanvas = new flash.display.Sprite();
            attacher = AppFacade.createShipAttacher();
            attacher.stackFull(flagship.getCharaID(), chara, isDamaged ? 0 : 100);
            return a24.tween.Tween24.serial(cutin.getTweenInitialize(), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load)), a24.tween.Tween24.func(function ():void
            {
                var loc1:*=DataFacade.getStartData().getOffsetAtBattle(flagship.getCharaID(), isDamaged);
                chara.x = loc1.x;
                chara.y = loc1.y;
                chara.alpha = 0;
                return;
            }), a24.tween.Tween24.prop(charaCanvas).xy(-493, -70), a24.tween.Tween24.addChild(charaCanvas, chara), a24.tween.Tween24.addChild(_view.cutinLayer, cutin, charaCanvas), cutin.getTweenAnimation(), a24.tween.Tween24.serial(a24.tween.Tween24.tween(chara, 0.5).alpha(1).$$x(443), a24.tween.Tween24.tween(chara, 0.3).$$x(50), a24.tween.Tween24.func(common.util.SoundUtil.playVoiceAtRandom, flagship.getCharaID(), [16, 17, 18], [33, 33, 34]))).onComplete(a24.tween.Tween24.serial(a24.tween.Tween24.wait(0.3), a24.tween.Tween24.tween(chara, 0.5).alpha(0).$$x(220), a24.tween.Tween24.removeChild(cutin, chara)).play)
        }

        protected override function _phaseEnd():void
        {
            _view.contentsLayer.removeChildren();
            _view.topLayer.removeChildren();
            if (_s.isSupportK())
            {
                _view.upperBar.hide(5);
            }
            else if (_s.isSupportH())
            {
                _view.upperBar.hide(6);
            }
            else if (_s.isSupportR())
            {
                _view.upperBar.hide(7);
            }
            a24.tween.Tween24.wait(0.8).onComplete(super(
#error('findrop') _phaseEnd
            )._phaseEnd).play();
            return;
        }

        private var _s:battle.models.attack.ShienData;
    }
}


//        class PhaseShienH
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.main.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.views.*;
    import battle.views.layers.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.display.*;
    import res.battle.*;

    public class PhaseShienH extends battle.phase.PhaseBase
    {
        public function PhaseShienH(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.ShienData)
        {
            _s = arg3;
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            var loc7:*=0;
            var loc6:*=null;
            var loc1:*=null;
            var loc2:*=new res.battle.MCSupportH();
            loc2.stop();
            var loc3:*=[0, 8 / 30, 1 / 30, 11 / 30, 4 / 30, 6 / 30];
            var loc5:*=_data.enemyShips;
            var loc4:*=[];
            loc7 = 0;
            while (loc7 < 6)
            {
                if (loc6 = loc2["a" + (loc7 + 1)])
                {
                    loc1 = loc5[loc7];
                    if (loc1 && loc1.nowHP > 0)
                    {
                        loc6.visible = true;
                        loc6.stop();
                        loc4.push(a24.tween.Tween24.tween(loc6, loc6.totalFrames / 30).frame(loc6.totalFrames).delay(loc3[loc7]));
                    }
                    else
                    {
                        loc6.visible = false;
                    }
                }
                ++loc7;
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.contentsLayer, loc2), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_artillery), a24.tween.Tween24.parallel(loc4), _getTweenDamageEffect().delay(1)), a24.tween.Tween24.removeChild(loc2)).onComplete(_phaseEnd).play();
            return;
        }

        private function _getTweenDamageEffect():a24.tween.Tween24
        {
            var loc6:*=0;
            var loc2:*=null;
            var loc1:*=null;
            var loc7:*=_view.bombLayer;
            var loc5:*=_view.damageCanvas;
            var loc3:*=[];
            var loc4:*=_data.combatDataD.shienData.createFromHRShienData(_data);
            loc6 = 0;
            while (loc6 < loc4.length)
            {
                loc2 = loc4[loc6];
                loc1 = loc2.defender;
                if (!(loc1 == null) && loc1.nowHP > 0)
                {
                    common.debug.Debug.log(loc2);
                    loc5.add(loc2);
                    loc3.push(loc1.banner.getTweenDamage(loc1.nowHP, loc1.getMaxHp(), loc2.hasShield));
                    loc3.push(loc7.getTweenBomb(loc1, loc2.damage, "EXPLOSION_TYPE:LARGE"));
                }
                ++loc6;
            }
            return a24.tween.Tween24.parallel(loc3, loc5.getTweenAnimation());
        }

        protected override function _phaseEnd():void
        {
            _view.contentsLayer.removeChildren();
            _view.topLayer.removeChildren();
            super._phaseEnd();
            return;
        }

        private function _bulletStop(arg1:flash.display.MovieClip):Function
        {
            var bullet:flash.display.MovieClip;

            bullet = arg1;
            return function ():void
            {
                bullet.stop();
                return;
            }
        }

        private var _s:battle.models.attack.ShienData;
    }
}


//        class PhaseShienK
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.main.banner.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.util.*;
    import battle.views.*;
    import battle.views.effects.plane.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.events.*;
    import flash.geom.*;

    public class PhaseShienK extends battle.phase.PhaseBase
    {
        public function PhaseShienK(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            _canvas = new battle.views.effects.plane.SupportPlaneCanvas();
            a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(_canvas, "FlyPlane::EVENT_ANTIAIRCRAFT_F").onComplete(_antiAirCraft_f), a24.tween.Tween24.waitEvent(_canvas, "FlyPlane::EVENT_ANTIAIRCRAFT_E").onComplete(_antiAirCraft_e), a24.tween.Tween24.waitEvent(_canvas, "FlyPlane::EVENT_TORPEDO_F").onComplete(_torpedo_f), a24.tween.Tween24.waitEvent(_canvas, "FlyPlane::EVENT_TORPEDO_E").onComplete(_torpedo_e), a24.tween.Tween24.waitEvent(_canvas, "FlyPlane::EVENT_BOMBS_F").onComplete(_bakugeki_f), a24.tween.Tween24.waitEvent(_canvas, "FlyPlane::EVENT_BOMBS_E").onComplete(_bakugeki_e), a24.tween.Tween24.waitEvent(this, "complete"), a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.contentsLayer, _canvas), _canvas.getTween(_data.combatDataD.shienData), a24.tween.Tween24.removeChild(_canvas))).onComplete(_phaseEnd).play(true);
            return;
        }

        private function _antiAirCraft_f():void
        {
            var loc3:*=undefined;
            var loc4:*=null;
            var loc7:*=0;
            var loc2:*=null;
            var loc6:*=null;
            var loc1:*=0;
            var loc5:*;
            if ((loc5 = _data.combatDataD.shienData).hasStage2() != true)
            {
                common.debug.Debug.log("[航空戦] 対空砲火無し ");
            }
            else
            {
                common.debug.Debug.log("[航空戦] 対空砲火 ");
                if (_canvas.getPlaneCount_e() == 0)
                {
                    return;
                }
                loc3 = _data.hasAntiAircraftAbility_f();
                common.debug.Debug.log("自軍の対空能力：" + loc3);
                if (battle.util.BattleUtil.isAAAttackable(loc3))
                {
                    common.debug.Debug.log("対空能力有り");
                    loc4 = [a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_shoot)];
                    loc7 = 0;
                    while (loc7 < _data.friendShips.length)
                    {
                        loc2 = _data.friendShips[loc7];
                        if (loc2 != null)
                        {
                            loc6 = loc2.banner;
                            loc1 = loc3[loc7];
                            if (loc1 > 0)
                            {
                                loc4.push(loc6.getTweenAA(loc1).delay(Math.random() * 0.5));
                                loc4.push(loc6.getTweenAttackPos());
                            }
                        }
                        ++loc7;
                    }
                    a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc4), _view.bannerLayer.friends.getTweenDefaultPositionAll(), a24.tween.Tween24.ifCase(_data.baseData.isCombinedFriend(), _view.bannerLayer.friends_combined.getTweenDefaultPositionAll(), a24.tween.Tween24.wait(0))).play();
                }
                else
                {
                    common.debug.Debug.log("対空能力無し");
                }
            }
            return;
        }

        private function _antiAirCraft_e():void
        {
            return;
        }

        private function _torpedo_f():void
        {
            var loc5:*=null;
            var loc1:*=null;
            var loc3:*=null;
            var loc8:*=0;
            var loc6:*=null;
            var loc2:*=null;
            var loc4:*=null;
            var loc7:*;
            if ((loc7 = _data.combatDataD.shienData).hasStage3() == true)
            {
                common.debug.Debug.log("[航空戦] 魚雷発射 ");
                loc5 = new battle.views.effects.torpedo.AerialTorpedoSuperCanvas();
                loc1 = [];
                loc3 = [];
                loc8 = 0;
                while (loc8 < 6)
                {
                    if (loc7.getRaigekiFlgAtStage3_e()[loc8])
                    {
                        loc2 = (loc6 = _canvas.getRandomPlane_f()).getGlobalPos();
                        loc4 = battle.vo.EnemyShipData(_data.enemyShips[loc8]);
                        loc5.reserveTorpedoToShip(loc2, loc4);
                        loc3.push(loc4);
                    }
                    ++loc8;
                }
                common.debug.Debug.log("魚雷被弾する敵艦：" + loc3);
                _view.torpedoLayer.getTweenAerialTorpedoSuper(loc5).onComplete(_damageEffect).play();
            }
            return;
        }

        private function _torpedo_e():void
        {
            return;
        }

        private function _bakugeki_f():void
        {
            var loc3:*=_data.combatDataD.shienData;
            var loc2:*=loc3.hasBakugeki_f();
            var loc1:*=loc3.hasBakugeki_e();
            if (loc3.hasStage3() == true)
            {
                common.debug.Debug.log("[航空戦] 爆撃 ");
                common.debug.Debug.log("自艦隊への爆撃：" + (loc2 ? "有" : "無"));
                common.debug.Debug.log("敵艦隊への爆撃：" + (loc1 ? "有" : "無"));
                _view.bombLayer.getTweenBombs(__AS3__.vec.Vector.<Boolean>([loc2, loc1]), 1.5).play();
            }
            return;
        }

        private function _bakugeki_e():void
        {
            return;
        }

        private function _damageEffect():void
        {
            var loc8:*=0;
            var loc6:*=0;
            var loc3:*=null;
            var loc2:*=NaN;
            var loc5:*=_data.combatDataD.shienData;
            var loc7:*=[];
            var loc9:*=[];
            var loc1:*=loc5.getDamageAtStage3_e();
            var loc4:*=loc5.getHitStateAtStage3_e();
            loc8 = 0;
            while (loc8 < loc4.length)
            {
                if ((loc6 = loc4[loc8]) == 1 || 2)
                {
                    loc3 = _data.enemyShips[loc8];
                    if (!(loc3 == null || loc3.nowHP <= 0))
                    {
                        loc2 = loc1[loc8];
                        _view.damageCanvas.addDamegeNumber(loc3, loc2, loc6);
                        loc7.push(loc3.banner.getTweenDamage(loc3.nowHP, loc3.getMaxHp(), battle.util.BattleUtil.isShield(loc2)));
                        loc9.push(_view.bombLayer.getTweenBomb(loc3, loc2));
                    }
                }
                ++loc8;
            }
            a24.tween.Tween24.parallel(_view.damageCanvas.getTweenAnimation(), loc7, loc9).onComplete(dispatchEvent, new flash.events.Event("complete")).play();
            return;
        }

        protected override function _phaseEnd():void
        {
            _view.contentsLayer.removeChildren();
            _view.topLayer.removeChildren();
            super._phaseEnd();
            return;
        }

        private var _canvas:battle.views.effects.plane.SupportPlaneCanvas;
    }
}


//        class PhaseShienR
package battle.phase.day
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.main.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.views.*;
    import battle.views.layers.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.display.*;
    import res.battle.*;

    public class PhaseShienR extends battle.phase.PhaseBase
    {
        public function PhaseShienR(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:battle.models.attack.ShienData)
        {
            _s = arg3;
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            var loc7:*=0;
            var loc6:*=null;
            var loc1:*=null;
            var loc2:*=new res.battle.MCSupportR();
            var loc8:*;
            loc2.scaleY = loc8 = 1.35;
            loc2.scaleX = loc8;
            loc2.stop();
            var loc3:*=[0, 8 / 30, 1 / 30, 11 / 30, 4 / 30, 6 / 30];
            var loc5:*=_data.enemyShips;
            var loc4:*=[];
            loc7 = 0;
            while (loc7 < 6)
            {
                if (loc6 = loc2["t" + (loc7 + 1)])
                {
                    loc1 = loc5[loc7];
                    if (loc1 && loc1.nowHP > 0)
                    {
                        loc6.visible = true;
                        loc6.stop();
                        loc4.push(a24.tween.Tween24.tween(loc6, loc6.totalFrames / 30).frame(loc6.totalFrames).delay(loc3[loc7]));
                    }
                    else
                    {
                        loc6.visible = false;
                    }
                }
                ++loc7;
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.contentsLayer, loc2), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_gyorai), a24.tween.Tween24.parallel(loc4), _getTweenDamageEffect().delay(1.5)), a24.tween.Tween24.removeChild(loc2)).onComplete(_phaseEnd).play();
            return;
        }

        private function _getTweenDamageEffect():a24.tween.Tween24
        {
            var loc6:*=0;
            var loc2:*=null;
            var loc1:*=null;
            var loc7:*=_view.bombLayer;
            var loc5:*=_view.damageCanvas;
            var loc3:*=[];
            var loc4:*=_data.combatDataD.shienData.createFromHRShienData(_data);
            loc6 = 0;
            while (loc6 < loc4.length)
            {
                loc2 = loc4[loc6];
                loc1 = loc2.defender;
                if (!(loc1 == null) && loc1.nowHP > 0)
                {
                    common.debug.Debug.log(loc2);
                    loc5.add(loc2);
                    loc3.push(loc1.banner.getTweenDamage(loc1.nowHP, loc1.getMaxHp(), loc2.hasShield));
                    loc3.push(loc7.getTweenBomb(loc2.defender, loc2.damage, "EXPLOSION_TYPE:LARGE"));
                }
                ++loc6;
            }
            return a24.tween.Tween24.parallel(loc3, loc5.getTweenAnimation());
        }

        protected override function _phaseEnd():void
        {
            _view.contentsLayer.removeChildren();
            _view.topLayer.removeChildren();
            super._phaseEnd();
            return;
        }

        private function _bulletStop(arg1:flash.display.MovieClip):Function
        {
            var bullet:flash.display.MovieClip;

            bullet = arg1;
            return function ():void
            {
                bullet.stop();
                return;
            }
        }

        private var _s:battle.models.attack.ShienData;
    }
}


//      package extra
//        class PhaseRation
package battle.phase.extra
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.*;
    import battle.phase.*;
    import battle.views.*;
    import battle.vo.*;
    import common.util.*;
    import flash.geom.*;
    import flash.utils.*;
    import scene.battle.mc.*;

    public class PhaseRation extends battle.phase.PhaseDayNightBase
    {
        public function PhaseRation(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:Boolean)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function start():void
        {
            _phaseRationReady();
            return;
        }

        private function _phaseRationReady():void
        {
            var loc2:*=_getRationShipMemIds(false);
            var loc1:*=_createEatingDic(_data.friendShips, loc2);
            _phaseRation(loc1);
            return;
        }

        private function _phaseRation(arg1:flash.utils.Dictionary):void
        {
            var loc1:*=null;
            var loc3:*=[];
            var loc5:*=0;
            var loc4:*=arg1;
            for (var loc2:* in loc4)
            {
                loc1 = _getTweenRation(loc2, arg1[loc2]);
                loc3.push(loc1);
            }
            if (loc3.length > 0)
            {
                a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc3), a24.tween.Tween24.wait(0.5)).onComplete(_phaseRationCombinedReady).play();
            }
            else
            {
                _phaseRationCombinedReady();
            }
            return;
        }

        private function _phaseRationCombinedReady():void
        {
            var loc2:*=_getRationShipMemIds(true);
            var loc1:*=_createEatingDic(_data.friendShips_combined, loc2);
            _phaseRationCombined(loc1);
            return;
        }

        private function _phaseRationCombined(arg1:flash.utils.Dictionary):void
        {
            var loc1:*=null;
            var loc3:*=[];
            var loc5:*=0;
            var loc4:*=arg1;
            for (var loc2:* in loc4)
            {
                loc1 = _getTweenRation(loc2, arg1[loc2]);
                loc3.push(loc1);
            }
            if (loc3.length > 0)
            {
                a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc3), a24.tween.Tween24.wait(1)).onComplete(_finalize).play();
            }
            else
            {
                _finalize();
            }
            return;
        }

        private function _finalize():void
        {
            _voice_ship = null;
            _phaseEnd();
            return;
        }

        private function _getTweenRation(arg1:battle.vo.FriendShipData, arg2:Array):a24.tween.Tween24
        {
        }

        private function __getTweenSingleRation(arg1:battle.vo.FriendShipData, arg2:Array):a24.tween.Tween24
        {
            var loc3:*=arg1.banner.getGlobalPos();
            var loc2:*;
            (loc2 = new scene.battle.mc.MCRationHukidashi()).x = loc3.x + 160 + 13;
            loc2.y = loc3.y + 40 / 2;
            if (arg2[0] != 145)
            {
                if (arg2[0] == 150)
                {
                    loc2.gotoAndStop(2);
                }
            }
            else
            {
                loc2.gotoAndStop(1);
            }
            var loc1:*=new KiraAnimation();
            loc1.x = loc3.x + 160 / 2;
            loc1.y = loc3.y + 40 / 2;
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop(loc2).alpha(0).$$x(-50), a24.tween.Tween24.addChild(_view.bannerLayer.effectLayer, loc2), _createHukidashiShowTween(loc2), a24.tween.Tween24.func(loc1.play, _view.bannerLayer.effectLayer), a24.tween.Tween24.wait(1), _createHukidashiHideTween(loc2));
        }

        private function __getTweenDoubleRation(arg1:battle.vo.FriendShipData, arg2:Array):a24.tween.Tween24
        {
            var loc2:*=null;
            var loc5:*=arg1.banner.getGlobalPos();
            var loc3:*;
            (loc3 = new scene.battle.mc.MCRationHukidashi()).gotoAndStop(1);
            loc3.x = loc5.x + 160 + 13;
            loc3.y = loc5.y + 40 / 2;
            var loc4:*;
            (loc4 = new scene.battle.mc.MCRationHukidashi()).gotoAndStop(2);
            loc4.x = loc5.x + 160 + 13 + 50;
            loc4.y = loc5.y + 40 / 2;
            var loc1:*=new KiraAnimation();
            loc1.x = loc5.x + 160 / 2;
            loc1.y = loc5.y + 40 / 2;
            if (_voice_ship != arg1)
            {
                loc2 = a24.tween.Tween24.wait(0);
            }
            else
            {
                loc2 = a24.tween.Tween24.func(common.util.SoundUtil.playVoice, arg1.getCharaID(), 26);
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop([loc3, loc4]).alpha(0).$$x(-50), a24.tween.Tween24.addChild(_view.bannerLayer.effectLayer, loc4, loc3), a24.tween.Tween24.parallel(_createHukidashiShowTween(loc3), _createHukidashiShowTween(loc4).delay(0.1)), loc2, a24.tween.Tween24.func(loc1.play, _view.bannerLayer.effectLayer), a24.tween.Tween24.wait(1), a24.tween.Tween24.parallel(_createHukidashiHideTween(loc3), _createHukidashiHideTween(loc4)));
        }

        private function _getRationShipMemIds(arg1:Boolean):Array
        {
            if (_isNight)
            {
                return _data.combatDataN.getRationShips(true, arg1);
            }
            return _data.combatDataD.getRationShips(true, arg1);
        }

        private function _createEatingDic(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg2:Array):flash.utils.Dictionary
        {
            var loc5:*=0;
            var loc3:*=null;
            var loc1:*=0;
            var loc2:*=null;
            var loc4:*=new flash.utils.Dictionary();
            if (arg2.length == 0)
            {
                return loc4;
            }
            loc5 = 0;
            while (loc5 < arg1.length)
            {
                if ((loc3 = arg1[loc5] as battle.vo.FriendShipData) != null)
                {
                    loc1 = loc3.getMemId();
                    if (arg2.indexOf(loc1) != -1)
                    {
                        loc2 = loc3.useRation();
                        if (_voice_ship == null && loc2.length > 1)
                        {
                            _voice_ship = loc3;
                        }
                        loc4[loc3] = loc2;
                    }
                }
                ++loc5;
            }
            return loc4;
        }

        private function _createHukidashiShowTween(arg1:scene.battle.mc.MCRationHukidashi):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.tween(arg1, 0.2, a24.tween.Ease24._1_SineOut).alpha(1).$$x(50), a24.tween.Tween24.wait(0.25), a24.tween.Tween24.tween(arg1, 0.15, a24.tween.Ease24._1_SineOut).scale(1.2).align(12), a24.tween.Tween24.tween(arg1, 0.3, a24.tween.Ease24._1_SineOut).scale(1).align(12));
        }

        private function _createHukidashiHideTween(arg1:scene.battle.mc.MCRationHukidashi):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.tween(arg1, 0.15, a24.tween.Ease24._1_SineOut).scale(1.2).align(12), a24.tween.Tween24.tween(arg1, 0.1).scale(0));
        }

        private var _voice_ship:battle.vo.FriendShipData=null;
    }
}

import __AS3__.vec.*;
import a24.tween.*;
import flash.display.*;
import scene.battle.mc.*;


class KiraAnimation extends flash.display.Sprite
{
    public function KiraAnimation()
    {
        var loc2:*=0;
        var loc1:*=null;
        super();
        _kira = new __AS3__.vec.Vector.<Kira>();
        loc2 = 0;
        while (loc2 < _xPosList.length)
        {
            loc1 = new Kira(_xPosList[loc2], _yPosList[loc2], _delayList[loc2]);
            _kira.push(loc1);
            ++loc2;
        }
        return;
    }

    public function play(arg1:flash.display.DisplayObjectContainer):void
    {
        var loc2:*=0;
        var loc1:*=[];
        loc2 = 0;
        while (loc2 < _kira.length)
        {
            loc1.push(_kira[loc2].getPlayTween(this));
            ++loc2;
        }
        a24.tween.Tween24.serial(a24.tween.Tween24.addChild(arg1, this), a24.tween.Tween24.parallel(loc1), a24.tween.Tween24.removeChild(this)).onComplete(_finalize).play();
        return;
    }

    private function _finalize():void
    {
        _kira = null;
        return;
    }

    private const _xPosList:Array=[0, 0, -30, 30, 0, -50, 50, 0, -65, 65];

    private const _yPosList:Array=[0, -15, 10, 10, 20, -25, -25, -35, 30, 30];

    private const _delayList:Array=[0, 0.06, 0.06, 0.06, 0.12, 0.12, 0.12, 0.18, 0.18, 0.18];

    private var _kira:__AS3__.vec.Vector.<Kira>;
}

class Kira extends scene.battle.mc.MCRationKira
{
    public function Kira(arg1:Number, arg2:Number, arg3:Number)
    {
        super();
        _baseX = arg1;
        _baseY = arg2;
        _delay = arg3;
        stop();
        alpha = 0;
        return;
    }

    public override function play():void
    {
        return;
    }

    public function getPlayTween(arg1:flash.display.DisplayObjectContainer):a24.tween.Tween24
    {
        var loc1:*=Math.random() * 0.6;
        return a24.tween.Tween24.serial(a24.tween.Tween24.prop(this).xy(_baseX + Math.random() * 16 - 8, _baseY + Math.random() * 4 - 2), a24.tween.Tween24.addChild(arg1, this), a24.tween.Tween24.func(super(
#error('findrop') play
        ).play), a24.tween.Tween24.tween(this, 0.1).alpha(1), a24.tween.Tween24.wait(0.2 + Math.random() * loc1), a24.tween.Tween24.tween(this, 0.1).alpha(0), a24.tween.Tween24.wait(0.1), a24.tween.Tween24.tween(this, 0.1).alpha(1), a24.tween.Tween24.wait(0.2 + Math.random() * (0.6 - loc1)), a24.tween.Tween24.tween(this, 0.2).alpha(0), a24.tween.Tween24.func(stop), a24.tween.Tween24.removeChild(this)).delay(_delay);
    }

    private var _baseX:Number;

    private var _baseY:Number;

    private var _delay:Number;
}

//      package night
//        class PhaseAttack
package battle.phase.night
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.display.main.*;
    import battle.events.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.phase.*;
    import battle.phase.attack.*;
    import battle.util.*;
    import battle.views.*;
    import battle.views.effects.torpedo.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.geom.*;
    import vo.*;

    public class PhaseAttack extends battle.phase.PhaseDayNightBase
    {
        public function PhaseAttack(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, true);
            return;
        }

        public override function start():void
        {
            _view.bannerLayer.friends.tweenDefaultPositionAll();
            _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
            _view.bannerLayer.enemys.tweenDefaultPositionAll();
            _phaseAttack();
            return;
        }

        protected function _phaseAttack():void
        {
            var loc1:*=_data.combatDataN.hougekiData.createAttackArray(_data.friendShips, _data.enemyShips);
            phaseAttackTurn(loc1);
            return;
        }

        public function phaseAttackTurn(arg1:__AS3__.vec.Vector.<battle.models.attack.AttackData>):void
        {
            if (arg1.length == 0)
            {
                common.debug.Debug.log("攻撃フェーズ終了");
                _phaseEnd();
                return;
            }
            var loc1:*=arg1[0];
            var loc2:*=arg1[0].specialFlg;
            if (loc2 != 0)
            {
                if (loc2 != 1)
                {
                    common.debug.Debug.log("特殊攻撃");
                    _phaseAttackSuper(arg1);
                }
                else
                {
                    common.debug.Debug.log("連続攻撃");
                    _phaseAttackDouble(arg1);
                }
            }
            else
            {
                common.debug.Debug.log("通常攻撃");
                _phaseAttackNormal(arg1);
            }
            return;
        }

        private function _phaseAttackNormal(arg1:__AS3__.vec.Vector.<battle.models.attack.AttackData>):void
        {
            var loc6:*=null;
            var loc5:*;
            var loc3:*=(loc5 = arg1.shift()).attacker;
            var loc7:*=loc5.slotitemMasterID;
            var loc4:*=loc5.defender;
            var loc1:*=loc3 is battle.vo.FriendShipData;
            var loc2:*=new battle.display.cutin.Cutin(loc1, true);
            loc2.addEventListener("ShipVoiceEvent::VOICE", _handlePlayVoiceInCutin);
            if (loc5.rocketFlg)
            {
                loc6 = new battle.phase.attack.PhaseRocket(_view, _data, loc5, true);
            }
            else if (loc5.hougekiAttackType != 7)
            {
                if (loc5.hougekiAttackType != 8)
                {
                    if (loc5.hougekiAttackType != 9)
                    {
                        loc6 = new battle.phase.attack.PhaseAttackNormal(_view, _data, loc5, true);
                    }
                    else
                    {
                        loc6 = new battle.phase.attack.PhaseTorpedo(_view, _data, loc5, true);
                    }
                }
                else
                {
                    loc6 = new battle.phase.attack.PhaseBakurai(_view, _data, loc5, true);
                }
            }
            else
            {
                loc6 = new battle.phase.attack.PhaseKansaiki(_view, _data, loc5, true);
            }
            a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc6, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc6.start)).onComplete(_phaseGekichinCutin, phaseAttackTurn, arg1).play();
            return;
        }

        private function _phaseAttackDouble(arg1:__AS3__.vec.Vector.<battle.models.attack.AttackData>):void
        {
            var loc4:*=null;
            var loc3:*;
            var loc1:*=(loc3 = arg1.shift()).getSlotitemID(0);
            var loc2:*=DataFacade.getMasterSlotItemData();
            var loc5:*;
            if ((loc5 = loc2.getSlotItemEquipType(loc1)) == 1 || loc5 == 2 || loc5 == 3 || loc5 == 4 || loc5 == 38)
            {
                (loc4 = new battle.phase.attack.PhaseDoubleH(_view, _data, loc3, true)).getTween().onComplete(_phaseGekichinCutin, phaseAttackTurn, arg1).play();
            }
            else
            {
                (loc4 = new battle.phase.attack.PhaseDoubleR(_view, _data, loc3, true)).getTween().onComplete(_phaseGekichinCutin, phaseAttackTurn, arg1).play();
            }
            return;
        }

        private function _phaseAttackSuper(arg1:__AS3__.vec.Vector.<battle.models.attack.AttackData>):void
        {
            var loc6:*=null;
            var loc14:*=null;
            var loc5:*=null;
            var loc13:*=null;
            var loc7:*=null;
            var loc2:*=null;
            var loc12:*;
            var loc10:*;
            var loc11:*=(loc10 = (loc12 = arg1.shift()).attacker).getCharaID();
            var loc1:*=loc10.getCondition();
            var loc3:*=loc10 is battle.vo.FriendShipData;
            var loc4:*=loc12.getSlotitemID(0);
            var loc8:*=loc12.getSlotitemID(1);
            var loc9:*=loc12.getSlotitemID(2);
        }

        private function _getTweenAttackSuperH(arg1:battle.models.attack.AttackData):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[超攻撃-砲撃] " + arg1), a24.tween.Tween24.parallel(arg1.attacker.banner.getTweenAttackPos(), arg1.defender.banner.getTweenDefendEffect()), _getTweenDamageEffect(arg1.attacker, arg1.defender, arg1.damage, arg1.hitState));
        }

        private function _getTweenAttackSuperR(arg1:battle.models.attack.AttackData):a24.tween.Tween24
        {
            var loc6:*=new battle.views.effects.torpedo.TorpedoCanvas(0);
            var loc4:*=arg1.attacker;
            var loc1:*=arg1.getDamage(0);
            var loc2:*=arg1.getDamage(1);
            var loc5:*=arg1.defender;
            loc6.reserveGyorai2(loc4, loc5);
            _view.damageCanvas.addDamegeNumber(loc5, arg1.damage, arg1.hitState);
            var loc3:*=battle.util.BattleUtil.isShield(loc1) || battle.util.BattleUtil.isShield(loc2);
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(common.debug.Debug.log, "[超攻撃-雷撃] " + arg1), loc4.banner.getTweenGyoraiShoot(), _view.torpedoLayer.getTweenRaigeki(loc6), a24.tween.Tween24.parallel(_view.torpedoLayer.getTweenWaterBomb(__AS3__.vec.Vector.<battle.vo.BattleShipData>([loc5])), a24.tween.Tween24.parallel(_view.bombLayer.getTweenBomb(loc5, 0, "EXPLOSION_TYPE:SMALL"), _view.bombLayer.getTweenBomb(loc5, 0, "EXPLOSION_TYPE:SMALL").delay(0.35), loc5.banner.getTweenDamage(loc5.nowHP, loc5.getMaxHp(), loc3)).delay(0.3), _view.damageCanvas.getTweenAnimation().delay(0.6)));
        }

        private function _getTweenDamageEffect(arg1:battle.vo.BattleShipData, arg2:battle.vo.BattleShipData, arg3:Number, arg4:int):a24.tween.Tween24
        {
            var loc1:*=_view.damageCanvas;
            if (arg1 == null)
            {
                loc1.addDamegeNumber(arg2, arg3, arg4, false);
                return a24.tween.Tween24.parallel(loc1.getTweenAnimation(), arg2.banner.getTweenDamage(arg2.nowHP, arg2.getMaxHp(), battle.util.BattleUtil.isShield(arg3)), _view.bombLayer.getTweenBomb(arg2, arg3));
            }
            loc1.addDamegeNumber(arg2, arg3, arg4);
            return a24.tween.Tween24.parallel(loc1.getTweenAnimation(), arg2.banner.getTweenDamage(arg2.nowHP, arg2.getMaxHp(), battle.util.BattleUtil.isShield(arg3)), _view.bombLayer.getTweenBomb(arg2, arg3), arg1.banner.getTweenDefaultPos().delay(0.1));
        }

        private function _getTweenDamageEffectSSF(arg1:battle.vo.BattleShipData, arg2:battle.vo.BattleShipData, arg3:Number, arg4:int):a24.tween.Tween24
        {
            _view.damageCanvas.addDamegeNumber(arg2, arg3, arg4);
            var loc2:*=battle.util.BattleUtil.isShield(arg3);
            var loc1:*=new flash.geom.Point((arg2 is battle.vo.EnemyShipData ? -1 : 1) * 160 / 5 * 2, 0);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.parallel(arg2.banner.getTweenDamage(arg2.nowHP, arg2.getMaxHp(), loc2), _view.bombLayer.getTweenBomb(arg2, 0, "EXPLOSION_TYPE:LARGE"), _view.bombLayer.getTweenBomb(arg2, 0, "EXPLOSION_TYPE:MIZUHASIRA_BAKURAI", loc1)), a24.tween.Tween24.parallel(arg2.banner.getTweenDamageEffect(), _view.bombLayer.getTweenBomb(arg2, 0, "EXPLOSION_TYPE:LARGE")).delay(0.3), a24.tween.Tween24.parallel(arg2.banner.getTweenDamageEffect(), _view.bombLayer.getTweenBomb(arg2, 0, "EXPLOSION_TYPE:LARGE")).delay(0.6), a24.tween.Tween24.parallel(arg2.banner.getTweenDamageEffect(), _view.bombLayer.getTweenBomb(arg2, 0, "EXPLOSION_TYPE:LARGE"), _view.bombLayer.getTweenBomb(arg2, 0, "EXPLOSION_TYPE:MIZUHASIRA_BAKURAI", loc1), _view.damageCanvas.getTweenAnimation(), arg1.banner.getTweenDefaultPos()).delay(1.4)));
        }

        private function _getTweenDamage(arg1:battle.vo.BattleShipData, arg2:Boolean):a24.tween.Tween24
        {
            return a24.tween.Tween24.parallel(arg1.banner.getTweenDamage(arg1.nowHP, arg1.getMaxHp(), arg2), _view.bombLayer.getTweenBomb(arg1, 0, "EXPLOSION_TYPE:LARGE"));
        }

        private function _handlePlayVoiceInCutin(arg1:battle.events.ShipVoiceEvent):void
        {
            var loc1:*=0;
            var loc3:*=0;
            var loc2:*=arg1.ship;
            if (loc2 is battle.vo.FriendShipData)
            {
                loc1 = loc2.getCharaID();
                loc3 = 17;
                if (loc1 == 432 || loc1 == 353)
                {
                    loc3 = 917;
                }
                common.util.SoundUtil.playVoice(loc1, loc3);
            }
            else
            {
                battle.vo.EnemyShipData(loc2).playVoice_Offence();
            }
            return;
        }

        private function _playVoiceInCutinSuper(arg1:battle.vo.BattleShipData):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (arg1 is battle.vo.FriendShipData)
            {
                loc1 = arg1.getCharaID();
                loc2 = 17;
                if (loc1 == 432 || loc1 == 353)
                {
                    loc2 = 917;
                }
                common.util.SoundUtil.playVoice(loc1, loc2);
            }
            else
            {
                battle.vo.EnemyShipData(arg1).playVoice_Offence();
            }
            return;
        }
    }
}


//        class PhaseEnding
package battle.phase.night
{
    import a24.tween.*;
    import battle.models.*;
    import battle.phase.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;
    import flash.events.*;
    import flash.media.*;

    public class PhaseEnding extends battle.phase.PhaseDayNightBase
    {
        public function PhaseEnding(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:*)
        {
            _initHPs_e = arg3;
            super(arg1, arg2, true);
            return;
        }

        public override function start():void
        {
            if (_data.combatDataN.hasTouchPlane_f())
            {
                _view.raderLayer.rader_e.hideTouchPlane();
            }
            if (_data.combatDataN.hasTouchPlane_e())
            {
                _view.raderLayer.rader_f.hideTouchPlane();
            }
            _view.shutter.setDark();
            if (!(_data.combatCount == 1 && _data.combatData.hasNextDay() && BattleAssets.isSameBGM(_data.baseData.isBossMap(), _data.baseData.areaID, _data.baseData.mapNo)))
            {
                common.util.SoundUtil.stopBGMFadeout("MAIN_BGM", 1.2);
            }
            _phaseWaitGaugeBomb();
            return;
        }

        private function _phaseWaitGaugeBomb():void
        {
            if (!(_view.hpGaugeLayer.hpGauge == null) && _view.hpGaugeLayer.hpGauge.animateNow == true)
            {
                a24.tween.Tween24.wait(0.5).onComplete(_phaseWaitGaugeBomb).play();
            }
            else
            {
                a24.tween.Tween24.wait(1).onComplete(_phaseBossAgonies).play();
            }
            return;
        }

        private function _phaseBossAgonies():void
        {
            var loc2:*=0;
            var loc1:*=null;
            var loc3:*=battle.vo.EnemyShipData(_data.enemyShips[0]);
            if (loc3.eVoiceID > 0)
            {
                if (loc3.nowHP <= 0 && _initHPs_e[0] > 0)
                {
                    if (!(_view.hpGaugeLayer.hpGauge == null) && _view.hpGaugeLayer.hpGauge.bombed == true)
                    {
                        loc2 = loc3.eVoiceID;
                        loc1 = common.util.SoundUtil.playVoice(9998, loc2, _handleAgoniesEnd, _handleAgoniesErrorEnd);
                        if (loc1 != null)
                        {
                            return;
                        }
                    }
                }
            }
            _phaseWait();
            return;
        }

        private function _handleAgoniesEnd(arg1:flash.events.Event=null):void
        {
            common.debug.Debug.log("ボスボイス再生");
            _phaseWait();
            return;
        }

        private function _handleAgoniesErrorEnd(arg1:Error=null):void
        {
            common.debug.Debug.log("ボスボイス再生エラー");
            _phaseWait();
            return;
        }

        private function _phaseWait():void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.wait(1), a24.tween.Tween24.parallel(a24.tween.Tween24.func(_view.shutter.close), a24.tween.Tween24.waitEvent(_view.shutter, "ShutterView::EVENT_CLOSED_COMPLETE"))).onComplete(_phaseEnd).play();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//        class PhaseOpening
package battle.phase.night
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.*;
    import battle.display.yasen.*;
    import battle.models.*;
    import battle.phase.*;
    import battle.phase.extra.*;
    import battle.util.*;
    import battle.views.*;
    import battle.views.effects.flare.*;
    import battle.vo.*;
    import common.*;
    import common.debug.*;
    import common.display.*;
    import common.util.*;
    import flash.geom.*;
    import res.battle.mc.*;

    public class PhaseOpening extends battle.phase.PhaseDayNightBase
    {
        public function PhaseOpening(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, true);
            return;
        }

        public override function start():void
        {
            _phaseConnection();
            return;
        }

        private function _phaseConnection():void
        {
            var loc1:*=0;
            if (_data.baseData.isCombinedFriend() != true)
            {
                loc1 = _data.friendShips[0].getCharaID();
            }
            else
            {
                loc1 = _data.friendShips_combined[0].getCharaID();
            }
            var loc2:*=18;
            if (loc1 == 432 || loc1 == 353)
            {
                loc2 = 918;
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(_view.shutter, "ShutterView::EVENT_OPENED_COMPLETE"), a24.tween.Tween24.func(_view.shutter.open), a24.tween.Tween24.func(common.util.SoundUtil.playVoice, loc1, loc2))).onComplete(_phaseOpening).play();
            return;
        }

        private function _phaseOpening():void
        {
            battle.BattleConsts.initEnemyVoice(_data);
            var loc2:*=new battle.display.yasen.YasenStartTextView();
            loc2.x = common.Consts.CENTER_W;
            loc2.y = common.Consts.CENTER_H;
            var loc3:*=a24.tween.Tween24.wait(0);
            if (_view.bannerLayer.friends.isEnter() != false)
            {
                if (_data.baseData.isCombinedFriend())
                {
                    loc3 = a24.tween.Tween24.parallel(_view.bannerLayer.friends.getTweenExit(false), _view.bannerLayer.friends_combined.getTweenMove_Combined(false).delay(0.2));
                }
            }
            else
            {
                loc3 = _view.bannerLayer.friends.getTweenEnter(false);
            }
            var loc1:*=a24.tween.Tween24.wait(0);
            if (_view.bannerLayer.enemys.isEnter() == false)
            {
                loc1 = _view.bannerLayer.enemys.getTweenEnter(false);
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.topLayer, loc2), loc2.getTweenShow(), a24.tween.Tween24.wait(1), loc2.getTweenHide(), a24.tween.Tween24.removeChild(loc2), a24.tween.Tween24.parallel(loc3, loc1)).onComplete(_phaseShowRader).play();
            return;
        }

        private function _phaseShowRader():void
        {
            if (!_view.raderLayer.rader_f.isJinShow())
            {
                _view.raderLayer.getTweenShowF(_data).play();
            }
            if (!_view.raderLayer.rader_e.isJinShow())
            {
                _view.raderLayer.getTweenShowE(_data.combatData.getFormationID_e(), _data.countShips_e()).play();
            }
            _phaseTouchPlane();
            return;
        }

        private function _phaseTouchPlane():void
        {
            if (_data.combatDataN.hasTouchPlane_f())
            {
                _view.raderLayer.rader_e.showTouchPlane(_data.combatDataN.getTouchPlaneID_f(), false);
            }
            if (_data.combatDataN.hasTouchPlane_e())
            {
                _view.raderLayer.rader_f.showTouchPlane(_data.combatDataN.getTouchPlaneID_e(), false);
            }
            _phaseRation();
            return;
        }

        private function _phaseRation():void
        {
            common.debug.Debug.log("[Phase 戦闘糧食]");
            var loc1:*=new battle.phase.extra.PhaseRation(_view, _data, _isNight);
            loc1.getTween().onComplete(_phaseSearchlight).play();
            return;
        }

        private function _phaseSearchlight():void
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc7:*=null;
            var loc6:*=null;
            var loc1:*=null;
            var loc8:*=false;
            var loc10:*=false;
            var loc4:*;
            if ((loc4 = _getTweenSearchLight_f()) != null)
            {
                loc8 = true;
            }
            else
            {
                loc4 = a24.tween.Tween24.wait(0);
            }
            var loc5:*;
            if ((loc5 = _getTweenSearchLight_e()) != null)
            {
                loc8 = true;
            }
            else
            {
                loc5 = a24.tween.Tween24.wait(0);
            }
            var loc9:*=a24.tween.Tween24.wait(0);
            var loc15:*=a24.tween.Tween24.wait(0);
            var loc12:*=a24.tween.Tween24.wait(0);
            if (_data.combatDataN.isShootFlare_f())
            {
                loc2 = _data.combatDataN.getShootFlareIndex_f();
                if (_data.baseData.isCombinedFriend() != true)
                {
                    loc3 = _data.friendShips[loc2];
                }
                else
                {
                    loc3 = _data.friendShips_combined[loc2];
                }
                loc15 = loc3.banner.getTweenFlareShoot();
                loc7 = new battle.views.effects.flare.FlareEffect(true);
                loc12 = a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.cutinLayer, loc7), loc7.getTween());
                loc10 = true;
            }
            var loc14:*=a24.tween.Tween24.wait(0);
            var loc13:*=a24.tween.Tween24.wait(0);
            if (_data.combatDataN.isShootFlare_e())
            {
                loc2 = _data.combatDataN.getShootFlareIndex_e();
                loc3 = _data.enemyShips[loc2];
                loc14 = loc3.banner.getTweenFlareShoot();
                loc6 = new battle.views.effects.flare.FlareEffect(false);
                loc13 = a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.cutinLayer, loc6), loc6.getTween());
                loc10 = true;
            }
            if (loc10)
            {
                loc1 = new common.display.FadeLayer(16777215);
                loc9 = a24.tween.Tween24.serial(loc1.getTween(0, 0), a24.tween.Tween24.addChild(_view.cutinLayer, loc1), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_shoumeidan), loc1.getTween(0.5, 0.17), loc1.getTween(0, 0.17), a24.tween.Tween24.removeChild(loc1));
            }
            var loc11:*=loc10 ? 3.2 : 0;
            a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc15, loc14), a24.tween.Tween24.parallel(loc4.delay(loc11), loc5.delay(loc11), loc9.delay(1.17), loc12.delay(1.17), loc13.delay(1.17))).onComplete(_phaseEnd).play();
            return;
        }

        private function _getTweenSearchLight_f():a24.tween.Tween24
        {
            var loc1:*=undefined;
            if (_data.baseData.isCombinedFriend() != true)
            {
                loc1 = _data.friendShips;
            }
            else
            {
                loc1 = _data.friendShips_combined;
            }
            return _getTweenSearchLight(loc1);
        }

        private function _getTweenSearchLight_e():a24.tween.Tween24
        {
            return _getTweenSearchLight(_data.enemyShips);
        }

        private function _getTweenSearchLight(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>):a24.tween.Tween24
        {
            var loc6:*=0;
            var loc4:*=null;
            var loc3:*=0;
            var loc1:*=0;
            var loc5:*=new __AS3__.vec.Vector.<int>();
            loc6 = 0;
            while (loc6 < arg1.length)
            {
                loc4 = arg1[loc6];
                loc3 = battle.util.SlotitemUtil.hasSearchLight(loc4);
                if (loc4 == null || loc4.nowHP <= 1 || loc4.isTaihi() == true)
                {
                    loc5.push(0);
                }
                else
                {
                    loc5.push(battle.util.SlotitemUtil.hasSearchLight(loc4));
                }
                ++loc6;
            }
            var loc2:*=null;
            if (loc5.indexOf(42) != -1)
            {
                loc1 = loc5.indexOf(42);
                loc2 = arg1[loc1];
                common.debug.Debug.log("＜大型＞探照灯: " + loc2);
                return _getLargeSearchLightAnimation(loc2);
            }
            if (loc5.indexOf(29) != -1)
            {
                loc1 = loc5.indexOf(29);
                loc2 = arg1[loc1];
                common.debug.Debug.log("＜通常＞探照灯: " + loc2);
                return _getSearchLightAnimation(loc2);
            }
            return null;
        }

        private function _getSearchLightAnimation(arg1:battle.vo.BattleShipData):a24.tween.Tween24
        {
            var loc1:*=arg1.banner.getGlobalPos(true);
            var loc2:*=new res.battle.mc.MCSearchlight();
            if (arg1.banner.friendBanner != true)
            {
                loc2.scaleX = -1;
                loc2.x = loc1.x - 160 / 2 - 10;
            }
            else
            {
                loc2.x = loc1.x + 160 / 2 + 10;
            }
            loc2.y = loc1.y;
            loc2.gotoAndStop(1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.contentsLayer, loc2), common.util.MCUtil.frameTween(loc2, 1, loc2.totalFrames), a24.tween.Tween24.removeChild(loc2));
        }

        private function _getLargeSearchLightAnimation(arg1:battle.vo.BattleShipData):a24.tween.Tween24
        {
            var loc1:*=arg1.banner.getGlobalPos(true);
            var loc2:*=new res.battle.mc.MCSearchlightLarge();
            if (arg1.banner.friendBanner != true)
            {
                loc2.scaleX = -1;
                loc2.x = loc1.x - 160 / 2 - 10;
            }
            else
            {
                loc2.x = loc1.x + 160 / 2 + 10;
            }
            loc2.y = loc1.y;
            loc2.gotoAndStop(1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.contentsLayer, loc2), common.util.MCUtil.frameTween(loc2, 1, loc2.totalFrames), a24.tween.Tween24.removeChild(loc2));
        }
    }
}


//      class PhaseBase
package battle.phase
{
    import a24.tween.*;
    import battle.models.*;
    import battle.views.*;
    import flash.events.*;

    public class PhaseBase extends flash.events.EventDispatcher
    {
        public function PhaseBase(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super();
            _view = arg1;
            _data = arg2;
            return;
        }

        public function getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(this, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(start));
        }

        public function start():void
        {
            return;
        }

        protected function _phaseEnd():void
        {
            _view = null;
            _data = null;
            dispatchEvent(new flash.events.Event("PhaseBase::EVENT_PHASE_END"));
            return;
        }

        public static const EVENT_PHASE_END:String="PhaseBase::EVENT_PHASE_END";

        protected var _view:battle.views.MainView;

        protected var _data:battle.models.BattleData;
    }
}


//      class PhaseDayCombat
package battle.phase
{
    import battle.models.*;
    import battle.phase.day.*;
    import battle.phase.extra.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;

    public class PhaseDayCombat extends battle.phase.PhaseDayNightBase
    {
        public function PhaseDayCombat(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, false);
            return;
        }

        public override function start():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _initHPs_e = _data.getHPs_e();
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = battle.vo.EnemyShipData(_data.enemyShips[loc2]);
                if (loc1 != null)
                {
                    loc1.clearPrePlayedVoiceFlg();
                }
                ++loc2;
            }
            _phaseSakuteki();
            return;
        }

        private function _phaseSakuteki():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 索敵]");
            var loc1:*=new battle.phase.day.PhaseSakuteki(_view, _data);
            loc1.getTween().onComplete(_phaseRation).play();
            return;
        }

        private function _phaseRation():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 戦闘糧食]");
            var loc1:*=new battle.phase.extra.PhaseRation(_view, _data, _isNight);
            loc1.getTween().onComplete(_phaseAirUnit).play();
            return;
        }

        private function _phaseAirUnit():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 基地航空隊支援]");
            var loc1:*=new battle.phase.day.PhaseAirUnit(_view, _data);
            loc1.getTween().onComplete(_phaseKoukuu).play();
            return;
        }

        private function _phaseKoukuu():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 航空戦]");
            var loc1:*=new battle.phase.day.PhaseKouku(_view, _data);
            loc1.getTween().onComplete(_phaseShien).play();
            return;
        }

        private function _phaseShien():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 支援攻撃]");
            var loc1:*=new battle.phase.day.PhaseShien(_view, _data);
            loc1.getTween().onComplete(_phaseKaimaku).play();
            return;
        }

        private function _phaseKaimaku():void
        {
            common.debug.Debug.log("[Phase 昼戦 - 開幕戦]");
            var loc1:*=new battle.phase.day.PhaseKaimaku(_view, _data);
            loc1.getTween().onComplete(_phaseHougeki).play();
            return;
        }

        private function _phaseHougeki():void
        {
            common.debug.Debug.log("[Phase 砲撃戦]");
            var loc1:*=new battle.phase.day.PhaseHougeki(_view, _data);
            loc1.getTween().onComplete(_phaseRaigeki).play();
            return;
        }

        private function _phaseRaigeki():void
        {
            common.debug.Debug.log("[Phase 雷撃戦]");
            var loc1:*=new battle.phase.day.PhaseRaigeki(_view, _data);
            loc1.getTween().onComplete(_phaseEnding).play();
            return;
        }

        private function _phaseEnding():void
        {
            common.debug.Debug.log("[Phase 最終処理]");
            var loc1:*=new battle.phase.day.PhaseEnding(_view, _data, _initHPs_e);
            loc1.getTween().onComplete(_phaseEnd).play();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//      class PhaseDayNightBase
package battle.phase
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.cutin.*;
    import battle.models.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.util.*;

    public class PhaseDayNightBase extends battle.phase.PhaseBase
    {
        public function PhaseDayNightBase(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:Boolean)
        {
            super(arg1, arg2);
            _isNight = arg3;
            return;
        }

        protected function _phaseGekichinCutin(arg1:Function, ... rest):void
        {
            var nextFunc:Function;
            var params:Array;
            var cutinTweens:Array;
            var waitGekichinCutin:__AS3__.vec.Vector.<battle.vo.BattleShipData>;
            var waitTaihaCutin:__AS3__.vec.Vector.<battle.vo.BattleShipData>;
            var waitChuhaCutin:__AS3__.vec.Vector.<battle.vo.BattleShipData>;
            var charaIDs:Array;
            var i:int;
            var ship:battle.vo.BattleShipData;
            var ship_combined:battle.vo.BattleShipData;
            var gCutin:battle.display.cutin.GekichinCutin;
            var shipData:battle.vo.BattleShipData;
            var hasYouin:Boolean;
            var hasMegami:Boolean;
            var chuha_charaIDs:Array;
            var cutin:battle.display.cutin.TaihaChuhaCutin;
            var callNext:Function;

            var loc1:*;
            nextFunc = arg1;
            params = rest;
            cutinTweens = [];
            waitGekichinCutin = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            waitTaihaCutin = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            waitChuhaCutin = new __AS3__.vec.Vector.<battle.vo.BattleShipData>();
            i = 0;
            while (i < 6)
            {
                ship = _data.friendShips[i];
                if (!(ship == null) && ship.getCharaID() >= 0)
                {
                    if (ship.waitCutin != 0)
                    {
                        if (ship.waitCutin != 25)
                        {
                            if (ship.waitCutin == 50)
                            {
                                waitChuhaCutin.push(ship);
                            }
                        }
                        else
                        {
                            waitTaihaCutin.push(ship);
                        }
                    }
                    else
                    {
                        waitGekichinCutin.push(ship);
                    }
                    ship.clearWaitCutin();
                }
                ++i;
            }
            if (_data.friendShips_combined != null)
            {
                i = 0;
                while (i < 6)
                {
                    ship_combined = _data.friendShips_combined[i];
                    if (!(ship_combined == null) && ship_combined.getCharaID() >= 0)
                    {
                        if (ship_combined.waitCutin != 0)
                        {
                            if (ship_combined.waitCutin != 25)
                            {
                                if (ship_combined.waitCutin == 50)
                                {
                                    waitChuhaCutin.push(ship_combined);
                                }
                            }
                            else
                            {
                                waitTaihaCutin.push(ship_combined);
                            }
                        }
                        else
                        {
                            waitGekichinCutin.push(ship_combined);
                        }
                        ship_combined.clearWaitCutin();
                    }
                    ++i;
                }
            }
            if (waitGekichinCutin.length > 0)
            {
                i = 0;
                while (i < waitGekichinCutin.length)
                {
                    gCutin = new battle.display.cutin.GekichinCutin();
                    shipData = waitGekichinCutin[i];
                    hasYouin = shipData.hasYouin() || shipData.hasYouinAtEx();
                    hasMegami = shipData.hasMegami() || shipData.hasMegamiAtEx();
                    cutinTweens.push(a24.tween.Tween24.func(common.debug.Debug.log, "撃沈カットイン：" + waitGekichinCutin[i] + (hasYouin ? "[応急修理要員所持]" : "") + (hasMegami ? "[応急修理女神所持]" : "") + " slotItemIDs:" + shipData.getSlotItemIDs()));
                    if (hasYouin && hasMegami)
                    {
                        if (shipData.hasYouinAtEx())
                        {
                            hasMegami = false;
                        }
                        else if (shipData.hasMegamiAtEx())
                        {
                            hasYouin = false;
                        }
                        else if (shipData.getYouinIndex() < shipData.getMegamiIndex())
                        {
                            hasMegami = false;
                        }
                        else
                        {
                            hasYouin = false;
                        }
                    }
                    cutinTweens.push(a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.cutinLayer, gCutin), a24.tween.Tween24.parallel(gCutin.getTween(shipData, hasYouin, hasMegami), a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(gCutin, "GekichinCutin::EVENT_KEY"), a24.tween.Tween24.func(_repair, shipData, hasYouin, hasMegami))), a24.tween.Tween24.removeChild(gCutin)));
                    ++i;
                }
            }
            else if (waitTaihaCutin.length > 0)
            {
                cutinTweens.push(a24.tween.Tween24.func(common.debug.Debug.log, "大破カットイン：" + waitTaihaCutin));
                charaIDs = common.util.Util.toArrayFromVector(waitTaihaCutin).map(function ():*
                {
                    var callback:Function;

                    return undefined = function (arg1:battle.vo.BattleShipData, arg2:int, arg3:Array):int
                    {
                        return arg1.getCharaID();
                    }
                }())
                chuha_charaIDs = common.util.Util.toArrayFromVector(waitChuhaCutin).map(function ():*
                {
                    var callback:Function;

                    return undefined = function (arg1:battle.vo.BattleShipData, arg2:int, arg3:Array):int
                    {
                        return arg1.getCharaID();
                    }
                }())
                charaIDs = charaIDs.concat(chuha_charaIDs);
                cutin = new battle.display.cutin.TaihaChuhaCutin(_isNight);
                cutinTweens.push(a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.cutinLayer, cutin), cutin.getTween.apply(null, [true].concat(charaIDs)), a24.tween.Tween24.removeChild(cutin)));
            }
            else if (waitChuhaCutin.length > 0)
            {
                cutinTweens.push(a24.tween.Tween24.func(common.debug.Debug.log, "中破カットイン：" + waitChuhaCutin));
                charaIDs = common.util.Util.toArrayFromVector(waitChuhaCutin).map(function ():*
                {
                    var callback:Function;

                    return undefined = function (arg1:battle.vo.BattleShipData, arg2:int, arg3:Array):int
                    {
                        return arg1.getCharaID();
                    }
                }())
                cutin = new battle.display.cutin.TaihaChuhaCutin(_isNight);
                cutinTweens.push(a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_view.cutinLayer, cutin), cutin.getTween.apply(null, [false].concat(charaIDs)), a24.tween.Tween24.removeChild(cutin)));
            }
            callNext = function ():void
            {
                if (params.length > 0)
                {
                    nextFunc.apply(null, params);
                }
                else
                {
                    nextFunc();
                }
                return;
            }
            if (cutinTweens.length)
            {
                a24.tween.Tween24.serial(cutinTweens).onComplete(callNext).play();
            }
            else
            {
                callNext();
            }
            return;
        }

        private function _repair(arg1:battle.vo.BattleShipData, arg2:Boolean, arg3:Boolean):void
        {
            if (arg2)
            {
                arg1.repair(Math.floor(arg1.getMaxHp() * 0.2));
                arg1.banner.setHP(arg1.nowHP, arg1.getMaxHp());
                arg1.useYouin();
            }
            else if (arg3)
            {
                arg1.repair(arg1.getMaxHp());
                arg1.banner.setHP(arg1.nowHP, arg1.getMaxHp());
                arg1.useMegami();
            }
            return;
        }

        protected var _isNight:Boolean;
    }
}


//      class PhaseEscapeSelect
package battle.phase
{
    import a24.tween.*;
    import battle.models.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.display.girl.*;
    import connection.*;
    import connection.api_req_combined_battle.*;
    import flash.events.*;
    import manager.resource.*;

    public class PhaseEscapeSelect extends battle.phase.PhaseBase
    {
        public function PhaseEscapeSelect(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:int, arg4:int)
        {
            _escape_candidate_index = arg3;
            _tow_candidate_index = arg4;
            super(arg1, arg2);
            return;
        }

        public function get escapeShip():battle.vo.BattleShipData
        {
            return _escapeShip;
        }

        public function get towShip():battle.vo.BattleShipData
        {
            return _towShip;
        }

        public function get result():Boolean
        {
            return _result;
        }

        public override function start():void
        {
            common.debug.Debug.log("[Phase 護衛艦退避選択] - start");
            _ready();
            return;
        }

        private function _ready():void
        {
            _escapeShip = _getShipData(_escape_candidate_index);
            _towShip = _getShipData(_tow_candidate_index);
            _buttonsView = new EscapeSelectButtonsView();
            var loc4:*=AppFacade.createShipAttacher();
            var loc1:*=new common.display.girl.Banner();
            loc1.reserve(loc4, _escapeShip.getCharaID(), _escapeShip.getCondition());
            var loc3:*=DataFacade.getMasterShipData().getIconType(_escapeShip.getCharaID());
            loc1.setStateIcon(loc3, false, false, _escapeShip.getCondition());
            _buttonsView.escape_candidate.addChild(loc1);
            var loc2:*=new common.display.girl.Banner();
            loc2.reserve(loc4, _towShip.getCharaID(), _towShip.getCondition());
            loc3 = DataFacade.getMasterShipData().getIconType(_towShip.getCharaID());
            loc2.setStateIcon(loc3, false, false, _towShip.getCondition());
            _buttonsView.tow_candidate.addChild(loc2);
            _buttonsView.ship_name_txt.text = _escapeShip.getName();
            _buttonsView.ship_lv_txt.text = "Lv " + _escapeShip.getLevel();
            _buttonsView.ship_hp_txt.text = "" + _escapeShip.nowHP + "/" + _escapeShip.getMaxHp();
            _buttonsView.escapeClickHandler = _clickedEscape;
            _buttonsView.noEscapeClickHandler = _clickedNoEscape;
            a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc4 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc4.load)), a24.tween.Tween24.addChild(_view, _buttonsView)).play();
            return;
        }

        private function _clickedEscape():void
        {
            common.debug.Debug.log("退避:" + _escapeShip + " :: " + _towShip);
            _buttonsView.escapeClickHandler = null;
            _buttonsView.noEscapeClickHandler = null;
            _result = true;
            connection.Connector.createTween(true, this, new connection.api_req_combined_battle.GobackPortAPI(_data)).onComplete(_phaseEnd).play();
            return;
        }

        private function _clickedNoEscape():void
        {
            common.debug.Debug.log("退避せず");
            _buttonsView.escapeClickHandler = null;
            _buttonsView.noEscapeClickHandler = null;
            _phaseEnd();
            return;
        }

        private function _getShipData(arg1:int):battle.vo.BattleShipData
        {
            if (1 <= arg1 && arg1 <= 6)
            {
                return _data.friendShips[arg1 - 1];
            }
            if (7 <= arg1 && arg1 <= 12)
            {
                return _data.friendShips_combined[arg1 - 6 - 1];
            }
            return null;
        }

        protected override function _phaseEnd():void
        {
            common.debug.Debug.log("[Phase 護衛艦退避選択] - end");
            a24.tween.Tween24.serial(a24.tween.Tween24.tween(_buttonsView, 0.3).alpha(0), a24.tween.Tween24.removeChild(_buttonsView)).onComplete(super(
#error('findrop') _phaseEnd
            )._phaseEnd).play();
            return;
        }

        public function finalize():void
        {
            _escapeShip = null;
            _towShip = null;
            _buttonsView = null;
            return;
        }

        private var _escape_candidate_index:int;

        private var _tow_candidate_index:int;

        private var _escapeShip:battle.vo.BattleShipData;

        private var _towShip:battle.vo.BattleShipData;

        private var _buttonsView:EscapeSelectButtonsView;

        private var _result:Boolean=false;
    }
}

import a24.tween.*;
import common.util.*;
import flash.display.*;
import flash.events.*;
import res.sally.*;


class EscapeSelectButtonsView extends res.sally.MCEscapeSelectButtons
{
    public function EscapeSelectButtonsView()
    {
        super();
        _btnEscape = new WaveButton(shapeEscape, btnEscape, _handleClickEscape);
        _btnNoEscape = new WaveButton(shapeNoEscape, btnNoEscape, _handleClickNoEscape);
        a24.tween.Tween24.tween([btnEscape, btnNoEscape], 0.3).alpha(1).play();
        return;
    }

    private function _unsetButtonMode():void
    {
        _btnEscape.finalize();
        _btnNoEscape.finalize();
        return;
    }

    private function _handleClickEscape(arg1:flash.events.MouseEvent):void
    {
        var event:flash.events.MouseEvent;

        event = arg1;
        _unsetButtonMode();
        if (escapeClickHandler == null)
        {
            escapeClickHandler = function ():void
            {
                return;
            }
        }
        a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_click), a24.tween.Tween24.tween(btnEscape, 0.5).$$x(-400), a24.tween.Tween24.tween(btnNoEscape, 0.5).$$x(400)).onComplete(escapeClickHandler).play();
        return;
    }

    private function _handleClickNoEscape(arg1:flash.events.MouseEvent):void
    {
        var event:flash.events.MouseEvent;

        event = arg1;
        _unsetButtonMode();
        if (noEscapeClickHandler == null)
        {
            noEscapeClickHandler = function ():void
            {
                return;
            }
        }
        a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_click), a24.tween.Tween24.tween(btnEscape, 0.5).$$x(-400), a24.tween.Tween24.tween(btnNoEscape, 0.5).$$x(400)).onComplete(noEscapeClickHandler).play();
        return;
    }

    private var _btnEscape:WaveButton;

    private var _btnNoEscape:WaveButton;

    public var escapeClickHandler:Function=null;

    public var noEscapeClickHandler:Function=null;
}

class WaveButton extends Object
{
    public function WaveButton(arg1:flash.display.MovieClip, arg2:flash.display.MovieClip, arg3:Function)
    {
        super();
        _shapeMC = arg1;
        _btnMC = arg2;
        _shapeMC.buttonMode = true;
        _shapeMC.alpha = 0;
        _btnMC.alpha = 0;
        _btnMC.gotoAndStop(1);
        _shapeMC.addEventListener("rollOver", _handleRollOver);
        _shapeMC.addEventListener("rollOut", _handleRollOut);
        _shapeMC.addEventListener("mouseDown", _handleMouseDown);
        _shapeMC.addEventListener("mouseUp", _handleMouseUp);
        _shapeMC.addEventListener("click", _handleClick);
        this.clickHandler = arg3;
        return;
    }

    public function finalize():void
    {
        _shapeMC.buttonMode = false;
        _shapeMC.removeEventListener("rollOver", _handleRollOver);
        _shapeMC.removeEventListener("rollOut", _handleRollOut);
        _shapeMC.removeEventListener("mouseDown", _handleMouseDown);
        _shapeMC.removeEventListener("mouseUp", _handleMouseUp);
        _shapeMC.removeEventListener("click", _handleClick);
        _shapeMC = null;
        _btnMC = null;
        clickHandler = null;
        return;
    }

    private function _handleRollOver(arg1:flash.events.MouseEvent):void
    {
        _btnMC.gotoAndStop(2);
        return;
    }

    private function _handleRollOut(arg1:flash.events.MouseEvent):void
    {
        _btnMC.gotoAndStop(1);
        return;
    }

    private function _handleMouseDown(arg1:flash.events.MouseEvent):void
    {
        _btnMC.gotoAndStop(3);
        return;
    }

    private function _handleMouseUp(arg1:flash.events.MouseEvent):void
    {
        _btnMC.gotoAndStop(2);
        return;
    }

    private function _handleClick(arg1:flash.events.MouseEvent):void
    {
        return;
    }

    private var _shapeMC:flash.display.MovieClip;

    private var _btnMC:flash.display.MovieClip;

    public var clickHandler:Function=null;
}

//      class PhaseInitialize
package battle.phase
{
    import a24.tween.*;
    import battle.*;
    import battle.models.*;
    import battle.views.*;
    import battle.views.cutins.*;
    import battle.vo.*;
    import common.*;
    import common.debug.*;
    import common.util.*;
    import connection.*;
    import connection.battle.*;
    import flash.display.*;
    import flash.events.*;
    import manager.*;
    import manager.resource.*;
    import res.battle.images.*;

    public class PhaseInitialize extends battle.phase.PhaseBase
    {
        public function PhaseInitialize(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public override function start():void
        {
            var loc1:*=null;
            common.debug.Debug.log("[Phase Initialize] - start");
            common.util.SoundUtil.VOICE_MAX_SIDE_BY_SIDE = 100;
            var loc3:*=AppFacade.root.getDebugManager();
            if (!(loc3 == null) && !loc3.isEmulate)
            {
                loc3.setBattleEmulateData(_data.baseData.createObject());
            }
            var loc2:*=common.util.Util.createImageResourceWithCentering(res.battle.images.ImgTextStartBattle);
            battle.vo.BattleShipData.isPractice = false;
            if (_data.baseData.isPractice())
            {
                battle.vo.BattleShipData.isPractice = true;
                loc1 = new connection.battle.PracticeStartDayAPI(_data);
                _view.bgLayer.setBackground();
            }
            else if (_data.baseData.isNightDayBattle())
            {
                common.debug.Debug.log("[夜->昼 戦闘" + (_data.baseData.isCombinedFriend() ? "(連合艦隊)" : "(通常艦隊)") + "]");
                _view.bgLayer.setBackground(true);
            }
            else if (_data.baseData.isNightOnlyBattle())
            {
                loc1 = new connection.battle.BattleStartNightAPI(_data);
                _view.bgLayer.setBackground(true);
            }
            else if (_data.baseData.isAerialWarfare())
            {
                loc1 = new connection.battle.BattleStartAerialWarfareAPI(_data);
                _view.bgLayer.setBackground();
            }
            else if (_data.baseData.isLongDistanceAirRaid())
            {
                loc1 = new connection.battle.BattleStartLongDistanceAirRaidAPI(_data);
                _view.bgLayer.setBackground();
            }
            else
            {
                loc1 = new connection.battle.BattleStartDayAPI(_data);
                _view.bgLayer.setBackground();
            }
            a24.tween.Tween24.serial(a24.tween.Tween24.func(_view.shutter.close, 0), a24.tween.Tween24.prop(loc2).alpha(0).xy(common.Consts.CENTER_W, common.Consts.CENTER_H), a24.tween.Tween24.addChild(_view.topLayer, loc2), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(loc2, 0.15).alpha(1), connection.Connector.createTween(false, this, loc1))).onComplete(_phaseLoadShipResource, loc2).play();
            return super.start();
        }

        protected function _phaseLoadShipResource(arg1:flash.display.Sprite):void
        {
            var loc1:*=AppFacade.createShipAttacher();
            _view.bannerLayer.friends.initialize(_data.friendShips, loc1, _view.raderLayer.rader_f.wave);
            _view.bannerLayer.enemys.initialize(_data.enemyShips, loc1, _view.raderLayer.rader_e.wave);
            _view.bannerLayer.friends_combined.initialize(_data.friendShips_combined, loc1, _view.raderLayer.rader_f.wave);
            a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc1.load)).onComplete(_phaseReadyBGM, arg1).play();
            return;
        }

        private function _phaseReadyBGM(arg1:flash.display.Sprite, arg2:int=0):void
        {
            var loc6:*=0;
            var loc5:*=null;
            common.debug.Debug.log("[Phase Initialize] - phaseReadyBGM");
            if (common.util.SoundUtil.volumeBGM == 0)
            {
                _phasePreBattle(arg1);
                return;
            }
            var loc4:*=!(_data.baseData.isNightDayBattle() || _data.baseData.isNightOnlyBattle());
            var loc2:*=_data.baseData.isBossMap();
            var loc1:*=_data.baseData.areaID;
            var loc7:*=_data.baseData.mapNo;
            if (_data.baseData.isPractice())
            {
                loc6 = 1;
            }
            else if (_data.baseData.getBoukuuData() == null)
            {
                loc6 = BattleAssets.getBGM_ID(loc4, loc2, loc1, loc7, _data.combatData.getBossDamaged());
            }
            else
            {
                loc6 = 62;
            }
            if (loc6 == 0)
            {
                _data.preSoundClass = null;
                _phasePreBattle(arg1);
                return;
            }
            var loc3:*;
            if ((loc3 = BattleAssets.getBGMClsFromID(loc6)) != null)
            {
                _data.preSoundClass = loc3;
                _phasePreBattle(arg1);
            }
            else
            {
                if (arg2 >= 3)
                {
                    _phasePreBattle(arg1);
                    return;
                }
                (loc5 = new battle.phase.PhaseLoadBGM(_view, _data, loc6)).getTween().onComplete(_phaseReadyBGM, arg1, arg2 + 1).play();
            }
            return;
        }

        protected function _phasePreBattle(arg1:flash.display.Sprite):void
        {
            var txtImg:flash.display.Sprite;
            var hasBossInsert:Boolean;
            var showRaderFTween:a24.tween.Tween24;
            var showRaderETween:a24.tween.Tween24;
            var enterTween:a24.tween.Tween24;
            var insertO:Object;
            var cutin:battle.views.cutins.BossInsertCutin;
            var voiceTween:a24.tween.Tween24;
            var flagshipCharaID:int;

            var loc1:*;
            txtImg = arg1;
            common.debug.Debug.log("[Phase Initialize] - PreBattle");
            hasBossInsert = false;
            showRaderFTween = _view.raderLayer.getTweenShowF(_data);
            showRaderETween = _view.raderLayer.getTweenShowE(_data.combatData.getFormationID_e(), 0);
            if (_data.baseData.isNightDayBattle() || _data.baseData.isNightOnlyBattle())
            {
                if (_data.baseData.isCombinedFriend())
                {
                    _view.bannerLayer.friends.instantEnter();
                    _view.bannerLayer.friends_combined.instantEnter();
                    enterTween = a24.tween.Tween24.wait(0);
                }
                else
                {
                    enterTween = a24.tween.Tween24.wait(0);
                }
            }
            else if (_data.baseData.isCombinedFriend() != false)
            {
                enterTween = a24.tween.Tween24.serial(_view.bannerLayer.friends.getTweenEnter(false), _view.bannerLayer.friends_combined.getTweenEnter_Combined(false));
            }
            else
            {
                enterTween = _view.bannerLayer.friends.getTweenEnter(false);
            }
            battle.BattleConsts.initEnemyVoice(_data);
            insertO = battle.BattleConsts.isBossInsert(_data);
            if (insertO == null)
            {
                voiceTween = a24.tween.Tween24.wait(0);
                if (!(_data.baseData.isNightDayBattle() || _data.baseData.isNightOnlyBattle()))
                {
                    flagshipCharaID = _data.friendShips[0].getCharaID();
                    voiceTween = a24.tween.Tween24.func(common.util.SoundUtil.playVoice, flagshipCharaID, 15);
                }
                a24.tween.Tween24.serial(a24.tween.Tween24.tween(txtImg, 0.2).alpha(0).$$x(-82), a24.tween.Tween24.removeChild(txtImg), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(_view.shutter, "ShutterView::EVENT_OPENED_COMPLETE"), a24.tween.Tween24.func(_view.shutter.open)), voiceTween, enterTween, a24.tween.Tween24.parallel(a24.tween.Tween24.func(showRaderFTween.play), a24.tween.Tween24.func(showRaderETween.play)), a24.tween.Tween24.func(function ():void
                {
                    if (_data.preSoundClass != null)
                    {
                        common.util.SoundUtil.playBGM("MAIN_BGM", new _data.preSoundClass());
                    }
                    return;
                })).onComplete(_phaseShowHPGauge).play()
            }
            else
            {
                cutin = new battle.views.cutins.BossInsertCutin();
                a24.tween.Tween24.serial(a24.tween.Tween24.tween(txtImg, 0.2).alpha(0).$$x(-82), a24.tween.Tween24.removeChild(txtImg), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(_view.shutter, "ShutterView::EVENT_OPENED_COMPLETE"), a24.tween.Tween24.func(_view.shutter.open)), a24.tween.Tween24.func(function ():void
                {
                    if (_data.preSoundClass != null)
                    {
                        common.util.SoundUtil.playBGM("MAIN_BGM", new _data.preSoundClass());
                    }
                    return;
                }), cutin.getTweenInitialize(insertO), cutin.getTween(_view.cutinLayer), enterTween, a24.tween.Tween24.parallel(a24.tween.Tween24.func(showRaderFTween.play), a24.tween.Tween24.func(showRaderETween.play))).onComplete(_phaseShowHPGauge).play()
            }
            return;
        }

        protected function _phaseShowHPGauge():void
        {
            var loc1:*=_data.baseData.isBossMap();
            var loc2:*=_data.baseData.isInvalidationBoss();
            if (loc1 == true && loc2 == false && _data.baseData.exBossDefeat < _data.baseData.exBossDefeatRequest)
            {
                _view.hpGaugeLayer.createHPGauge(_data.baseData.mapID);
                a24.tween.Tween24.serial(a24.tween.Tween24.prop(_view.hpGaugeLayer.hpGauge).alpha(0).$$y(-10), a24.tween.Tween24.tween(_view.hpGaugeLayer.hpGauge, 0.3).alpha(1).$$y(10), a24.tween.Tween24.func(_view.hpGaugeLayer.hpGauge.setExBossHP, _data)).onComplete(_phaseEnd).play();
            }
            else if (loc1 == true && loc2 == false && _data.baseData.mapHPNow <= _data.baseData.eventMapHPMax && _data.baseData.mapHPNow > 0 && !(_data.baseData.getEventMapHPType() == 3))
            {
                _view.hpGaugeLayer.createHPGauge(_data.baseData.mapID, _data.baseData.hasPrevGaugeOnEventMap());
                _view.hpGaugeLayer.hpGauge.damageScale = _data.baseData.mapHPDmg;
                a24.tween.Tween24.serial(a24.tween.Tween24.prop(_view.hpGaugeLayer.hpGauge).alpha(0).$$y(-10), a24.tween.Tween24.tween(_view.hpGaugeLayer.hpGauge, 0.3).alpha(1).$$y(10), a24.tween.Tween24.func(_view.hpGaugeLayer.hpGauge.setEventBossHP, _data)).onComplete(_phaseEnd).play();
            }
            else
            {
                _phaseEnd();
            }
            return;
        }

        protected override function _phaseEnd():void
        {
            _view.topLayer.removeChildren();
            common.debug.Debug.log("[Phase Initialize] - end");
            super._phaseEnd();
            return;
        }
    }
}


//      class PhaseKikanTaiha
package battle.phase
{
    import a24.tween.*;
    import battle.display.result.kikantaiha.*;
    import battle.models.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.display.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.media.*;
    import manager.resource.*;
    import res.battle.result.img.*;

    public class PhaseKikanTaiha extends battle.phase.PhaseBase
    {
        public function PhaseKikanTaiha(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            _shutter = new common.display.ShutterView();
            _shutter.close(0);
            return;
        }

        public override function start():void
        {
            common.debug.Debug.log("[Phase 旗艦大破] - start");
            var loc8:*=_createBGM();
            var loc7:*;
            var loc4:*=(loc7 = battle.vo.FriendShipData(_data.friendShips[0])).getCharaID();
            var loc9:*=new flash.display.Sprite();
            var loc5:*=DataFacade.getStartData().getOffsetAtBattle(loc4, true);
            var loc10:*;
            (loc10 = AppFacade.createShipAttacher()).stackFull(loc4, loc9, 0);
            _smokeLayer = new battle.display.result.kikantaiha.SmokeLayer();
            var loc1:*=new battle.display.result.kikantaiha.MessageBox();
            var loc6:*=common.util.Util.createImageResourceWithCentering(res.battle.result.img.ImgKikanTaiha);
            var loc3:*=new TaiGearButton(750, 412);
            var loc2:*=new common.display.ClickAreaLayer();
            loc2.buttonMode = true;
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(_shutter).alpha(0), a24.tween.Tween24.addChild(_view.topLayer, _shutter), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playBGM, "MAIN_BGM", loc8, 0, true), a24.tween.Tween24.tween(_view.shutter, 0.4).alpha(0), a24.tween.Tween24.tween(_shutter, 0.4).alpha(1), a24.tween.Tween24.waitEvent(loc10 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc10.load)), a24.tween.Tween24.func(_view.shutter.setLight), a24.tween.Tween24.prop(_view.shutter).alpha(1), a24.tween.Tween24.removeChild(_shutter), a24.tween.Tween24.prop(loc9).xy(-300 + loc5.x, -60 + loc5.y).alpha(0), a24.tween.Tween24.addChild(_view.topLayer, loc9), a24.tween.Tween24.tween(loc9, 0.7).$$x(240).alpha(0.6), a24.tween.Tween24.prop(loc1).alpha(0).xy(594, 356), a24.tween.Tween24.prop(loc6).xy(654, 120).alpha(0), a24.tween.Tween24.addChild(_view.topLayer, _smokeLayer, loc1, loc6), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(loc9, 0.3).$$x(30).alpha(1), a24.tween.Tween24.func(_smokeLayer.start).delay(0.2), a24.tween.Tween24.tween(loc1, 0.6).alpha(1).delay(0.1), a24.tween.Tween24.func(common.util.SoundUtil.playVoice, loc4, 20).delay(0.2), a24.tween.Tween24.tween(loc6, 0.6).alpha(1).delay(0.6)), loc1.getTweenShow(_data), a24.tween.Tween24.addChild(_view.topLayer, loc3, loc2), a24.tween.Tween24.waitEvent(loc2, "click")).onComplete(_main2).play();
            return;
        }

        private function _main2():void
        {
            _phaseEnd();
            return;
        }

        protected override function _phaseEnd():void
        {
            common.debug.Debug.log("[Phase 旗艦大破] - end");
            _smokeLayer.stop();
            _view.visible = false;
            _view.topLayer.removeChildren();
            super._phaseEnd();
            return;
        }

        private function _createBGM():flash.media.Sound
        {
            var loc1:*=BattleAssets.BGM_kikan_taiha;
            if (loc1 != null)
            {
                return new loc1();
            }
            return null;
        }

        private var _shutter:common.display.ShutterView;

        private var _smokeLayer:battle.display.result.kikantaiha.SmokeLayer;
    }
}

import flash.events.*;
import scene.battle.mc.*;


class TaiGearButton extends scene.battle.mc.MCTaiGearBtn
{
    public function TaiGearButton(arg1:Number, arg2:Number)
    {
        super();
        this.x = arg1;
        this.y = arg2;
        addEventListener("addedToStage", _handleAddToStage);
        addEventListener("removedFromStage", _handleRemoveFromStage);
        return;
    }

    private function _handleEnterframe(arg1:flash.events.Event):void
    {
        gear.rotation = gear.rotation + 2;
        return;
    }

    private function _handleAddToStage(arg1:flash.events.Event):void
    {
        addEventListener("enterFrame", _handleEnterframe);
        return;
    }

    private function _handleRemoveFromStage(arg1:flash.events.Event):void
    {
        removeEventListener("enterFrame", _handleEnterframe);
        return;
    }
}

//      class PhaseLoadBGM
package battle.phase
{
    import battle.models.*;
    import battle.views.*;
    import common.debug.*;
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;

    public class PhaseLoadBGM extends battle.phase.PhaseBase
    {
        public function PhaseLoadBGM(arg1:battle.views.MainView, arg2:battle.models.BattleData, arg3:int)
        {
            super(arg1, arg2);
            _bgmID = arg3;
            return;
        }

        public override function start():void
        {
            common.debug.Debug.log("[Phase LoadBGM] - start");
            var loc1:*=new flash.system.LoaderContext();
            loc1.applicationDomain = flash.system.ApplicationDomain.currentDomain;
            var loc2:*=new flash.net.URLRequest(BattleAssets.getBGMURL(_bgmID));
            _loader = new flash.display.Loader();
            _loader.contentLoaderInfo.addEventListener("complete", _handleLoadComplete);
            _loader.contentLoaderInfo.addEventListener("ioError", _handleIOError);
            _loader.load(loc2, loc1);
            return;
        }

        private function _handleLoadComplete(arg1:flash.events.Event):void
        {
            arg1.target.removeEventListener("complete", _handleLoadComplete);
            arg1.target.removeEventListener("ioError", _handleIOError);
            _phaseEnd();
            return;
        }

        private function _handleIOError(arg1:flash.events.Event):void
        {
            arg1.target.removeEventListener("complete", _handleLoadComplete);
            arg1.target.removeEventListener("ioError", _handleIOError);
            _phaseEnd();
            return;
        }

        protected override function _phaseEnd():void
        {
            common.debug.Debug.log("[Phase LoadBGM] - end");
            super._phaseEnd();
            return;
        }

        private var _bgmID:int;

        private var _loader:flash.display.Loader;
    }
}


//      class PhaseNightCombat
package battle.phase
{
    import a24.tween.*;
    import battle.models.*;
    import battle.phase.night.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;

    public class PhaseNightCombat extends battle.phase.PhaseDayNightBase
    {
        public function PhaseNightCombat(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2, true);
            return;
        }

        public override function start():void
        {
            var loc2:*=0;
            var loc1:*=null;
            _initHPs_e = _data.getHPs_e();
            loc2 = 0;
            while (loc2 < 6)
            {
                loc1 = battle.vo.EnemyShipData(_data.enemyShips[loc2]);
                if (loc1 != null)
                {
                    loc1.clearPrePlayedVoiceFlg();
                }
                ++loc2;
            }
            common.debug.Debug.log("[Phase2 夜戦]");
            _view.bgLayer.setBackground(true);
            if (!(_data.baseData.isNightOnlyBattle() || _data.baseData.isNightDayBattle()))
            {
                _view.bannerLayer.friends.tweenDefaultPositionAll();
                _view.bannerLayer.friends_combined.tweenDefaultPositionAll();
                _view.bannerLayer.enemys.tweenDefaultPositionAll();
            }
            _phaseInit();
            return;
        }

        private function _phaseInit():void
        {
            common.debug.Debug.log("[Phase2_1 初期化]");
            _view.upperBar.show(13);
            var loc1:*=new battle.phase.night.PhaseOpening(_view, _data);
            a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc1.start)).onComplete(_phaseAttack).play();
            return;
        }

        private function _phaseAttack():void
        {
            common.debug.Debug.log("[Phase2_2 攻撃]");
            var loc1:*=new battle.phase.night.PhaseAttack(_view, _data);
            a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc1.start)).onComplete(_phaseEnding).play();
            return;
        }

        private function _phaseEnding():void
        {
            common.debug.Debug.log("[Phase2_3 終了処理]");
            _view.upperBar.hide(13);
            var loc1:*=new battle.phase.night.PhaseEnding(_view, _data, _initHPs_e);
            a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "PhaseBase::EVENT_PHASE_END"), a24.tween.Tween24.func(loc1.start)).onComplete(_phaseEnd).play();
            return;
        }

        private var _initHPs_e:Array;
    }
}


//      class PhaseRidatsu
package battle.phase
{
    import a24.tween.*;
    import battle.models.*;
    import battle.views.*;
    import common.*;
    import common.util.*;
    import connection.*;
    import connection.battle.*;

    public class PhaseRidatsu extends battle.phase.PhaseBase
    {
        public function PhaseRidatsu(arg1:battle.views.MainView, arg2:battle.models.BattleData)
        {
            super(arg1, arg2);
            return;
        }

        public function get isGoNext():Boolean
        {
            return _isGoNext;
        }

        public override function start():void
        {
            if (_data.baseData.isNightOnlyBattle())
            {
                _phaseEnd();
            }
            else if (_data.baseData.isNightDayBattle())
            {
                if (_data.combatData.hasNextDay())
                {
                    _isGoNext = true;
                }
                _phaseEnd();
            }
            else if (_data.combatData.hasNextNight())
            {
                _phaseJudge();
            }
            else
            {
                _phaseEnd();
            }
            return;
        }

        private function _phaseJudge():void
        {
            var btns:SelectButtons;

            var loc1:*;
            btns = new SelectButtons();
            a24.tween.Tween24.serial(a24.tween.Tween24.func(_view.upperBar.show, 11), a24.tween.Tween24.prop(btns).xy(common.Consts.CENTER_W, common.Consts.CENTER_H), a24.tween.Tween24.addChild(_view.shutter, btns), btns.getTween(), a24.tween.Tween24.waitEvent(btns, "complete"), a24.tween.Tween24.removeChild(btns), a24.tween.Tween24.func(_view.upperBar.hide, 11)).onComplete(function ():void
            {
                _isGoNext = btns.isGoYasen;
                _phaseEnd();
                return;
            }).play()
            return;
        }

        protected override function _phaseEnd():void
        {
            var loc1:*=null;
            if (!_data.baseData.isNightOnlyBattle())
            {
                if (!_data.baseData.isNightDayBattle())
                {
                    if (_isGoNext == true)
                    {
                        if (_data.baseData.isPractice())
                        {
                            loc1 = new connection.battle.PracticeDayToNightAPI(_data);
                        }
                        else
                        {
                            loc1 = new connection.battle.BattleDayToNightAPI(_data);
                        }
                        connection.Connector.createTween(true, _view, loc1).onComplete(super(
#error('findrop') _phaseEnd
                        )._phaseEnd).play();
                        return;
                    }
                    common.util.SoundUtil.stopBGMFadeout("MAIN_BGM", 2);
                }
            }
            super._phaseEnd();
            return;
        }

        private var _isGoNext:Boolean=false;
    }
}

import a24.tween.*;
import common.util.*;
import flash.display.*;
import flash.events.*;
import res.battle.*;


class SelectButtons extends res.battle.MCYasenSelectButtons
{
    public function SelectButtons()
    {
        super();
        _btnYesYasen = new WaveButton(shapeYesYasen, btnYesYasen, _handleClickYesYasen);
        _btnNoYasen = new WaveButton(shapeNoYasen, btnNoYasen, _handleClickNoYasen);
        return;
    }

    public function get isGoYasen():Boolean
    {
        return _isGoYasen;
    }

    public function getTween():a24.tween.Tween24
    {
        return a24.tween.Tween24.tween([btnNoYasen, btnYesYasen], 0.3).alpha(1);
    }

    private function _unsetButtonMode():void
    {
        _btnYesYasen.finalize();
        _btnNoYasen.finalize();
        return;
    }

    private function _handleClickNoYasen(arg1:flash.events.MouseEvent):void
    {
        _unsetButtonMode();
        _isGoYasen = false;
        a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_click), a24.tween.Tween24.tween(btnNoYasen, 0.5).$$x(-400), a24.tween.Tween24.tween(btnYesYasen, 0.5).$$x(400)).onComplete(dispatchEvent, new flash.events.Event("complete")).play();
        return;
    }

    private function _handleClickYesYasen(arg1:flash.events.MouseEvent):void
    {
        _unsetButtonMode();
        _isGoYasen = true;
        a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_click), a24.tween.Tween24.tween(btnNoYasen, 0.5).$$x(-400), a24.tween.Tween24.tween(btnYesYasen, 0.5).$$x(400)).onComplete(dispatchEvent, new flash.events.Event("complete")).play();
        return;
    }

    private var _btnYesYasen:WaveButton;

    private var _btnNoYasen:WaveButton;

    private var _isGoYasen:Boolean=false;
}

class WaveButton extends Object
{
    public function WaveButton(arg1:flash.display.MovieClip, arg2:flash.display.MovieClip, arg3:Function)
    {
        super();
        _shapeMC = arg1;
        _btnMC = arg2;
        _shapeMC.buttonMode = true;
        _shapeMC.alpha = 0;
        _btnMC.alpha = 0;
        _btnMC.gotoAndStop(1);
        _shapeMC.addEventListener("rollOver", _handleRollOver);
        _shapeMC.addEventListener("rollOut", _handleRollOut);
        _shapeMC.addEventListener("mouseDown", _handleMouseDown);
        _shapeMC.addEventListener("mouseUp", _handleMouseUp);
        _shapeMC.addEventListener("click", _handleClick);
        this.clickHandler = arg3;
        return;
    }

    public function finalize():void
    {
        _shapeMC.buttonMode = false;
        _shapeMC.removeEventListener("rollOver", _handleRollOver);
        _shapeMC.removeEventListener("rollOut", _handleRollOut);
        _shapeMC.removeEventListener("mouseDown", _handleMouseDown);
        _shapeMC.removeEventListener("mouseUp", _handleMouseUp);
        _shapeMC.removeEventListener("click", _handleClick);
        _shapeMC = null;
        _btnMC = null;
        clickHandler = null;
        return;
    }

    private function _handleRollOver(arg1:flash.events.MouseEvent):void
    {
        _btnMC.gotoAndStop(2);
        return;
    }

    private function _handleRollOut(arg1:flash.events.MouseEvent):void
    {
        _btnMC.gotoAndStop(1);
        return;
    }

    private function _handleMouseDown(arg1:flash.events.MouseEvent):void
    {
        _btnMC.gotoAndStop(3);
        return;
    }

    private function _handleMouseUp(arg1:flash.events.MouseEvent):void
    {
        _btnMC.gotoAndStop(2);
        return;
    }

    private function _handleClick(arg1:flash.events.MouseEvent):void
    {
        return;
    }

    private var _shapeMC:flash.display.MovieClip;

    private var _btnMC:flash.display.MovieClip;

    public var clickHandler:Function=null;
}

//    package util
//      class BattleUtil
package battle.util
{
    import __AS3__.vec.*;

    public class BattleUtil extends Object
    {
        public function BattleUtil()
        {
            super();
            return;
        }

        public static function isShield(arg1:Number):Boolean
        {
            return !(arg1 % 1 == 0);
        }

        public static function isAAAttackable(arg1:__AS3__.vec.Vector.<int>):Boolean
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < arg1.length)
            {
                if (arg1[loc1] > 0)
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }
    }
}


//      class SlotitemUtil
package battle.util
{
    import battle.vo.*;
    import common.*;
    import vo.*;

    public class SlotitemUtil extends Object
    {
        public function SlotitemUtil()
        {
            super();
            return;
        }

        public static function getPlaneItemIDListWithFlyingBoat(arg1:battle.vo.BattleShipData):Array
        {
            var loc3:*=0;
            var loc2:*=0;
            if (arg1 == null)
            {
                return [];
            }
            var loc1:*=[];
            var loc4:*=arg1.getSlotItemIDs();
            loc3 = 0;
            while (loc3 < loc4.length)
            {
                loc2 = loc4[loc3];
                if (isValidPlaneItemIDWithFlyingBoat(loc2))
                {
                    loc1.push(loc2);
                }
                ++loc3;
            }
            return loc1;
        }

        public static function isValidPlaneItemIDWithFlyingBoat(arg1:int):Boolean
        {
            var loc1:*=DataFacade.getMasterSlotItemData().getSlotItemEquipType(arg1);
            return loc1 == 6 || loc1 == 7 || loc1 == 8 || loc1 == 11 || loc1 == 25 || loc1 == 26 || loc1 == 41 || loc1 == 45;
        }

        public static function getPlaneItemIDList(arg1:battle.vo.BattleShipData):Array
        {
            var loc3:*=0;
            var loc2:*=0;
            if (arg1 == null)
            {
                return [];
            }
            var loc1:*=[];
            var loc4:*=arg1.getSlotItemIDs();
            loc3 = 0;
            while (loc3 < loc4.length)
            {
                loc2 = loc4[loc3];
                if (isValidPlaneItemID(loc2))
                {
                    loc1.push(loc2);
                }
                ++loc3;
            }
            return loc1;
        }

        public static function isValidPlaneItemID(arg1:int):Boolean
        {
            var loc1:*=DataFacade.getMasterSlotItemData().getSlotItemEquipType(arg1);
            return loc1 == 6 || loc1 == 7 || loc1 == 8 || loc1 == 11 || loc1 == 25 || loc1 == 26 || loc1 == 45;
        }

        public static function hasAtacckPlane(arg1:battle.vo.BattleShipData):Boolean
        {
            var loc6:*=0;
            var loc1:*=0;
            var loc5:*=0;
            if (arg1 == null)
            {
                return false;
            }
            var loc3:*=DataFacade.getMasterSlotItemData();
            var loc2:*=arg1.getSlotItemIDs();
            var loc4:*=false;
            loc6 = 0;
            while (loc6 < loc2.length)
            {
                loc1 = loc2[loc6];
                if ((loc5 = loc3.getSlotItemEquipType(loc1)) == 6 || loc5 == 45)
                {
                    loc4 = true;
                }
                ++loc6;
            }
            return loc4;
        }

        public static function hasAntiAircraftAbility(arg1:battle.vo.BattleShipData):int
        {
            var loc9:*=0;
            var loc2:*=0;
            var loc7:*=0;
            var loc8:*=0;
            var loc5:*=0;
            if (arg1 == null || arg1.getCondition() == 0 || arg1.isTaihi())
            {
                return 0;
            }
            var loc6:*=arg1.getSlotItemIDs();
            var loc1:*=false;
            var loc3:*=DataFacade.getMasterSlotItemData();
            var loc4:*=0;
            loc9 = 0;
            while (loc9 < loc6.length)
            {
                loc2 = loc6[loc9];
                loc7 = loc3.getSlotItemEquipType(loc2);
                loc8 = loc3.getSlotItemIconType(loc2);
                loc5 = 0;
                if (loc7 != 18)
                {
                    if (loc8 != 16)
                    {
                        if (loc2 != 51)
                        {
                            if (loc7 != 21)
                            {
                                if (loc8 == 11 && loc3.getTaikuu(loc2) > 0)
                                {
                                    loc5 = 4;
                                }
                            }
                            else
                            {
                                loc5 = 4;
                            }
                        }
                        else
                        {
                            loc5 = 2;
                        }
                    }
                    else
                    {
                        loc5 = 3;
                    }
                }
                else
                {
                    loc5 = 1;
                }
                if (loc5 > 0 && (loc5 < loc4 || loc4 == 0))
                {
                    loc4 = loc5;
                }
                ++loc9;
            }
            if (loc4 != 2)
            {
                if (loc4 == 3)
                {
                    loc4 = 2;
                }
            }
            else
            {
                loc4 = 3;
            }
            return loc4;
        }

        public static function getAntiAircraftAbility(arg1:battle.vo.BattleShipData):int
        {
            var loc1:*=hasAntiAircraftAbility(arg1);
            if (loc1 == 0)
            {
                return -1;
            }
            if (loc1 > 3)
            {
                return 0;
            }
            return loc1;
        }

        public static function getFriendPlaneType(arg1:int):int
        {
            var loc1:*=DataFacade.getMasterSlotItemData().getSlotItemEquipType(arg1);
            if (loc1 == 11)
            {
                return 2;
            }
            if (loc1 == 45)
            {
                return 3;
            }
            if (loc1 == 47)
            {
                return 4;
            }
            return 1;
        }

        public static function getEnemyPlaneType(arg1:int, arg2:Boolean=false):int
        {
            var loc2:*=0;
            var loc1:*=null;
            if (arg2)
            {
                return getFriendPlaneType(arg1);
            }
            loc2 = 0;
            while (loc2 < common.Consts.ENEMY_PLANETYPES.length)
            {
                loc1 = common.Consts.ENEMY_PLANETYPES[loc2];
                if (loc1.indexOf(arg1) != -1)
                {
                    return loc2 + 31;
                }
                ++loc2;
            }
            return 30;
        }

        public static function getEnemySlotitemItemUpImageID(arg1:int):int
        {
            var loc1:*=0;
            if (SlotitemUtil.isValidPlaneItemID(arg1))
            {
                loc1 = getEnemyPlaneType(arg1, false);
            }
            if (arg1 > 500)
            {
                if (common.Consts.enemySlotitemImage.hasOwnProperty(arg1))
                {
                    return common.Consts.enemySlotitemImage[arg1];
                }
                return arg1 - 500;
            }
            return arg1;
        }

        public static function hasSearchLight(arg1:battle.vo.BattleShipData):int
        {
            if (arg1 == null)
            {
                return -1;
            }
            var loc1:*=arg1.getSlotItemEquipTypes();
            if (loc1.indexOf(42) != -1)
            {
                return 42;
            }
            if (loc1.indexOf(29) != -1)
            {
                return 29;
            }
            return -1;
        }
    }
}


//    package views
//      package airunit
//        class AirUnitSupportResult
package battle.views.airunit
{
    import a24.tween.*;
    import battle.image.*;
    import common.debug.*;
    import flash.display.*;
    import flash.events.*;

    public class AirUnitSupportResult extends flash.display.Sprite
    {
        public function AirUnitSupportResult()
        {
            super();
            return;
        }

        public function initialize(arg1:int, arg2:*):void
        {
            _start_count = arg1;
            _end_count = arg2;
            return;
        }

        public function start():void
        {
            var loc1:*=NaN;
            if (_start_count == 0)
            {
                _no();
            }
            if (_end_count != 0)
            {
                loc1 = _end_count / _start_count;
                if (loc1 < 0.25)
                {
                    _orange();
                }
                else if (loc1 < 0.4)
                {
                    _yellow();
                }
                else
                {
                    _no();
                }
            }
            else
            {
                _red();
            }
            return;
        }

        public function dispose():void
        {
            if (_bmp != null)
            {
                removeChild(_bmp);
                _bmp = null;
            }
            return;
        }

        private function _no():void
        {
            common.debug.Debug.log("[基地航空隊支援] 被害軽微");
            _end();
            return;
        }

        public function _yellow():void
        {
            common.debug.Debug.log("[基地航空隊支援] 未帰還機多数");
            _createBitmap(battle.image.ImgTelopAirUnitSupportResultYellow);
            _anim();
            return;
        }

        public function _orange():void
        {
            common.debug.Debug.log("[基地航空隊支援] 被害甚大");
            _createBitmap(battle.image.ImgTelopAirUnitSupportResultOrange);
            _anim();
            return;
        }

        public function _red():void
        {
            common.debug.Debug.log("[基地航空隊支援] 全滅");
            _createBitmap(battle.image.ImgTelopAirUnitSupportResultRed);
            _anim();
            return;
        }

        private function _createBitmap(arg1:Class):void
        {
            _bmp = new flash.display.Bitmap(new arg1());
            _bmp.x = (-_bmp.width) / 2;
            _bmp.y = (-_bmp.height) / 2;
            return;
        }

        private function _anim():void
        {
            _bmp.alpha = 0;
            addChild(_bmp);
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(_bmp).$$x(16).alpha(0), a24.tween.Tween24.tween(_bmp, 0.3).$$x(-8).alpha(1), a24.tween.Tween24.tween(_bmp, 1.5).$$x(-16), a24.tween.Tween24.tween(_bmp, 0.3).$$x(-8).alpha(0)).onComplete(_end).play();
            return;
        }

        private function _end():void
        {
            dispatchEvent(new flash.events.Event("complete"));
            return;
        }

        private var _start_count:int;

        private var _end_count:int;

        private var _bmp:flash.display.Bitmap;
    }
}


//        class FlyingAirUnitCanvas
package battle.views.airunit
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.*;
    import battle.models.attack.*;
    import battle.vo.*;
    import common.debug.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;

    public class FlyingAirUnitCanvas extends flash.display.Sprite
    {
        public function FlyingAirUnitCanvas(arg1:battle.models.BattleData, arg2:battle.models.attack.AirUnitSupportData)
        {
            _trio_f = new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitTrioF>();
            _trio_e = new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitTrioE>();
            _plane_f = new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>();
            _plane_e = new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>();
            super();
            _airUnitData = arg2;
            _createPlanes_f(arg1);
            _createPlanes_e(arg1);
            _initDamageStage1_f();
            _initDamageStage1_e();
            _initDamageStage2_f();
            _initDamageStage2_e(arg1);
            return;
        }

        private function _initDamageStage1_e():void
        {
            var loc5:*=0;
            var loc2:*=null;
            var loc1:*=_airUnitData.getEnemyStage1LostRate();
            if (loc1 == 0)
            {
                return;
            }
            var loc6:*=0;
            loc5 = 0;
            while (loc5 < _plane_e.length)
            {
                loc6 = loc6 + _plane_e[loc5].power;
                ++loc5;
            }
            var loc4:*=loc6 * loc1;
            var loc3:*=_createCopyWithShuffle(_plane_e);
            loc5 = 0;
            while (loc5 < loc3.length)
            {
                loc2 = loc3[loc5];
                loc4 = loc2.calcDamageStage1(loc4);
                ++loc5;
            }
            return;
        }

        private function _initDamageStage2_f():void
        {
            var loc5:*=0;
            var loc2:*=null;
            var loc1:*=_airUnitData.getFriendStage2LostRate();
            if (loc1 == 0)
            {
                return;
            }
            var loc6:*=0;
            loc5 = 0;
            while (loc5 < _plane_f.length)
            {
                loc6 = loc6 + _plane_f[loc5].power_afterStage1;
                ++loc5;
            }
            var loc4:*=loc6 * loc1;
            var loc3:*=_createCopyWithShuffle(_plane_f);
            loc5 = 0;
            while (loc5 < loc3.length)
            {
                loc2 = loc3[loc5];
                loc4 = loc2.calcDamageStage2(loc4);
                ++loc5;
            }
            return;
        }

        private function _initDamageStage2_e(arg1:battle.models.BattleData):void
        {
            var loc8:*=0;
            var loc3:*=null;
            var loc1:*=_airUnitData.getFriendStage2LostRate();
            if (loc1 == 0)
            {
                return;
            }
            var loc9:*=0;
            loc8 = 0;
            while (loc8 < _plane_f.length)
            {
                loc9 = loc9 + _plane_f[loc8].power_afterStage1;
                ++loc8;
            }
            var loc6:*=loc9 * loc1;
            var loc4:*=_createCopyWithShuffle(_plane_f);
            var loc2:*=new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>();
            loc8 = 0;
            while (loc8 < loc4.length)
            {
                loc6 = (loc3 = loc4[loc8]).calcDamageStage2(loc6);
                if (loc4[loc8].power_afterStage1 > 0)
                {
                    loc2.push(loc4[loc8]);
                }
                ++loc8;
            }
            loc2 = _createCopyWithShuffle(loc2);
            var loc7:*=arg1.getAntiAircraftAbilities_f().concat();
            var loc5:*=Math.min(loc2.length, loc7.length);
            loc8 = 0;
            while (loc8 < loc5)
            {
                loc2[loc8].aa_type = loc7[loc8];
                ++loc8;
            }
            return;
        }

        private function _getPowerAll(arg1:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>, arg2:String):Number
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < arg1.length)
            {
                loc1 = loc1 + arg1[loc2][arg2];
                ++loc2;
            }
            return loc1;
        }

        private function _getSortedAlivePlanes(arg1:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>):__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc3:*=new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>();
            var loc1:*=new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>();
            loc4 = 0;
            while (loc4 < arg1.length)
            {
                loc2 = arg1[loc4];
                if (loc2.state != 0)
                {
                    if (loc2.state == 1)
                    {
                        loc1.push(loc2);
                    }
                }
                else
                {
                    loc3.push(loc2);
                }
                ++loc4;
            }
            loc3 = _createCopyWithShuffle(loc3);
            loc1 = _createCopyWithShuffle(loc1);
            return loc3.concat(loc1);
        }

        private function _getRandomPlane(arg1:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>):battle.views.airunit.FlyingAirUnitSolo
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc3:*=[];
            var loc1:*=[];
            loc4 = 0;
            while (loc4 < arg1.length)
            {
                loc2 = arg1[loc4];
                if (loc2.state != 0)
                {
                    if (loc2.state == 1)
                    {
                        loc1.push(loc2);
                    }
                }
                else
                {
                    loc3.push(loc2);
                }
                ++loc4;
            }
            if (loc3.length)
            {
                return loc3[Math.floor(Math.random() * loc3.length)];
            }
            if (loc1.length)
            {
                return loc1[Math.floor(Math.random() * loc1.length)];
            }
            return null;
        }

        public function get trio_f():__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitTrioF>
        {
            return _trio_f;
        }

        public function get trio_e():__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitTrioE>
        {
            return _trio_e;
        }

        public function finalize():void
        {
            _mainTween = null;
            _trio_f = null;
            _trio_e = null;
            _plane_f = null;
            _plane_e = null;
            return;
        }

        public function getTween(arg1:battle.models.BattleData):a24.tween.Tween24
        {
            return a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(this, "complete"), a24.tween.Tween24.func(_tween, arg1));
        }

        public function play():void
        {
            if (_mainTween != null)
            {
                _mainTween.play();
            }
            return;
        }

        public function pause():void
        {
            if (_mainTween != null)
            {
                _mainTween.pause();
            }
            return;
        }

        public function changeStateAfterStage1():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < trio_f.length)
            {
                trio_f[loc1].changeStateAfterStage1();
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < trio_e.length)
            {
                trio_e[loc1].changeStateAfterStage1();
                ++loc1;
            }
            return;
        }

        public function changeStateAfterStage2():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < trio_f.length)
            {
                trio_f[loc1].changeStateAfterStage2();
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < trio_e.length)
            {
                trio_e[loc1].changeStateAfterStage2();
                ++loc1;
            }
            return;
        }

        private function _tween(arg1:battle.models.BattleData):void
        {
            var loc2:*=0;
            var loc1:*=[];
            loc2 = 0;
            while (loc2 < _trio_f.length)
            {
                loc1.push(_trio_f[loc2].getTweenAnimation(arg1));
                ++loc2;
            }
            loc2 = 0;
            while (loc2 < _trio_e.length)
            {
                loc1.push(_trio_e[loc2].getTweenAnimation(arg1));
                ++loc2;
            }
            _mainTween = a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc1), a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("complete")));
            _mainTween.play();
            return;
        }

        public function getPowerAll_f():Number
        {
            return _getPowerAll(_plane_f, "power");
        }

        public function getPowerAll_e():Number
        {
            return _getPowerAll(_plane_e, "power");
        }

        public function getPowerStage1End_f():Number
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < _plane_f.length)
            {
                loc1 = loc1 + _plane_f[loc2].power_afterStage1;
                ++loc2;
            }
            return loc1;
        }

        public function getPowerStage1End_e():Number
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < _plane_e.length)
            {
                loc1 = loc1 + _plane_e[loc2].power_afterStage1;
                ++loc2;
            }
            return loc1;
        }

        public function getPowerStage2End_f():Number
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < _plane_f.length)
            {
                loc1 = loc1 + _plane_f[loc2].power_afterStage2;
                ++loc2;
            }
            return loc1;
        }

        public function getPowerStage2End_e():Number
        {
            var loc2:*=0;
            var loc1:*=0;
            loc2 = 0;
            while (loc2 < _plane_e.length)
            {
                loc1 = loc1 + _plane_e[loc2].power_afterStage2;
                ++loc2;
            }
            return loc1;
        }

        public function getRandomPlane_f():battle.views.airunit.FlyingAirUnitSolo
        {
            return _getRandomPlane(_plane_f);
        }

        public function getRandomPlane_e():battle.views.airunit.FlyingAirUnitSolo
        {
            return _getRandomPlane(_plane_e);
        }

        protected function _createPlanes_f(arg1:battle.models.BattleData):void
        {
            var loc6:*=0;
            var loc5:*=NaN;
            var loc3:*=0;
            var loc2:*=0;
            var loc4:*=null;
            var loc1:*=_airUnitData.getCompanyTotalNum();
            common.debug.Debug.log("航空隊[" + _airUnitData.airUnitID + "] 生成");
            loc6 = 0;
            while (loc6 < loc1)
            {
                loc5 = 60;
                loc3 = _airUnitData.getCompanyMstID(loc6);
                loc2 = _airUnitData.getCompanyCount(loc6);
                common.debug.Debug.log("[中隊] mstID:" + loc3 + " 稼働数:" + loc2);
                (loc4 = new battle.views.airunit.FlyingAirUnitTrioF(loc3, loc2)).x = -50;
                loc4.y = loc5 * 2 + loc5 * loc6 + loc5 + 0.5;
                addChild(loc4);
                _trio_f.push(loc4);
                _plane_f = _plane_f.concat(loc4.planes);
                ++loc6;
            }
            return;
        }

        private function _createPlanes_e(arg1:battle.models.BattleData):void
        {
            var loc6:*=0;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*=null;
            var loc2:*=_airUnitData.getEnemyPlaneFrom();
            loc6 = 0;
            while (loc6 < loc2.length)
            {
                loc3 = loc2[loc6];
                loc5 = (loc4 = arg1.enemyShips[loc3]).banner.getGlobalPos();
                loc1 = new battle.views.airunit.FlyingAirUnitTrioE(loc4);
                loc1.x = loc5.x + 160 / 2;
                loc1.y = loc5.y + 40 / 2;
                addChild(loc1);
                _trio_e.push(loc1);
                _plane_e = _plane_e.concat(loc1.planes);
                ++loc6;
            }
            return;
        }

        private function _createCopyWithShuffle(arg1:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>):__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>
        {
            var loc4:*=0;
            var loc2:*=NaN;
            var loc1:*=null;
            var loc3:*=new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>();
            loc4 = 0;
            while (loc4 < arg1.length)
            {
                loc3.push(arg1[loc4]);
                ++loc4;
            }
            loc4 = 0;
            while (loc4 < loc3.length)
            {
                loc2 = Math.floor(Math.random() * loc3.length);
                loc1 = loc3[loc2];
                loc3[loc2] = loc3[loc4];
                loc3[loc4] = loc1;
                ++loc4;
            }
            return loc3;
        }

        private function _initDamageStage1_f():void
        {
            var loc5:*=0;
            var loc2:*=null;
            var loc1:*=_airUnitData.getFriendStage1LostRate();
            if (loc1 == 0)
            {
                return;
            }
            var loc6:*=0;
            loc5 = 0;
            while (loc5 < _plane_f.length)
            {
                loc6 = loc6 + _plane_f[loc5].power;
                ++loc5;
            }
            var loc4:*=loc6 * loc1;
            var loc3:*=_createCopyWithShuffle(_plane_f);
            loc5 = 0;
            while (loc5 < loc3.length)
            {
                loc2 = loc3[loc5];
                loc4 = loc2.calcDamageStage1(loc4);
                ++loc5;
            }
            return;
        }

        private var _airUnitData:battle.models.attack.AirUnitSupportData;

        private var _mainTween:a24.tween.Tween24;

        protected var _trio_f:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitTrioF>;

        protected var _trio_e:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitTrioE>;

        protected var _plane_f:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>;

        protected var _plane_e:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>;
    }
}


//        class FlyingAirUnitSolo
package battle.views.airunit
{
    import a24.tween.*;
    import battle.views.effects.bomb.*;
    import common.util.*;
    import flash.display.*;
    import flash.geom.*;
    import res.battle.plane.*;

    public class FlyingAirUnitSolo extends flash.display.Sprite
    {
        public function FlyingAirUnitSolo(arg1:Boolean)
        {
            super();
            _mc = arg1 ? new res.battle.plane.PlaneFMC() : new res.battle.plane.PlaneEMC();
            addChild(_mc);
            _mc.plane.stop();
            _mc.attack_fire.stop();
            _mc.smoke.visible = false;
            return;
        }

        public function get state():int
        {
            return _state;
        }

        public function get power():Number
        {
            return 1;
        }

        public function get power_afterStage1():Number
        {
            return _power_afterStage1;
        }

        public function get power_afterStage2():Number
        {
            return _power_afterStage2;
        }

        public function changeType(arg1:int):void
        {
            _mc.plane.gotoAndStop(arg1);
            return;
        }

        public function calcDamageStage1(arg1:Number):Number
        {
            _power_afterStage1 = power - Math.min(power, arg1);
            if (arg1 >= power)
            {
                return arg1 - power;
            }
            return 0;
        }

        public function calcDamageStage2(arg1:Number):Number
        {
            _power_afterStage2 = power_afterStage1 - Math.min(power_afterStage1, arg1);
            if (arg1 >= power_afterStage1)
            {
                return arg1 - power_afterStage1;
            }
            return 0;
        }

        public function attack():void
        {
            a24.tween.Tween24.serial(common.util.SoundUtil.playSE(BattleAssets.SE_battle_shoot), common.util.MCUtil.frameTween(_mc.attack_fire, Math.ceil(Math.random() * 5) + 1, _mc.attack_fire.totalFrames)).play();
            return;
        }

        public function damage():void
        {
            var bomb:battle.views.effects.bomb.Explosion;

            var loc1:*;
            if (_state == 0)
            {
                bomb = new battle.views.effects.bomb.Explosion();
                _bombTween = a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_mc, bomb), bomb.createBombTween(0, "EXPLOSION_TYPE:SMALL"), a24.tween.Tween24.removeChild(bomb), a24.tween.Tween24.prop(_mc.smoke).scale(0), a24.tween.Tween24.visible(true, _mc.smoke), a24.tween.Tween24.tween(_mc.smoke, 0.3).scale(1), a24.tween.Tween24.func(function ():void
                {
                    _bombTween = null;
                    return;
                }))
                _bombTween.play();
            }
            _state = 1;
            return;
        }

        public function crash():void
        {
            var bomb:battle.views.effects.bomb.Explosion;

            var loc1:*;
            if (_state == 0 || _state == 1)
            {
                bomb = new battle.views.effects.bomb.Explosion();
                _bombTween = a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_mc, bomb), a24.tween.Tween24.parallel(bomb.createBombTween(0, "EXPLOSION_TYPE:SMALL"), a24.tween.Tween24.visible(false, _mc).delay(0.2)), a24.tween.Tween24.removeChild(bomb), a24.tween.Tween24.func(function ():void
                {
                    _bombTween = null;
                    _state = 3;
                    return;
                }))
                _bombTween.play();
            }
            _state = 2;
            return;
        }

        public function getGlobalPos():flash.geom.Point
        {
            var loc1:*=new flash.geom.Point(x, y);
            return parent.localToGlobal(loc1);
        }

        public function play():void
        {
            if (!(_bombTween == null) && _bombTween.pausing)
            {
                _bombTween.play();
            }
            return;
        }

        public function pause():void
        {
            if (!(_bombTween == null) && _bombTween.playing)
            {
                _bombTween.pause();
            }
            return;
        }

        public static const STATE_NORMAL:int=0;

        public static const STATE_DAMAGE:int=1;

        public static const STATE_CRASH:int=2;

        public static const STATE_DEAD:int=3;

        private var _mc:flash.display.MovieClip;

        private var _state:int=0;

        private var _power_afterStage1:Number=1;

        private var _power_afterStage2:Number=1;

        private var _bombTween:a24.tween.Tween24=null;

        public var aa_type:int=0;
    }
}


//        class FlyingAirUnitTrio
package battle.views.airunit
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.display.main.plane.*;
    import battle.events.*;
    import battle.models.*;
    import battle.util.*;
    import flash.display.*;
    import flash.geom.*;
    import res.battle.plane.*;

    public class FlyingAirUnitTrio extends flash.display.Sprite
    {
        public function FlyingAirUnitTrio()
        {
            _planes = new __AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>();
            _dropTweenMap = new __AS3__.vec.Vector.<a24.tween.Tween24>();
            super();
            _friendFlg = this is battle.views.airunit.FlyingAirUnitTrioE ? false : true;
            if (_friendFlg != true)
            {
                _mc = new res.battle.plane.PlaneETrioMC();
            }
            else
            {
                _mc = new res.battle.plane.PlaneFTrioMC();
            }
            _mc.gotoAndPlay(Math.ceil(Math.random() * 60));
            _mc.p1.removeChildren();
            _mc.p2.removeChildren();
            _mc.p3.removeChildren();
            addChild(_mc);
            _mc.gotoAndPlay(Math.ceil(Math.random() * 60));
            return;
        }

        public function get mc():flash.display.MovieClip
        {
            return _mc;
        }

        public function get planes():__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>
        {
            return _planes;
        }

        public function get planeNum():uint
        {
            return _planes.length;
        }

        public function addPlane(arg1:int):void
        {
            var loc2:*=0;
            if (_planes.length > 3)
            {
                return;
            }
            var loc3:*=_mc["p" + (_planes.length + 1)];
            var loc1:*=new battle.views.airunit.FlyingAirUnitSolo(_friendFlg);
            _planes.push(loc1);
            _dropTweenMap.push(null);
            if (_friendFlg != true)
            {
                loc2 = battle.util.SlotitemUtil.getEnemyPlaneType(arg1, false);
            }
            else
            {
                loc2 = battle.util.SlotitemUtil.getFriendPlaneType(arg1);
            }
            loc1.changeType(loc2);
            loc3.addChild(loc1);
            return;
        }

        public function attack(arg1:battle.models.BattleData):void
        {
            _getTweenAttack(arg1).play();
            return;
        }

        public function changeStateAfterStage1():void
        {
            var loc3:*=0;
            var loc2:*=null;
            var loc1:*=0;
            loc3 = 0;
            while (loc3 < _planes.length)
            {
                loc2 = _planes[loc3];
                if (loc2.power_afterStage1 <= 0)
                {
                    if (loc2.state == 1)
                    {
                        loc1 = _planes.indexOf(loc2);
                        if (_dropTweenMap[loc1] != null)
                        {
                            _dropTweenMap[loc1].stop();
                            _dropTweenMap[loc1] = null;
                            _playEnd();
                        }
                    }
                    loc2.crash();
                }
                else if (loc2.power_afterStage1 < loc2.power)
                {
                    if (loc2.state == 0)
                    {
                        _createDropPlaneTween(loc2);
                    }
                    loc2.damage();
                }
                ++loc3;
            }
            return;
        }

        public function changeStateAfterStage2():void
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=0;
            loc4 = 0;
            while (loc4 < _planes.length)
            {
                loc2 = _planes[loc4];
                if (loc2.aa_type > 0)
                {
                    loc3 = new battle.display.main.plane.FlyPlaneExplode(loc2.aa_type);
                    loc3.x = loc2.x;
                    loc3.y = loc2.y;
                    loc2.addChild(loc3);
                    loc3.playAnimation();
                }
                if (loc2.power_afterStage2 <= 0)
                {
                    if (loc2.state == 1)
                    {
                        loc1 = _planes.indexOf(loc2);
                        if (_dropTweenMap[loc1] != null)
                        {
                            _dropTweenMap[loc1].stop();
                            _dropTweenMap[loc1] = null;
                            _playEnd();
                        }
                    }
                    loc2.crash();
                }
                else if (loc2.power_afterStage2 < loc2.power)
                {
                    if (loc2.state == 0)
                    {
                        _createDropPlaneTween(loc2);
                    }
                    loc2.damage();
                }
                ++loc4;
            }
            return;
        }

        public function drawLine():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=_friendFlg ? 1 : -1;
            if (longDistance != true)
            {
                loc2 = new flash.geom.Point(610 * loc1, 160);
                loc3 = new flash.geom.Point(835 * loc1, -190);
            }
            else
            {
                loc2 = new flash.geom.Point(400 * loc1, 300);
                loc3 = new flash.geom.Point(535 * loc1, -670);
            }
            graphics.lineStyle(3, 65280);
            graphics.moveTo(0, 0);
            graphics.curveTo(loc2.x, loc2.y, loc3.x, loc3.y);
            graphics.lineStyle(1, 255);
            graphics.moveTo(0, 0);
            graphics.lineTo(loc2.x, loc2.y);
            graphics.lineTo(loc3.x, loc3.y);
            return;
        }

        public function getTweenAnimation(arg1:battle.models.BattleData):a24.tween.Tween24
        {
            return a24.tween.Tween24.waitEvent(this, "battle.events.PlaneEventEnd").onPause(pause).onPlay(play);
        }

        public function play():void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc3:*=null;
            var loc1:*=NaN;
            var loc7:*=0;
            var loc2:*=_friendFlg ? 1 : -1;
            if (_mainTimelineTween == null)
            {
                if (longDistance != true)
                {
                    loc4 = new flash.geom.Point(740 * loc2, 200);
                    loc5 = new flash.geom.Point(915 * loc2, -370);
                }
                else
                {
                    loc4 = new flash.geom.Point(400 * loc2, 300);
                    loc5 = new flash.geom.Point(535 * loc2, -670);
                }
                _mc.scaleX = 0;
                _mc.scaleY = 0;
                addChild(_mc);
                loc6 = [{"point":[0, 0], "pre":[0, 0], "post":[0.27, 0.19]}, {"point":[1, 1], "pre":[0.88, 0.58], "post":[1, 1]}];
                loc3 = a24.tween.Ease24.custom(loc6);
                loc1 = 3.7;
                _mainTimelineTween = a24.tween.Tween24.serial(a24.tween.Tween24.tween(_mc, 0.3).scaleXY(0.75, 0.75), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(_mc, loc1, loc3).xy(loc5.x, loc5.y).bezier(loc4.x, loc4.y), a24.tween.Tween24.tween(_mc, 0.5).scaleXY(0.5, 0.5).delay(loc1 - 0.5))).onComplete(_prePlayEnd);
            }
            _mainTimelineTween.play();
            loc7 = 0;
            while (loc7 < _dropTweenMap.length)
            {
                if (_dropTweenMap[loc7] != null)
                {
                    _dropTweenMap[loc7].play();
                }
                ++loc7;
            }
            _mc.play();
            loc7 = 0;
            while (loc7 < _planes.length)
            {
                _planes[loc7].play();
                ++loc7;
            }
            return;
        }

        private function pause():void
        {
            var loc1:*=0;
            if (_mainTimelineTween != null)
            {
                _mainTimelineTween.pause();
            }
            loc1 = 0;
            while (loc1 < _dropTweenMap.length)
            {
                if (_dropTweenMap[loc1] != null)
                {
                    _dropTweenMap[loc1].pause();
                }
                ++loc1;
            }
            _mc.stop();
            loc1 = 0;
            while (loc1 < _planes.length)
            {
                _planes[loc1].pause();
                ++loc1;
            }
            return;
        }

        private function _prePlayEnd():void
        {
            _mainTimelineTween = null;
            _playEnd();
            return;
        }

        private function _playEnd():void
        {
            var loc1:*=0;
            if (_mainTimelineTween != null)
            {
                return;
            }
            loc1 = 0;
            while (loc1 < _dropTweenMap.length)
            {
                if (_dropTweenMap[loc1] != null)
                {
                    return;
                }
                ++loc1;
            }
            dispatchEvent(new battle.events.PlaneEvent("PLANE_EVENT::END"));
            return;
        }

        private function _getTweenAttack(arg1:battle.models.BattleData):a24.tween.Tween24
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=[a24.tween.Tween24.wait(0)];
            if (_hasAttack(arg1))
            {
                loc1 = [0, 2, 3];
                loc2 = 0;
                while (loc2 < _planes.length)
                {
                    loc3.push(a24.tween.Tween24.func(_planes[loc2].attack).delay(loc1[loc2] / 30));
                    ++loc2;
                }
            }
            return a24.tween.Tween24.parallel(loc3);
        }

        protected function _hasAttack(arg1:battle.models.BattleData):Boolean
        {
            return false;
        }

        private function _createDropPlaneTween(arg1:battle.views.airunit.FlyingAirUnitSolo):void
        {
            var loc7:*=arg1.getGlobalPos();
            var loc4:*=globalToLocal(loc7);
            arg1.x = loc4.x;
            arg1.y = loc4.y;
            var loc8:*;
            arg1.scaleY = loc8 = 0.75;
            arg1.scaleX = loc8;
            addChild(arg1);
            var loc5:*;
            var loc1:*=(loc5 = 480 - loc7.y + arg1.height) / 100;
            var loc6:*=(_friendFlg ? 1 : -1) * loc5;
            var loc3:*=a24.tween.Tween24.parallel(a24.tween.Tween24.tween(arg1, Math.floor(loc1), a24.tween.Ease24._2_QuadInOut).$$x(loc6), a24.tween.Tween24.tween(arg1, Math.floor(loc1), a24.tween.Ease24._4_QuartIn).$$y(loc5));
            var loc2:*=_planes.indexOf(arg1);
            _dropTweenMap[loc2] = loc3;
            loc3.onComplete(_dropTweenEnd, loc2).play();
            return;
        }

        private function _dropTweenEnd(arg1:int):void
        {
            _dropTweenMap[arg1] = null;
            _playEnd();
            return;
        }

        protected var _friendFlg:Boolean=true;

        protected var _mc:flash.display.MovieClip;

        protected var _planes:__AS3__.vec.Vector.<battle.views.airunit.FlyingAirUnitSolo>;

        protected var _dropTweenMap:__AS3__.vec.Vector.<a24.tween.Tween24>;

        private var _mainTimelineTween:a24.tween.Tween24;

        public var longDistance:Boolean=false;
    }
}


//        class FlyingAirUnitTrioE
package battle.views.airunit
{
    import battle.models.*;
    import battle.util.*;
    import battle.vo.*;

    public class FlyingAirUnitTrioE extends battle.views.airunit.FlyingAirUnitTrio
    {
        public function FlyingAirUnitTrioE(arg1:battle.vo.BattleShipData)
        {
            super();
            var loc1:*=battle.util.SlotitemUtil.getPlaneItemIDList(arg1);
            if (loc1.length > 0)
            {
                addPlane(loc1[0]);
                if (loc1.length > 1)
                {
                    addPlane(loc1[1]);
                    if (loc1.length > 2)
                    {
                        addPlane(loc1[2]);
                    }
                }
            }
            return;
        }

        protected override function _hasAttack(arg1:battle.models.BattleData):Boolean
        {
            return arg1.hasAtacckPlane_e() && arg1.combatDataD.koukuuData.planeFrom_f.length;
        }
    }
}


//        class FlyingAirUnitTrioF
package battle.views.airunit
{
    import battle.models.*;
    import common.debug.*;

    public class FlyingAirUnitTrioF extends battle.views.airunit.FlyingAirUnitTrio
    {
        public function FlyingAirUnitTrioF(arg1:int, arg2:int)
        {
            super();
            common.debug.Debug.log("\t" + DataFacade.getMasterSlotItemData().getName(arg1));
            addPlane(arg1);
            if (arg2 > 6)
            {
                common.debug.Debug.log("\t" + DataFacade.getMasterSlotItemData().getName(arg1));
                addPlane(arg1);
            }
            return;
        }

        protected override function _hasAttack(arg1:battle.models.BattleData):Boolean
        {
            return arg1.hasAtacckPlane_f() && arg1.combatDataD.koukuuData.planeFrom_e.length;
        }
    }
}


//        class OpeningTelop
package battle.views.airunit
{
    import a24.tween.*;
    import battle.image.*;
    import flash.display.*;
    import flash.events.*;
    import res.images.battle.*;

    public class OpeningTelop extends flash.display.Sprite
    {
        public function OpeningTelop()
        {
            super();
            _bgLayer = new flash.display.Sprite();
            _textLayer = new flash.display.Sprite();
            return;
        }

        public function initialize():void
        {
            var loc1:*=null;
            loc1 = new flash.display.Bitmap(new res.images.battle.MessageBGGreenImage());
            loc1.smoothing = true;
            loc1.x = (-loc1.width) / 2;
            loc1.y = (-loc1.height) / 2;
            _bgLayer.addChild(loc1);
            loc1 = new flash.display.Bitmap(new battle.image.ImgTelopAirUnit());
            loc1.smoothing = true;
            loc1.x = (-loc1.width) / 2;
            loc1.y = (-loc1.height) / 2;
            _textLayer.addChild(loc1);
            return;
        }

        public function play():void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(this).xy(800 / 2, 480 / 2), a24.tween.Tween24.prop(_textLayer).x(100).alpha(0), a24.tween.Tween24.prop(_bgLayer).scaleY(0), a24.tween.Tween24.addChild(this, _bgLayer, _textLayer), a24.tween.Tween24.tween(_bgLayer, 0.3).scaleY(1), a24.tween.Tween24.tween(_textLayer, 0.3).x(60).alpha(1), a24.tween.Tween24.tween(_textLayer, 0.35).x(-60), a24.tween.Tween24.tween(_textLayer, 0.5).x(-100).alpha(0), a24.tween.Tween24.tween(_bgLayer, 0.3).scaleY(0), a24.tween.Tween24.removeAllChildren(this)).onComplete(dispatchEvent, new flash.events.Event("complete")).play();
            return;
        }

        private var _bgLayer:flash.display.Sprite;

        private var _textLayer:flash.display.Sprite;
    }
}


//      package cutins
//        class BossInsertCutin
package battle.views.cutins
{
    import a24.tween.*;
    import common.display.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import manager.resource.*;
    import res.battle.bossinsert.*;

    public class BossInsertCutin extends flash.display.Sprite
    {
        public function BossInsertCutin()
        {
            _bossCanvas = new flash.display.Sprite();
            super();
            _fade = new common.display.FadeLayer();
            _mc = new res.battle.bossinsert.MCBossInsert();
            _mc.stop();
            addChild(_fade);
            addChild(_mc);
            _mc.boss.addChild(_bossCanvas);
            return;
        }

        public function getTweenInitialize(arg1:Object):a24.tween.Tween24
        {
            _insertO = arg1;
            var loc1:*=arg1.id;
            var loc2:*=AppFacade.createShipAttacher();
            loc2.stackFull(loc1, _bossCanvas);
            _bossCanvas.x = arg1.hasOwnProperty("offsetX") ? arg1.offsetX : 0;
            _bossCanvas.y = arg1.hasOwnProperty("offsetY") ? arg1.offsetY : 0;
            _textSet = new TextSet(arg1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc2.load)));
        }

        public function getTween(arg1:flash.display.DisplayObjectContainer):a24.tween.Tween24
        {
            var loc1:*=new common.display.ClickAreaLayer();
            loc1.buttonMode = true;
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(arg1, this), a24.tween.Tween24.parallel(_fade.getTween(1, 0.5), common.util.MCUtil.frameTween(_mc, 1, 37)), a24.tween.Tween24.addChild(_mc, _textSet, loc1), a24.tween.Tween24.func(_textSet.playAnim), a24.tween.Tween24.func(common.util.SoundUtil.playVoice, 9998, _insertO["voice"]).delay(0.4), a24.tween.Tween24.waitEvent(loc1, "click"), a24.tween.Tween24.removeChild(_textSet, loc1), a24.tween.Tween24.parallel(_fade.getTween(0, 0.5), common.util.MCUtil.frameTween(_mc, 37, _mc.totalFrames)), a24.tween.Tween24.removeChild(this));
        }

        private var _insertO:Object;

        private var _fade:common.display.FadeLayer;

        private var _mc:res.battle.bossinsert.MCBossInsert;

        private var _bossCanvas:flash.display.Sprite;

        private var _textSet:TextSet;
    }
}

import a24.tween.*;
import res.battle.bossinsert.*;


class TextSet extends res.battle.bossinsert.MCTextSet
{
    public function TextSet(arg1:Object)
    {
        var loc1:*=null;
        var loc2:*=null;
        super();
        stop();
        if (arg1.hasOwnProperty("stype"))
        {
            loc1 = arg1.stype;
        }
        else
        {
            loc1 = DataFacade.getMasterShipData().getShipTypeName(arg1.id);
        }
        if (arg1.hasOwnProperty("name"))
        {
            loc2 = arg1.name;
        }
        else
        {
            loc2 = DataFacade.getMasterShipData().getName(arg1.id);
        }
        sTypeText.text = loc1;
        nameText.text = loc2;
        messageText.text = "";
        _message = arg1.message;
        var loc3:*;
        nameText.visible = loc3 = false;
        sTypeText.visible = loc3;
        return;
    }

    public function playAnim():void
    {
        sTypeText.visible = true;
        a24.tween.Tween24.wait(0.2).onComplete(_playAnim2).play();
        return;
    }

    private function _playAnim2():void
    {
        nameText.visible = true;
        a24.tween.Tween24.wait(0.2).onComplete(_playAnim3).play();
        return;
    }

    private function _playAnim3():void
    {
        if (_message.length > 0)
        {
            messageText.text = messageText.text + _message.substr(0, 1);
            _message = _message.slice(1, _message.length);
            a24.tween.Tween24.wait(0.1).onComplete(_playAnim3).play();
        }
        return;
    }

    private var _message:String;
}

//        class CutinDaySuper1
package battle.views.cutins
{
    import battle.util.*;
    import common.*;
    import manager.resource.*;

    public class CutinDaySuper1 extends battle.views.cutins.CutinDaySuperBase
    {
        public function CutinDaySuper1()
        {
            super();
            return;
        }

        protected override function _attacheItemResources(arg1:manager.resource.ISlotitemAttacher):void
        {
            var loc1:*=common.Consts.isEnemyCharacter(_charaID);
            if (loc1)
            {
                arg1.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID3), _mc.item1);
                arg1.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID2), _mc.item2);
            }
            else
            {
                arg1.stackItemUp(_slotitemID3, _mc.item1);
                arg1.stackItemUp(_slotitemID2, _mc.item2);
            }
            arg1.stackBtxt(_slotitemID3, _mc.weapon1.canvas);
            arg1.stackBtxt(_slotitemID2, _mc.weapon2.canvas);
            return;
        }
    }
}


//        class CutinDaySuper2
package battle.views.cutins
{
    import battle.util.*;
    import common.*;
    import manager.resource.*;

    public class CutinDaySuper2 extends battle.views.cutins.CutinDaySuperBase
    {
        public function CutinDaySuper2()
        {
            super();
            return;
        }

        protected override function _attacheItemResources(arg1:manager.resource.ISlotitemAttacher):void
        {
            var loc1:*=common.Consts.isEnemyCharacter(_charaID);
            if (loc1)
            {
                arg1.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID2), _mc.item1);
                arg1.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID3), _mc.item2);
            }
            else
            {
                arg1.stackItemUp(_slotitemID2, _mc.item1);
                arg1.stackItemUp(_slotitemID3, _mc.item2);
            }
            arg1.stackBtxt(_slotitemID2, _mc.weapon1.canvas);
            arg1.stackBtxt(_slotitemID3, _mc.weapon2.canvas);
            return;
        }
    }
}


//        class CutinDaySuper3
package battle.views.cutins
{
    import battle.util.*;
    import common.*;
    import manager.resource.*;

    public class CutinDaySuper3 extends battle.views.cutins.CutinDaySuperBase
    {
        public function CutinDaySuper3()
        {
            super();
            return;
        }

        protected override function _attacheItemResources(arg1:manager.resource.ISlotitemAttacher):void
        {
            var loc1:*=common.Consts.isEnemyCharacter(_charaID);
            if (loc1)
            {
                arg1.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID3), _mc.item1);
                arg1.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID2), _mc.item2);
            }
            else
            {
                arg1.stackItemUp(_slotitemID3, _mc.item1);
                arg1.stackItemUp(_slotitemID2, _mc.item2);
            }
            arg1.stackBtxt(_slotitemID3, _mc.weapon1.canvas);
            arg1.stackBtxt(_slotitemID2, _mc.weapon2.canvas);
            return;
        }
    }
}


//        class CutinDaySuper4
package battle.views.cutins
{
    import battle.util.*;
    import common.*;
    import manager.resource.*;

    public class CutinDaySuper4 extends battle.views.cutins.CutinDaySuperBase
    {
        public function CutinDaySuper4()
        {
            super();
            return;
        }

        protected override function _attacheItemResources(arg1:manager.resource.ISlotitemAttacher):void
        {
            var loc1:*=common.Consts.isEnemyCharacter(_charaID);
            if (loc1)
            {
                arg1.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID2), _mc.item1);
                arg1.stackItemUp(battle.util.SlotitemUtil.getEnemySlotitemItemUpImageID(_slotitemID3), _mc.item2);
            }
            else
            {
                arg1.stackItemUp(_slotitemID2, _mc.item1);
                arg1.stackItemUp(_slotitemID3, _mc.item2);
            }
            arg1.stackBtxt(_slotitemID2, _mc.weapon1.canvas);
            arg1.stackBtxt(_slotitemID3, _mc.weapon2.canvas);
            return;
        }
    }
}


//        class CutinDaySuperBase
package battle.views.cutins
{
    import a24.tween.*;
    import battle.events.*;
    import battle.views.planes.*;
    import common.*;
    import common.display.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;
    import vo.*;

    public class CutinDaySuperBase extends flash.display.Sprite
    {
        public function CutinDaySuperBase()
        {
            _bgBlack = new common.display.FadeLayer();
            _bgBlue = new common.display.FadeLayer(8900331);
            super();
            _mc = new res.battle.MCCutinDaySuperTSF();
            _mc.stop();
            var loc1:*;
            _bgBlue.x = loc1 = -400;
            _bgBlack.x = loc1;
            _bgBlue.y = loc1 = -240;
            _bgBlack.y = loc1;
            addChild(_bgBlack);
            addChild(_bgBlue);
            addChild(_mc);
            return;
        }

        public function getTweenInitialize(arg1:int, arg2:int, arg3:int, arg4:int, arg5:int, arg6:Boolean):a24.tween.Tween24
        {
            var charaID:int;
            var characterCondition:int;
            var slotitemID1:int;
            var slotitemID2:int;
            var slotitemID3:int;
            var isFriend:Boolean;
            var attacher:manager.resource.IShipAttacher;
            var itemAttacher:manager.resource.ISlotitemAttacher;

            var loc2:*;
            charaID = arg1;
            characterCondition = arg2;
            slotitemID1 = arg3;
            slotitemID2 = arg4;
            slotitemID3 = arg5;
            isFriend = arg6;
            _charaID = charaID;
            _isFriend = isFriend;
            _slotitemID1 = slotitemID1;
            _slotitemID2 = slotitemID2;
            _slotitemID3 = slotitemID3;
            if (!isFriend)
            {
                _mc.scaleX = -1;
                _mc.ship.canvas.scaleX = -1;
                _mc.title.canvas.scaleX = -1;
                var loc1:*;
                _mc.weapon2.canvas.scaleX = loc1 = -1;
                _mc.weapon1.canvas.scaleX = loc1;
            }
            _mc.bg1.gotoAndStop(isFriend ? 1 : 2);
            _mc.bg2.gotoAndStop(isFriend ? 1 : 2);
            _mc.bg3.gotoAndStop(isFriend ? 1 : 2);
            _mc.ship.canvas.removeChildren();
            attacher = AppFacade.createShipAttacher();
            attacher.stackFull(charaID, _mc.ship.canvas, characterCondition);
            _mc.plane.canvas.removeChildren();
            _mc.item1.removeChildren();
            _mc.item2.removeChildren();
            _mc.weapon1.canvas.removeChildren();
            _mc.weapon2.canvas.removeChildren();
            itemAttacher = AppFacade.createSlotitemAttacher();
            _attacheItemResources(itemAttacher);
            _plane = new battle.views.planes.Plane(_slotitemID1, itemAttacher);
            _mc.plane.canvas.addChild(_plane);
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(attacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(attacher.load), a24.tween.Tween24.waitEvent(itemAttacher as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(itemAttacher.load)), a24.tween.Tween24.func(function ():void
            {
                var loc3:*=DataFacade.getStartData();
                var loc2:*=loc3.getOffsetAtBattle(charaID, common.util.Util.isDamaged(characterCondition));
                _mc.ship.canvas.x = -30 + loc2.x;
                _mc.ship.canvas.y = loc2.y;
                if (_mc.ship.canvas.scaleX == -1)
                {
                    _mc.ship.canvas.x = _mc.ship.canvas.x + (536 - (loc2.x + loc2.x));
                    _mc.ship.canvas.y = _mc.ship.canvas.y + 0;
                }
                var loc1:*={};
                if (common.Consts.planeOffset.hasOwnProperty(_slotitemID1))
                {
                    loc1 = common.Consts.planeOffset[_slotitemID1];
                }
                _plane.init();
                _mc.weapon1.canvas.x = -_mc.weapon1.canvas.width;
                _mc.weapon1.canvas.y = (-_mc.weapon1.canvas.height) / 2;
                _mc.weapon2.canvas.y = (-_mc.weapon2.canvas.height) / 2;
                if (_mc.weapon1.canvas.scaleX == -1)
                {
                    _mc.title.canvas.x = _mc.title.canvas.x + _mc.title.canvas.width;
                    _mc.weapon1.canvas.x = _mc.weapon1.canvas.x + _mc.weapon1.canvas.width;
                    _mc.weapon2.canvas.x = _mc.weapon2.canvas.x + _mc.weapon2.canvas.width;
                }
                return;
            }))
        }

        public function getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(_bgBlack.getTween(1, 0.05), _bgBlack.getTween(0, 0.05), a24.tween.Tween24.parallel(_bgBlue.getTween(0.7, 0.25), a24.tween.Tween24.func(_plane.addEventListener, "enterFrame", _handlePlaneEnterframe), a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, 1, LABEL_KEY1), a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("CutinDaySuper::EVENT_ANIMATION_TIMING_1")), common.util.MCUtil.frameTween(_mc, LABEL_KEY1, LABEL_KEY2), a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("CutinDaySuper::EVENT_ANIMATION_TIMING_2"))), a24.tween.Tween24.func(_frameScript_playSE_card).delay(0.733333333333), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1), a24.tween.Tween24.func(_frameScript_playSE_card).delay(1.6), a24.tween.Tween24.func(_frameScript_playSE_card).delay(1.63333333333), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.83333333333), a24.tween.Tween24.func(_frameScript_playSE_don).delay(1.86666666667), a24.tween.Tween24.func(_frameScript_playVoice).delay(3))).onComplete(_finalize);
        }

        private function _finalize():void
        {
            a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, LABEL_KEY2, _mc.totalFrames), a24.tween.Tween24.removeChild(this), a24.tween.Tween24.func(_plane.removeEventListener, "enterFrame", _handlePlaneEnterframe)).play();
            return;
        }

        protected function _attacheItemResources(arg1:manager.resource.ISlotitemAttacher):void
        {
            return;
        }

        private function _frameScript_playSE_hikouki():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_hikouki);
            return;
        }

        private function _frameScript_playSE_card():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_card);
            return;
        }

        private function _frameScript_playSE_don():void
        {
            common.util.SoundUtil.playSE(BattleAssets.SE_battle_don);
            return;
        }

        private function _frameScript_playVoice():void
        {
            dispatchEvent(new battle.events.ShipVoiceEvent());
            return;
        }

        private function _handlePlaneEnterframe(arg1:flash.events.Event):void
        {
            _plane.update();
            return;
        }

        public static const EVENT_ANIMATION_TIMING_1:String="CutinDaySuper::EVENT_ANIMATION_TIMING_1";

        public static const EVENT_ANIMATION_TIMING_2:String="CutinDaySuper::EVENT_ANIMATION_TIMING_2";

        public static const EVENT_ANIMATION_TIMING_3:String="CutinDaySuper::EVENT_ANIMATION_TIMING_3";

        protected var LABEL_KEY1:int=35;

        protected var LABEL_KEY2:int=84;

        protected var LABEL_KEY3:int=109;

        protected var _bgBlack:common.display.FadeLayer;

        protected var _bgBlue:common.display.FadeLayer;

        protected var _mc:res.battle.MCCutinDaySuperTSF;

        protected var _isFriend:Boolean;

        protected var _type:int=-1;

        protected var _charaID:int;

        protected var _slotitemID1:int;

        protected var _slotitemID2:int;

        protected var _slotitemID3:int;

        protected var _plane:battle.views.planes.Plane;
    }
}


//        class FunnelCutin
package battle.views.cutins
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.util.*;
    import battle.views.planes.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import manager.resource.*;
    import res.battle.kouku.funnel.*;

    public class FunnelCutin extends flash.display.Sprite
    {
        public function FunnelCutin()
        {
            super();
            return;
        }

        public function initialize_e(arg1:int, arg2:int, arg3:__AS3__.vec.Vector.<int>):void
        {
            _shipMstID_e = arg1;
            _ship_conditoin_e = arg2;
            _slotMstIDs_e = arg3;
            return;
        }

        public function getTweenInitialize():a24.tween.Tween24
        {
            _initView();
            var loc2:*=AppFacade.createShipAttacher();
            var loc1:*=AppFacade.createSlotitemAttacher();
            if (hasCutin_f)
            {
                _shipSprite_f = new flash.display.Sprite();
                _initializeShipResources(_shipMstID_f, _ship_conditoin_f, _shipSprite_f, loc2);
                _planeSprites_f = _initializePlaneResources(_slotMstIDs_f, loc1);
            }
            if (hasCutin_e)
            {
                _shipSprite_e = new flash.display.Sprite();
                _initializeShipResources(_shipMstID_e, _ship_conditoin_e, _shipSprite_e, loc2);
                _planeSprites_e = _initializePlaneResources(_slotMstIDs_e, loc1);
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc2.load)), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc1.load)));
        }

        public function getTween():a24.tween.Tween24
        {
            var loc1:*=enemyFirst ? _tweenEnemy : _tweenFriend;
            return a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(this, "complete"), a24.tween.Tween24.func(loc1));
        }

        public function finalize():void
        {
            removeChild(_bgLayer);
            removeChild(_mainLayer);
            removeChild(_fadeLayer);
            _slotMstIDs_f = null;
            _slotMstIDs_e = null;
            return;
        }

        private function _initView():void
        {
            _bgLayer = new BackgroundLayer();
            _mainLayer = new flash.display.Sprite();
            _fadeLayer = new SlideFadeLayer();
            addChild(_bgLayer);
            addChild(_mainLayer);
            addChild(_fadeLayer);
            return;
        }

        private function _tweenFriend():void
        {
            var loc2:*=null;
            var loc1:*=NaN;
            var loc3:*=NaN;
            var loc5:*=NaN;
            var loc4:*=null;
            if (hasCutin_f)
            {
                _mc_f = new res.battle.kouku.funnel.MCFunnelCutinF();
                loc2 = _initializeMainMovieClip(_mc_f);
                loc1 = common.util.MCUtil.getTimeToLabel(1, "play_se", loc2);
                loc3 = common.util.MCUtil.getTimeToLabel(1, "play_voice", loc2);
                loc5 = common.util.MCUtil.getTimeToLabel(1, "fade_start", loc2);
                if (isNaN(loc1) || isNaN(loc3) || isNaN(loc5))
                {
                    new Error();
                }
                _mc_f.ship.addChild(_shipSprite_f);
                loc4 = [];
                _addFrameTweenByPlanes(loc4, _mc_f, _planeSprites_f, loc2);
                a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_mainLayer, _mc_f), a24.tween.Tween24.func(addEventListener, "enterFrame", _handleEnterframe_f), a24.tween.Tween24.parallel(enemyFirst ? null : _bgLayer.getTweenShow(), enemyFirst ? _fadeLayer.getTweenOutToLeft() : null, common.util.MCUtil.frameTween(_mc_f, 1, _mc_f.totalFrames), a24.tween.Tween24.tween(_mc_f, common.util.MCUtil.getTime(1, _mc_f.totalFrames)).frame(_mc_f.totalFrames), a24.tween.Tween24.wait(0), a24.tween.Tween24.func(common.util.SoundUtil.playSE, SE_FUNNELCUTIN).delay(loc1), a24.tween.Tween24.func(common.util.SoundUtil.playVoiceAtRandom, _shipMstID_f, [15, 17], [50, 50]).delay(loc3), loc4, _fadeLayer.getTweenInFromRight().delay(loc5)), a24.tween.Tween24.func(removeEventListener, "enterFrame", _handleEnterframe_f), a24.tween.Tween24.removeChild(_mc_f), a24.tween.Tween24.wait(0.15)).onComplete(_tweenFriendEnd).play();
            }
            else
            {
                a24.tween.Tween24.parallel(_bgLayer.getTweenShow(), _fadeLayer.getTweenInFromRight()).onComplete(_tweenFriendEnd).play();
            }
            return;
        }

        private function _tweenFriendEnd():void
        {
            if (_mc_f != null)
            {
                _initializeMainMovieClip(_mc_f);
                _mc_f = null;
            }
            _shipSprite_f = null;
            _planeSprites_f = null;
            if (enemyFirst)
            {
                _tweenFinal();
            }
            else
            {
                _tweenEnemy();
            }
            return;
        }

        private function _tweenEnemy():void
        {
            var loc2:*=null;
            var loc1:*=NaN;
            var loc3:*=NaN;
            var loc5:*=NaN;
            var loc4:*=null;
            if (hasCutin_e)
            {
                _mc_e = new res.battle.kouku.funnel.MCFunnelCutinE();
                loc2 = _initializeMainMovieClip(_mc_e);
                loc1 = common.util.MCUtil.getTimeToLabel(1, "play_se", loc2);
                loc3 = common.util.MCUtil.getTimeToLabel(1, "play_voice", loc2);
                loc5 = common.util.MCUtil.getTimeToLabel(1, "fade_start", loc2);
                if (isNaN(loc1) || isNaN(loc3) || isNaN(loc5))
                {
                    new Error();
                }
                _mc_e.ship.addChild(_shipSprite_e);
                loc4 = [];
                _addFrameTweenByPlanes(loc4, _mc_e, _planeSprites_e, loc2);
                a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_mainLayer, _mc_e), a24.tween.Tween24.func(addEventListener, "enterFrame", _handleEnterframe_e), a24.tween.Tween24.parallel(enemyFirst ? _bgLayer.getTweenShow() : null, enemyFirst ? null : _fadeLayer.getTweenOutToLeft(), common.util.MCUtil.frameTween(_mc_e, 1, _mc_e.totalFrames), a24.tween.Tween24.tween(_mc_e, common.util.MCUtil.getTime(1, _mc_e.totalFrames)).frame(_mc_e.totalFrames), a24.tween.Tween24.func(common.util.SoundUtil.playSE, SE_FUNNELCUTIN).delay(loc1), loc4, _fadeLayer.getTweenInFromRight().delay(loc5)), a24.tween.Tween24.func(removeEventListener, "enterFrame", _handleEnterframe_e), a24.tween.Tween24.removeChild(_mc_e)).onComplete(_tweenEnemyEnd).play();
            }
            else
            {
                _tweenEnemyEnd();
            }
            return;
        }

        private function _tweenEnemyEnd():void
        {
            if (_mc_e != null)
            {
                _initializeMainMovieClip(_mc_e);
                _mc_e = null;
            }
            _shipSprite_e = null;
            _planeSprites_e = null;
            if (enemyFirst)
            {
                _tweenFriend();
            }
            else
            {
                _tweenFinal();
            }
            return;
        }

        private function _tweenFinal():void
        {
            a24.tween.Tween24.parallel(_bgLayer.getTweenHide(), _fadeLayer.getTweenOutToRight()).onComplete(dispatchEvent, new flash.events.Event("complete")).play();
            return;
        }

        private function _initializeMainMovieClip(arg1:flash.display.MovieClip):flash.utils.Dictionary
        {
            arg1.x = 800 / 2;
            arg1.y = 480 / 2;
            arg1.plane1.removeChildren();
            arg1.plane2.removeChildren();
            arg1.plane3.removeChildren();
            arg1.ship.removeChildren();
            return common.util.MCUtil.createLabelMap(arg1);
        }

        private function _initializeShipResources(arg1:int, arg2:int, arg3:flash.display.Sprite, arg4:manager.resource.IShipAttacher):void
        {
            var loc1:*=DataFacade.getStartData().getOffsetAtBattle(arg1, common.util.Util.isDamaged(arg2));
            arg3.x = loc1.x;
            arg3.y = loc1.y;
            arg4.stackFull(arg1, arg3, arg2);
            return;
        }

        private function _initializePlaneResources(arg1:__AS3__.vec.Vector.<int>, arg2:manager.resource.ISlotitemAttacher):__AS3__.vec.Vector.<battle.views.planes.Plane>
        {
            var loc2:*=undefined;
            var loc5:*=undefined;
            var loc4:*=0;
            var loc3:*=0;
            var loc1:*=null;
            if (arg1 != null)
            {
                loc2 = new __AS3__.vec.Vector.<battle.views.planes.Plane>();
                loc5 = getValidSlotMstIDs(arg1);
                loc4 = 0;
                while (loc4 < loc5.length)
                {
                    loc3 = loc5[loc4];
                    loc1 = new battle.views.planes.Plane(loc3, arg2);
                    if (loc3 == 138)
                    {
                        var loc6:*;
                        loc1.scaleY = loc6 = 1.4;
                        loc1.scaleX = loc6;
                    }
                    loc2.push(loc1);
                    ++loc4;
                }
            }
            return loc2;
        }

        private function _addFrameTweenByPlanes(arg1:Array, arg2:flash.display.MovieClip, arg3:__AS3__.vec.Vector.<battle.views.planes.Plane>, arg4:flash.utils.Dictionary):void
        {
            var loc1:*=null;
            var loc3:*=null;
            var loc2:*=null;
            if (arg3 != null)
            {
                if ((loc1 = _createFrameTweenByPlane(arg2.plane1, arg3, 0, arg4)) != null)
                {
                    arg1.push.apply(null, loc1);
                    if ((loc3 = _createFrameTweenByPlane(arg2.plane2, arg3, 1, arg4)) != null)
                    {
                        arg1.push.apply(null, loc3);
                        if ((loc2 = _createFrameTweenByPlane(arg2.plane3, arg3, 2, arg4)) != null)
                        {
                            arg1.push.apply(null, loc2);
                        }
                    }
                }
            }
            return;
        }

        private function _createFrameTweenByPlane(arg1:flash.display.MovieClip, arg2:__AS3__.vec.Vector.<battle.views.planes.Plane>, arg3:int, arg4:flash.utils.Dictionary):Array
        {
            var loc2:*=null;
            var loc1:*=null;
            var loc6:*=null;
            var loc8:*=NaN;
            var loc3:*=null;
            var loc7:*=null;
            var loc5:*=NaN;
            var loc4:*=null;
            if (arg2.length > arg3)
            {
                (loc1 = arg2[arg3]).init();
                arg1.addChild(loc1);
                loc6 = "play_se_plane" + (arg3 + 1);
                loc8 = common.util.MCUtil.getTimeToLabel(1, loc6, arg4);
                if (isNaN(loc8) == false)
                {
                    loc3 = a24.tween.Tween24.func(common.util.SoundUtil.playSE, SE_CUTINMOVE).delay(loc8);
                    (loc2 = loc2 != null ? loc2 : []).push(loc3);
                }
                loc7 = "play_se_flyplane" + (arg3 + 1);
                loc5 = common.util.MCUtil.getTimeToLabel(1, loc7, arg4);
                if (isNaN(loc5) == false)
                {
                    loc4 = a24.tween.Tween24.func(common.util.SoundUtil.playSE, SE_PLANE).delay(loc5);
                    (loc2 = loc2 != null ? loc2 : []).push(loc4);
                }
            }
            return loc2;
        }

        public function getValidSlotMstIDs(arg1:__AS3__.vec.Vector.<int>):__AS3__.vec.Vector.<int>
        {
            var loc3:*=0;
            var loc1:*=0;
            var loc2:*=new __AS3__.vec.Vector.<int>();
            if (arg1 == null)
            {
                return loc2;
            }
            loc3 = 0;
            while (loc3 < arg1.length)
            {
                loc1 = arg1[loc3];
                if (battle.util.SlotitemUtil.isValidPlaneItemIDWithFlyingBoat(loc1))
                {
                    loc2.push(loc1);
                }
                ++loc3;
            }
            return loc2;
        }

        public function get hasCutin_f():Boolean
        {
            return _shipMstID_f > 0;
        }

        public function get hasCutin_e():Boolean
        {
            return _shipMstID_e > 0;
        }

        private function _handleEnterframe_f(arg1:flash.events.Event):void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < _planeSprites_f.length)
            {
                _planeSprites_f[loc1].update();
                ++loc1;
            }
            return;
        }

        private function _handleEnterframe_e(arg1:flash.events.Event):void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < _planeSprites_e.length)
            {
                _planeSprites_e[loc1].update();
                ++loc1;
            }
            return;
        }

        public function initialize_f(arg1:int, arg2:int, arg3:__AS3__.vec.Vector.<int>):void
        {
            _shipMstID_f = arg1;
            _ship_conditoin_f = arg2;
            _slotMstIDs_f = arg3;
            return;
        }

        public const SE_FUNNELCUTIN:Class=BattleAssets.SE_battle_fannelCutIn;

        public const SE_PLANE:Class=BattleAssets.SE_battle_plane1;

        public const SE_CUTINMOVE:Class=BattleAssets.SE_battle_cutinMove;

        private var _bgLayer:BackgroundLayer;

        private var _mainLayer:flash.display.Sprite;

        private var _fadeLayer:SlideFadeLayer;

        private var _mc_f:res.battle.kouku.funnel.MCFunnelCutinF;

        private var _shipSprite_f:flash.display.Sprite;

        private var _planeSprites_f:__AS3__.vec.Vector.<battle.views.planes.Plane>;

        private var _mc_e:res.battle.kouku.funnel.MCFunnelCutinE;

        private var _shipSprite_e:flash.display.Sprite;

        private var _planeSprites_e:__AS3__.vec.Vector.<battle.views.planes.Plane>;

        private var _shipMstID_f:int=0;

        private var _ship_conditoin_f:int=100;

        private var _slotMstIDs_f:__AS3__.vec.Vector.<int>=null;

        private var _shipMstID_e:int=0;

        private var _ship_conditoin_e:int=100;

        private var _slotMstIDs_e:__AS3__.vec.Vector.<int>=null;

        public var enemyFirst:Boolean=false;
    }
}

import a24.tween.*;
import flash.display.*;
import res.battle.kouku.funnel.*;


class BackgroundLayer extends flash.display.Shape
{
    public function BackgroundLayer()
    {
        super();
        graphics.beginFill(0);
        graphics.drawRect(0, 0, 800, 480);
        graphics.endFill();
        alpha = 0;
        return;
    }

    public function getTweenShow(arg1:Number=0.5):a24.tween.Tween24
    {
        return a24.tween.Tween24.tween(this, arg1).alpha(0.8);
    }

    public function getTweenHide(arg1:Number=0.25):a24.tween.Tween24
    {
        return a24.tween.Tween24.tween(this, arg1).alpha(0);
    }
}

class SlideFadeLayer extends res.battle.kouku.funnel.MCBlackFade
{
    public function SlideFadeLayer()
    {
        super();
        x = 1550;
        y = 240;
        return;
    }

    public function getTweenInFromRight(arg1:Number=0.25):a24.tween.Tween24
    {
        return a24.tween.Tween24.tween(this, arg1).x(400);
    }

    public function getTweenOutToLeft(arg1:Number=0.25):a24.tween.Tween24
    {
        return a24.tween.Tween24.tween(this, arg1).x(-750);
    }

    public function getTweenOutToRight(arg1:Number=0.25):a24.tween.Tween24
    {
        return a24.tween.Tween24.tween(this, arg1).x(1550);
    }

    public const LEFT:int=-750;

    public const CENTER:int=400;

    public const RIGHT:int=1550;
}

//        class TaikuCutin
package battle.views.cutins
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import manager.resource.*;
    import res.battle.*;

    public class TaikuCutin extends flash.display.Sprite
    {
        public function TaikuCutin()
        {
            super();
            _mc = new res.battle.MCTaikuCutin();
            _mc.stop();
            addChild(_mc);
            _clouds = new __AS3__.vec.Vector.<Cloud>();
            return;
        }

        public function getTweenInitialize(arg1:int, arg2:int, arg3:__AS3__.vec.Vector.<int>):a24.tween.Tween24
        {
            var loc3:*=0;
            _charaID = arg1;
            var loc1:*;
            (loc1 = AppFacade.createShipAttacher()).stackFull(arg1, _mc.ship, arg2);
            var loc2:*=AppFacade.createSlotitemAttacher();
            var loc4:*=[_mc.slot3, _mc.slot2, _mc.slot1];
            loc3 = 0;
            while (loc3 < Math.min(arg3.length, 3))
            {
                loc2.stackBtxt(arg3[loc3], loc4[loc3]);
                ++loc3;
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc1.load)), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc2 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc2.load)), a24.tween.Tween24.func(_setOffsets, arg1, arg2));
        }

        public function getTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.func(addEventListener, "enterFrame", _handleEnterframe), a24.tween.Tween24.parallel(common.util.MCUtil.frameTween(_mc, 1, _mc.totalFrames), a24.tween.Tween24.func(_addCloud).delay(1 / 30), a24.tween.Tween24.func(_addCloud).delay(6 / 30), a24.tween.Tween24.func(_addCloud).delay(11 / 30), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_Bam).delay(24 / 30), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_Bam).delay(27 / 30), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_Bam).delay(30 / 30), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_Bam).delay(33 / 30), a24.tween.Tween24.func(common.util.SoundUtil.playVoiceAtRandom, _charaID, [15, 17], [50, 50]).delay(33 / 30), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_Bam).delay(36 / 30), a24.tween.Tween24.func(_bomb, 502, 395, -30).delay(39 / 30), a24.tween.Tween24.func(_bomb, 502, 325, -50).delay(42 / 30), a24.tween.Tween24.func(_bomb, 502, 255, -70).delay(45 / 30), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_shoot).delay(45 / 30), a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_bomb1).delay(48 / 30)), a24.tween.Tween24.func(_finalize));
        }

        private function _finalize():void
        {
            removeEventListener("enterFrame", _handleEnterframe);
            _clouds = null;
            _mc.cloud_layer.removeChildren();
            removeChildren();
            return;
        }

        private function _setOffsets(arg1:int, arg2:int):void
        {
            var loc3:*=null;
            var loc5:*=0;
            var loc1:*=null;
            var loc2:*=null;
            var loc4:*=DataFacade.getStartData().getOffsetAtBattle(arg1, common.util.Util.isDamaged(arg2));
            if (_mc.ship.numChildren > 0)
            {
                (loc3 = _mc.ship.getChildAt(0)).x = loc4.x;
                loc3.y = loc4.y;
            }
            var loc6:*=[_mc.slot1, _mc.slot2, _mc.slot3];
            loc5 = 0;
            while (loc5 < 3)
            {
                loc1 = loc6[loc5];
                if (loc1.numChildren > 0)
                {
                    loc2 = flash.display.MovieClip(loc6[loc5]).getChildAt(0);
                    loc2.x = -loc2.width;
                    loc2.y = (-loc2.height) / 2;
                }
                ++loc5;
            }
            return;
        }

        private function _addCloud():void
        {
            var loc1:*=new Cloud();
            _clouds.push(loc1);
            _mc.cloud_layer.addChild(loc1);
            return;
        }

        private function _bomb(arg1:int, arg2:int, arg3:Number):void
        {
            var loc1:*;
            (loc1 = new res.battle.MCTaikuCutinBomb()).stop();
            a24.tween.Tween24.serial(a24.tween.Tween24.prop(loc1).xy(arg1, arg2).rotation(arg3), a24.tween.Tween24.addChild(this, loc1), common.util.MCUtil.frameTween(loc1, 1, loc1.totalFrames), a24.tween.Tween24.removeChild(loc1)).play();
            return;
        }

        private function _handleEnterframe(arg1:flash.events.Event):void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < _clouds.length)
            {
                _clouds[loc1].update();
                ++loc1;
            }
            return;
        }

        private var _mc:res.battle.MCTaikuCutin;

        private var _clouds:__AS3__.vec.Vector.<Cloud>;

        private var _charaID:int;
    }
}

import flash.display.*;
import res.battle.*;


class Cloud extends flash.display.Sprite
{
    public function Cloud()
    {
        super();
        _mc = new res.battle.MCTaikuCutinCloud();
        addChild(_mc);
        _init();
        return;
    }

    public function update():void
    {
        _mc.rotation = _mc.rotation + _rotation;
        _mc.alpha = _mc.alpha + _alpha;
        if (_mc.alpha >= 1 - _alpha)
        {
            _alpha = -_alpha;
        }
        if (_mc.alpha <= _alpha)
        {
            _init();
        }
        return;
    }

    private function _init():void
    {
        _rotation = Math.random() - 0.5;
        _alpha = Math.random() * 0.02 + 0.04;
        _scaleX = Math.random() * 0.2 + 1;
        _scaleY = Math.random() * 0.2 + 1;
        _mc.x = Math.random() * (800 - 100) + 50;
        _mc.x = Math.random() * (480 - 100) + 50;
        _mc.alpha = 0.01;
        return;
    }

    private function _finalize():void
    {
        removeChildren();
        _mc = null;
        return;
    }

    private var _mc:res.battle.MCTaikuCutinCloud;

    private var _rotation:Number;

    private var _alpha:Number;

    private var _scaleX:Number;

    private var _scaleY:Number;
}

//      package effects
//        package banner
//          class Picket
package battle.views.effects.banner
{
    import a24.tween.*;
    import common.util.*;
    import res.battle.*;

    public class Picket extends res.battle.PicketMC
    {
        public function Picket()
        {
            super();
            stop();
            return;
        }

        public function getTween():a24.tween.Tween24
        {
            return common.util.MCUtil.frameTween(this, 1, totalFrames);
        }
    }
}


//        package bomb
//          class Explosion
package battle.views.effects.bomb
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import res.battle.movieclips.explosion.*;

    public class Explosion extends flash.display.Sprite
    {
        public function Explosion()
        {
            super();
            return;
        }

        public function createBombTween(arg1:int, arg2:String=null):a24.tween.Tween24
        {
            var loc1:*=null;
            var loc2:*=null;
        }

        public static const TYPE_SMALL:String="EXPLOSION_TYPE:SMALL";

        public static const TYPE_MIDDLE:String="EXPLOSION_TYPE:MIDLLE";

        public static const TYPE_LARGE:String="EXPLOSION_TYPE:LARGE";

        public static const TYPE_MIZUHASIRA:String="EXPLOSION_TYPE:MIZUHASIRA";

        public static const TYPE_MIZUHASIRA_BAKURAI:String="EXPLOSION_TYPE:MIZUHASIRA_BAKURAI";
    }
}


//          class Explosions
package battle.views.effects.bomb
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import res.battle.mc.explosion.*;

    public class Explosions extends flash.display.Sprite
    {
        public function Explosions()
        {
            super();
            return;
        }

        public function addBomb_f(arg1:Number=1):void
        {
            if (_bombs_f)
            {
                return;
            }
            _bombs_f = new res.battle.mc.explosion.ExplosionKoukuu();
            var loc1:*;
            _bombs_f.scaleY = loc1 = arg1;
            _bombs_f.scaleX = loc1;
            _bombs_f.stop();
            _bombs_f.x = 88;
            _bombs_f.y = 204;
            return;
        }

        public function addBomb_f_Combined(arg1:Number=1):void
        {
            if (_bombs_f_Combined)
            {
                return;
            }
            _bombs_f_Combined = new res.battle.mc.explosion.ExplosionKoukuu();
            var loc1:*;
            _bombs_f_Combined.scaleY = loc1 = arg1;
            _bombs_f_Combined.scaleX = loc1;
            _bombs_f_Combined.stop();
            _bombs_f_Combined.x = 258;
            _bombs_f_Combined.y = 204;
            return;
        }

        public function addBomb_e(arg1:Number=1):void
        {
            if (_bombs_e)
            {
                return;
            }
            _bombs_e = new res.battle.mc.explosion.ExplosionKoukuu();
            var loc1:*;
            _bombs_e.scaleY = loc1 = arg1;
            _bombs_e.scaleX = loc1;
            _bombs_e.stop();
            _bombs_e.x = 720;
            _bombs_e.y = 278;
            return;
        }

        public function getTweenAnimation():a24.tween.Tween24
        {
            if (_bombs_f == null && _bombs_e == null && _bombs_f_Combined == null)
            {
                return a24.tween.Tween24.wait(0);
            }
            var loc1:*=[];
            if (_bombs_f)
            {
                loc1.push(a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, _bombs_f), common.util.MCUtil.frameTween(_bombs_f, 1, _bombs_f.totalFrames), a24.tween.Tween24.removeChild(_bombs_f)));
            }
            if (_bombs_f_Combined)
            {
                loc1.push(a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, _bombs_f_Combined), common.util.MCUtil.frameTween(_bombs_f_Combined, 1, _bombs_f_Combined.totalFrames), a24.tween.Tween24.removeChild(_bombs_f_Combined)));
            }
            if (_bombs_e)
            {
                loc1.push(a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, _bombs_e), common.util.MCUtil.frameTween(_bombs_e, 1, _bombs_e.totalFrames), a24.tween.Tween24.removeChild(_bombs_e)));
            }
            loc1.push(a24.tween.Tween24.func(common.util.SoundUtil.playSE, Assets.SE_battle_bomb3));
            return a24.tween.Tween24.parallel(loc1);
        }

        private var _bombs_f:res.battle.mc.explosion.ExplosionKoukuu=null;

        private var _bombs_f_Combined:res.battle.mc.explosion.ExplosionKoukuu=null;

        private var _bombs_e:res.battle.mc.explosion.ExplosionKoukuu=null;
    }
}


//        package flare
//          class FlareEffect
package battle.views.effects.flare
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import res.battle.*;

    public class FlareEffect extends flash.display.Sprite
    {
        public function FlareEffect(arg1:Boolean)
        {
            super();
            _mc = new res.battle.MCFlare();
            if (arg1)
            {
                _mc.x = 570;
                _mc.y = 170;
                _mc.scaleX = -1;
            }
            else
            {
                _mc.x = 230;
                _mc.y = 100;
            }
            _flare1 = new FlareLight(_mc.flare1);
            _flare2 = new FlareLight(_mc.flare2);
            return;
        }

        public function getTween():a24.tween.Tween24
        {
            _mc.gotoAndStop(1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, _mc), a24.tween.Tween24.func(addEventListener, "enterFrame", _handleEnterFrame), common.util.MCUtil.frameTween(_mc, 1, _mc.totalFrames), a24.tween.Tween24.func(removeEventListener, "enterFrame", _handleEnterFrame), a24.tween.Tween24.func(addEventListener, "enterFrame", _handleEnterFrame2), a24.tween.Tween24.tween(_mc.smoke_layer, 1.35).alpha(0), a24.tween.Tween24.func(removeEventListener, "enterFrame", _handleEnterFrame2), a24.tween.Tween24.removeAllChildren(_mc.smoke_layer), a24.tween.Tween24.removeChild(_mc), a24.tween.Tween24.removeChild(this));
        }

        private function _handleEnterFrame(arg1:flash.events.Event):void
        {
            var loc1:*=null;
            _handleEnterFrame2();
            if (_mc.currentFrame >= 20 && _mc.currentFrame % 10 == 0)
            {
                loc1 = new FlareSmoke();
                loc1.x = _flare1.x;
                loc1.y = _flare1.y;
                _mc.smoke_layer.addChild(loc1);
                loc1 = new FlareSmoke();
                loc1.x = _flare2.x;
                loc1.y = _flare2.y;
                _mc.smoke_layer.addChild(loc1);
            }
            return;
        }

        private function _handleEnterFrame2(arg1:flash.events.Event=null):void
        {
            var loc2:*=0;
            var loc1:*=null;
            _flare1.update();
            _flare2.update();
            loc2 = _mc.smoke_layer.numChildren - 1;
            while (loc2 >= 0)
            {
                loc1 = _mc.smoke_layer.getChildAt(loc2) as FlareSmoke;
                loc1.update();
                --loc2;
            }
            return;
        }

        private var _phase:int=0;

        private var _mc:res.battle.MCFlare;

        private var _flare1:FlareLight;

        private var _flare2:FlareLight;
    }
}

import flash.display.*;
import res.battle.*;


class FlareLight extends Object
{
    public function FlareLight(arg1:flash.display.MovieClip)
    {
        amp = 12 + Math.random() * 3;
        period = 10 + Math.random() * 5;
        init = Math.random() * 7;
        super();
        _mc = arg1;
        _mc.gotoAndStop(1);
        return;
    }

    public function get x():Number
    {
        return _mc.x + _mc.flare.x;
    }

    public function get y():Number
    {
        return _mc.y + _mc.flare.y;
    }

    public function update():void
    {
        _mc.flare.x = amp * Math.sin(timer / 13 + init);
        ++timer;
        return;
    }

    private var _mc:flash.display.MovieClip;

    private var amp:Number;

    private var period:Number;

    private var init:Number;

    private var timer:int=0;
}

class FlareSmoke extends res.battle.MCFlareSmoke
{
    public function FlareSmoke()
    {
        super();
        gotoAndStop(Math.floor(Math.random() * 5) + 1);
        _alphaSpd = 0.002 + Math.random() * 0.004;
        _scaleSpd = 0.003 + Math.random() * 0.002;
        _rotationSpd = Math.random() * 11 - 5;
        scaleX = scaleY = 0.2 + Math.random() * 0.1;
        alpha = 0;
        return;
    }

    public function update():void
    {
        scaleX = scaleX + _scaleSpd;
        scaleY = scaleY + _scaleSpd;
        rotation = rotation + _rotationSpd;
    }

    private var _phase:int=0;

    private var _alphaSpd:Number;

    private var _scaleSpd:Number;

    private var _rotationSpd:Number;
}

//        package plane
//          class FlyPlane
package battle.views.effects.plane
{
    import a24.tween.*;
    import battle.views.effects.bomb.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import res.battle.plane.*;

    public class FlyPlane extends flash.display.Sprite
    {
        public function FlyPlane(arg1:Boolean)
        {
            super();
            var loc1:*=arg1 ? res.battle.plane.PlaneFMC : res.battle.plane.PlaneEMC;
            _mc = new loc1();
            addChild(_mc);
            _mc.plane.stop();
            _mc.attack_fire.stop();
            _mc.smoke.stop();
            _mc.smoke.visible = false;
            return;
        }

        public function get power():Number
        {
            return _power;
        }

        public function attack():void
        {
            if (_mc == null)
            {
                return;
            }
            var loc1:*=Math.ceil(Math.random() * 5) + 1;
            a24.tween.Tween24.serial(a24.tween.Tween24.gotoAndStop(loc1, _mc.attack_fire), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_shoot), common.util.MCUtil.frameTween(_mc.attack_fire, loc1, _mc.attack_fire.totalFrames), a24.tween.Tween24.gotoAndStop(1, _mc.attack_fire))).play();
            return;
        }

        public function damage():void
        {
            if (_mc == null)
            {
                return;
            }
            if (_mc.smoke.visible == true)
            {
                return;
            }
            var loc1:*=new battle.views.effects.bomb.Explosion();
            a24.tween.Tween24.parallel(a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, loc1), loc1.createBombTween(0, "EXPLOSION_TYPE:SMALL"), a24.tween.Tween24.removeChild(loc1), a24.tween.Tween24.parallel(getSmokeTween(), a24.tween.Tween24.func(addEventListener, "enterFrame", _handleEnterframe)))).play();
            return;
        }

        public function crash():void
        {
            if (_mc == null)
            {
                return;
            }
            var loc1:*=new battle.views.effects.bomb.Explosion();
            a24.tween.Tween24.parallel(a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, loc1), loc1.createBombTween(0, "EXPLOSION_TYPE:SMALL"), a24.tween.Tween24.removeChild(loc1)), a24.tween.Tween24.removeChild(_mc).delay(0.3)).play();
            return;
        }

        public function changeType(arg1:int):void
        {
            _mc.plane.gotoAndStop(arg1);
            return;
        }

        public function autoDamage(arg1:Number):Number
        {
            var loc2:*=_power;
            _power = _power - arg1;
            _power = Math.max(0, _power);
            if (_power != 0)
            {
                if (loc2 == 1 && _power < 1)
                {
                    damage();
                }
            }
            else
            {
                crash();
            }
            var loc1:*=arg1 - loc2;
            loc1 = Math.max(0, loc1);
            return loc1;
        }

        public function getGlobalPos():flash.geom.Point
        {
            var loc1:*=new flash.geom.Point(_mc.x, _mc.y);
            return _mc.parent.localToGlobal(loc1);
        }

        private function getSmokeTween():a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop(_mc.smoke).scale(0), a24.tween.Tween24.func(function ():void
            {
                _mc.smoke.play();
                _mc.smoke.visible = true;
                return;
            }), a24.tween.Tween24.tween(_mc.smoke, 1).scale(1))
        }

        private function _handleEnterframe(arg1:flash.events.Event):void
        {
            y = y + _dropSpeed;
            _dropSpeed = _dropSpeed * _dropSpeedAcceleration;
            _dropSpeed = Math.min(_dropSpeed, _dropSpeedMax);
            if (_mc == null || _mc.parent == null || getGlobalPos().y > 480)
            {
                removeEventListener("enterFrame", _handleEnterframe);
                if (!(_mc == null) && contains(_mc))
                {
                    removeChild(_mc);
                }
                _mc = null;
            }
            return;
        }

        private var _mc:flash.display.MovieClip;

        private var _power:Number=1;

        private var _dropSpeed:Number=1;

        private var _dropSpeedAcceleration:Number=1.1;

        private var _dropSpeedMax:Number=5;
    }
}


//          class FlyPlaneTrio
package battle.views.effects.plane
{
    import __AS3__.vec.*;
    import battle.util.*;
    import battle.vo.*;
    import common.debug.*;
    import flash.display.*;

    public class FlyPlaneTrio extends flash.display.Sprite
    {
        public function FlyPlaneTrio()
        {
            _planes = new __AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>();
            super();
            scaleX = scaleY = 0.75;
            _mc.gotoAndPlay(Math.ceil(Math.random() * 60));
            _mc.p1.removeChildren();
            _mc.p2.removeChildren();
            _mc.p3.removeChildren();
            addChild(_mc);
            return;
        }

        public function get planes():__AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>
        {
            return _planes;
        }

        public function get planeCount():uint
        {
            return _planes.length;
        }

        public function addPlane(arg1:int=1):battle.views.effects.plane.FlyPlane
        {
            var loc1:*=false;
            var loc2:*=null;
            if (planeCount < 3)
            {
                loc1 = this is battle.views.effects.plane.FlyPlaneTrioF;
                loc2 = new battle.views.effects.plane.FlyPlane(loc1);
                loc2.changeType(arg1);
                _planes.push(loc2);
            }
            return null;
        }

        public function setPlaneFromShipInfo(arg1:battle.vo.BattleShipData, arg2:battle.vo.BattleShipData):void
        {
            var loc2:*=null;
            var loc4:*=0;
            var loc3:*=0;
            var loc1:*=0;
            _planes = new __AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>();
            _mc.p1.removeChildren();
            _mc.p2.removeChildren();
            _mc.p3.removeChildren();
            if (arg2.isSubMarine())
            {
                loc2 = battle.util.SlotitemUtil.getPlaneItemIDListWithFlyingBoat(arg1);
            }
            else
            {
                loc2 = battle.util.SlotitemUtil.getPlaneItemIDList(arg1);
            }
            loc4 = 0;
            while (loc4 < Math.min(loc2.length, 3))
            {
                loc3 = loc2[loc4];
                if (this is battle.views.effects.plane.FlyPlaneTrioE)
                {
                    loc1 = battle.util.SlotitemUtil.getEnemyPlaneType(loc3, battle.vo.BattleShipData.isPractice);
                    addPlane(loc1);
                }
                else
                {
                    loc1 = battle.util.SlotitemUtil.getFriendPlaneType(loc3);
                }
                addPlane(loc1);
                ++loc4;
            }
            common.debug.Debug.log(arg1.getName() + "(" + arg1.index + ")" + " 航空機" + _planes.length + "機発艦");
            return;
        }

        public function attack():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < _planes.length)
            {
                _planes[loc1].attack();
                ++loc1;
            }
            return;
        }

        protected var _mc:flash.display.MovieClip;

        protected var _planes:__AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>;
    }
}


//          class FlyPlaneTrioE
package battle.views.effects.plane
{
    import res.battle.plane.*;

    public class FlyPlaneTrioE extends battle.views.effects.plane.FlyPlaneTrio
    {
        public function FlyPlaneTrioE()
        {
            _mc = new res.battle.plane.PlaneETrioMC();
            super();
            return;
        }
    }
}


//          class FlyPlaneTrioF
package battle.views.effects.plane
{
    import res.battle.plane.*;

    public class FlyPlaneTrioF extends battle.views.effects.plane.FlyPlaneTrio
    {
        public function FlyPlaneTrioF()
        {
            _mc = new res.battle.plane.PlaneFTrioMC();
            super();
            return;
        }
    }
}


//          class SupportPlaneCanvas
package battle.views.effects.plane
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.attack.*;
    import common.debug.*;
    import common.util.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import vo.*;

    public class SupportPlaneCanvas extends flash.display.Sprite
    {
        public function SupportPlaneCanvas()
        {
            _position_f = new flash.display.Sprite();
            _position_e = new flash.display.Sprite();
            _planes_f = new __AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>();
            _planes_e = new __AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>();
            super();
            addChild(_position_f);
            addChild(_position_e);
            return;
        }

        public function getTween(arg1:battle.models.attack.ShienData):a24.tween.Tween24
        {
            _shienData = arg1;
            var loc2:*=_shienData.getSupportDeckID();
            var loc3:*;
            var loc1:*=(loc3 = DataFacade.getUserDeckData()).getShipTypeCountInDeck(loc2, 7);
            loc1 = loc1 + loc3.getShipTypeCountInDeck(loc2, 11);
            loc1 = loc1 + loc3.getShipTypeCountInDeck(loc2, 16);
            loc1 = loc1 + loc3.getShipTypeCountInDeck(loc2, 17);
            loc1 = loc1 + loc3.getShipTypeCountInDeck(loc2, 18);
            _createPlanes_f(loc1);
            _createPlanes_e(arg1.getPlaneFrom_e());
            if (_planes_f.length == 0 || _planes_e.length == 0)
            {
                _flg_attack_sky = true;
            }
            return a24.tween.Tween24.serial(a24.tween.Tween24.prop(_position_f).xy(_points_f[0].x, _points_f[0].y), a24.tween.Tween24.prop(_position_e).xy(_points_e[0].x, _points_e[0].y), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_plane1), a24.tween.Tween24.tween(_position_f, 2).bezier(_points_f[1].x, _points_f[1].y).xy(_points_f[2].x, _points_f[2].y).onUpdate(_handleUpdateInTween), a24.tween.Tween24.tween(_position_e, 2).bezier(_points_e[1].x, _points_e[1].y).xy(_points_e[2].x, _points_e[2].y)));
        }

        private function setDamage_f(arg1:int, arg2:int):void
        {
            _setDamage(arg1, arg2, _planes_f);
            return;
        }

        private function setDamage_e(arg1:int, arg2:int):void
        {
            _setDamage(arg1, arg2, _planes_e);
            return;
        }

        public function getRandomPlane_f():battle.views.effects.plane.FlyPlane
        {
            return _getRandomPlane(_planes_f);
        }

        public function getRandomPlane_e():battle.views.effects.plane.FlyPlane
        {
            return _getRandomPlane(_planes_e);
        }

        private function _setDamage(arg1:int, arg2:int, arg3:*):void
        {
            var loc1:*=NaN;
            var loc2:*=NaN;
            var loc6:*=0;
            var loc5:*=NaN;
            var loc4:*=NaN;
            var loc3:*=null;
            if (arg1 > 0)
            {
                loc1 = arg2 / arg1;
                common.debug.Debug.log("航空機数:" + arg1 + " ロスト:" + arg2 + " ロスト率:" + Math.floor(loc1 * 100) + "%");
                loc2 = 0;
                loc6 = 0;
                while (loc6 < arg3.length)
                {
                    loc2 = loc2 + arg3[loc6].power;
                    ++loc6;
                }
                loc5 = loc2 * loc1;
                common.debug.Debug.log("直前の航空力:" + Math.floor(loc2 * 100) / 100 + " 現在の航空力に対するロスト:" + Math.floor(loc5 * 100) / 100);
                loc4 = 0;
                loc6 = 0;
                while (loc6 < arg3.length)
                {
                    loc5 = (loc3 = arg3[loc6]).autoDamage(loc5);
                    loc4 = loc4 + loc3.power;
                    ++loc6;
                }
                common.debug.Debug.log("現在航空力:" + Math.floor(loc4 * 100) / 100);
            }
            return;
        }

        private function _createPlanes_f(arg1:int):void
        {
            var loc2:*=0;
            arg1 = Math.min(6, arg1);
            var loc1:*=new battle.views.effects.plane.FlyPlaneTrioF();
            loc1.x = -50;
            loc1.y = -20;
            loc2 = 0;
            while (loc2 < Math.min(arg1, 3))
            {
                _planes_f.push(loc1.addPlane());
                ++loc2;
            }
            _position_f.addChild(loc1);
            arg1 = arg1 - 3;
            loc1 = new battle.views.effects.plane.FlyPlaneTrioF();
            loc1.x = 30;
            loc1.y = 0;
            loc2 = 0;
            while (loc2 < arg1)
            {
                _planes_f.push(loc1.addPlane());
                ++loc2;
            }
            _position_f.addChild(loc1);
            return;
        }

        private function _createPlanes_e(arg1:Array):void
        {
            var loc3:*=0;
            var loc1:*=0;
            var loc2:*=[0, 0, 0, 0];
            loc3 = 0;
            while (loc3 < arg1.length)
            {
                loc1 = Math.floor((arg1[loc3] - 1) / 3);
                var loc4:*;
                var loc5:*;
                var loc6:*=((loc4 = loc2)[loc5 = loc1] + 1);
                loc4[loc5] = loc6;
                ++loc3;
            }
            __createPlanes_e(loc2[0], 50, -20);
            __createPlanes_e(loc2[1], -30, 0);
            __createPlanes_e(loc2[2], 50, 50);
            __createPlanes_e(loc2[3], -30, 70);
            return;
        }

        private function __createPlanes_e(arg1:int, arg2:Number, arg3:Number):void
        {
            var loc2:*=0;
            arg1 = Math.min(3, arg1);
            if (arg1 <= 0)
            {
                return;
            }
            var loc1:*;
            (loc1 = new battle.views.effects.plane.FlyPlaneTrioE()).x = arg2;
            loc1.y = arg3;
            loc2 = 0;
            while (loc2 < arg1)
            {
                _planes_e.push(loc1.addPlane(2));
                ++loc2;
            }
            _position_e.addChild(loc1);
            return;
        }

        private function _getRandomPlane(arg1:__AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>):battle.views.effects.plane.FlyPlane
        {
            var loc4:*=0;
            var loc2:*=null;
            var loc3:*=[];
            var loc1:*=[];
            loc4 = 0;
            while (loc4 < arg1.length)
            {
                loc2 = arg1[loc4];
                if (loc2.power != 1)
                {
                    if (loc2.power > 0)
                    {
                        loc1.push(loc2);
                    }
                }
                else
                {
                    loc3.push(loc2);
                }
                ++loc4;
            }
            if (loc3.length)
            {
                return loc3[Math.floor(Math.random() * loc3.length)];
            }
            if (loc1.length)
            {
                return loc1[Math.floor(Math.random() * loc1.length)];
            }
            return null;
        }

        private function _handleUpdateInTween():void
        {
            if (_flg_attack_sky == false && Math.abs(_position_f.x - _position_e.x) < 300)
            {
                _flg_attack_sky = true;
                _attackSky();
            }
            if (_flg_attack_antiaircraft_e == false && _position_f.x > 500)
            {
                _flg_attack_antiaircraft_e = true;
                _attackAntiAirCraft_e();
            }
            if (_flg_attack_antiaircraft_f == false && _position_e.x < 300)
            {
                _flg_attack_antiaircraft_f = true;
                _attackAntiAirCraft_f();
            }
            if (_flg_bakugeki_f == false && _position_f.x > 600)
            {
                _flg_bakugeki_f = true;
                dispatchEvent(new flash.events.Event("FlyPlane::EVENT_BOMBS_F"));
            }
            if (_flg_bakugeki_e == false && _position_e.x < 200)
            {
                _flg_bakugeki_e = true;
                dispatchEvent(new flash.events.Event("FlyPlane::EVENT_BOMBS_E"));
            }
            if (_flg_shoot_torpedo_f == false && _position_f.x > 400)
            {
                _flg_shoot_torpedo_f = true;
                dispatchEvent(new flash.events.Event("FlyPlane::EVENT_TORPEDO_F"));
            }
            if (_flg_shoot_torpedo_e == false && _position_e.x < 400)
            {
                _flg_shoot_torpedo_e = true;
                dispatchEvent(new flash.events.Event("FlyPlane::EVENT_TORPEDO_E"));
            }
            return;
        }

        private function _attackSky():void
        {
            var loc5:*=0;
            var loc6:*=[];
            loc5 = 0;
            while (loc5 < _planes_f.length)
            {
                loc6.push(a24.tween.Tween24.func(_planes_f[loc5].attack).delay(Math.random() * 0.3));
                ++loc5;
            }
            loc5 = 0;
            while (loc5 < _planes_e.length)
            {
                loc6.push(a24.tween.Tween24.func(_planes_e[loc5].attack).delay(Math.random() * 0.3));
                ++loc5;
            }
            var loc2:*=_shienData.getPlaneCountAtStage1_f();
            var loc3:*=_shienData.getPlaneLostCountAtStage1_f();
            var loc1:*=_shienData.getPlaneCountAtStage1_e();
            var loc4:*=_shienData.getPlaneLostCountAtStage1_e();
            a24.tween.Tween24.serial(a24.tween.Tween24.parallel(loc6), a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.debug.Debug.log, "航空迎撃被弾 - 味方"), a24.tween.Tween24.func(setDamage_f, loc2, loc3), a24.tween.Tween24.func(common.debug.Debug.log, "航空迎撃被弾 - 敵"), a24.tween.Tween24.func(setDamage_e, loc1, loc4))).play();
            return;
        }

        private function _attackAntiAirCraft_f():void
        {
            var loc2:*=_shienData.getPlaneCountAtStage2_e();
            var loc1:*=_shienData.getPlaneLostCountAtStage2_e();
            a24.tween.Tween24.serial(a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("FlyPlane::EVENT_ANTIAIRCRAFT_F")), a24.tween.Tween24.func(common.debug.Debug.log, "対空放火被弾 - 敵"), a24.tween.Tween24.func(setDamage_e, loc2, loc1)).play();
            return;
        }

        private function _attackAntiAirCraft_e():void
        {
            var loc2:*=_shienData.getPlaneCountAtStage2_f();
            var loc1:*=_shienData.getPlaneLostCountAtStage2_f();
            a24.tween.Tween24.serial(a24.tween.Tween24.func(dispatchEvent, new flash.events.Event("FlyPlane::EVENT_ANTIAIRCRAFT_E")), a24.tween.Tween24.func(common.debug.Debug.log, "対空放火被弾 - 味方"), a24.tween.Tween24.func(setDamage_f, loc2, loc1)).play();
            return;
        }

        public function getPlaneCount_f():int
        {
            return _planes_f.length;
        }

        public function getPlaneCount_e():int
        {
            return _planes_e.length;
        }

        private const _points_f:__AS3__.vec.Vector.<flash.geom.Point>=__AS3__.vec.Vector.<flash.geom.Point>([new flash.geom.Point(-50, 0), new flash.geom.Point(300, 380), new flash.geom.Point(850, 280)]);

        private const _points_e:__AS3__.vec.Vector.<flash.geom.Point>=__AS3__.vec.Vector.<flash.geom.Point>([new flash.geom.Point(850, 100), new flash.geom.Point(400, 380), new flash.geom.Point(-50, 230)]);

        public static const EVENT_ANTIAIRCRAFT_F:String="FlyPlane::EVENT_ANTIAIRCRAFT_F";

        public static const EVENT_ANTIAIRCRAFT_E:String="FlyPlane::EVENT_ANTIAIRCRAFT_E";

        public static const EVENT_TORPEDO_F:String="FlyPlane::EVENT_TORPEDO_F";

        public static const EVENT_TORPEDO_E:String="FlyPlane::EVENT_TORPEDO_E";

        public static const EVENT_BOMBS_F:String="FlyPlane::EVENT_BOMBS_F";

        public static const EVENT_BOMBS_E:String="FlyPlane::EVENT_BOMBS_E";

        private var _shienData:battle.models.attack.ShienData;

        private var _position_f:flash.display.Sprite;

        private var _position_e:flash.display.Sprite;

        private var _planes_f:__AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>;

        private var _planes_e:__AS3__.vec.Vector.<battle.views.effects.plane.FlyPlane>;

        private var _flg_attack_sky:Boolean=false;

        private var _flg_attack_antiaircraft_f:Boolean=false;

        private var _flg_attack_antiaircraft_e:Boolean=false;

        private var _flg_bakugeki_f:Boolean=false;

        private var _flg_bakugeki_e:Boolean=false;

        private var _flg_shoot_torpedo_f:Boolean=false;

        private var _flg_shoot_torpedo_e:Boolean=false;
    }
}


//          class TouchPlane
package battle.views.effects.plane
{
    import a24.tween.*;
    import battle.views.planes.*;
    import common.util.*;
    import flash.events.*;
    import manager.resource.*;
    import res.battle.*;

    public class TouchPlane extends res.battle.MCTouchPlane
    {
        public function TouchPlane(arg1:int, arg2:Boolean, arg3:Boolean)
        {
            super();
            _planeID = arg1;
            _isFriend = arg2;
            _isDay = arg3;
            if (_isFriend == false)
            {
                plane.scaleX = -1 * plane.scaleX;
                plane.x = plane.x + plane.width;
            }
            return;
        }

        public function getTweenInitialize():a24.tween.Tween24
        {
            plane.canvas.removeChildren();
            plane.gotoAndStop(1);
            txt_img.gotoAndStop(_isDay ? 1 : 2);
            var loc1:*=AppFacade.createSlotitemAttacher();
            _plane = new battle.views.planes.Plane(_planeID, loc1);
            return a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1 as flash.events.IEventDispatcher, "complete"), a24.tween.Tween24.func(loc1.load));
        }

        public function animationStart():void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.func(_plane.init), a24.tween.Tween24.addChild(plane.canvas, _plane), a24.tween.Tween24.func(_plane.addEventListener, "enterFrame", _handleEnterFrame), common.util.MCUtil.frameTween(plane, 1, plane.totalFrames)).play();
            return;
        }

        public function animationEnd():void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.tween(this, 0.2).alpha(0), a24.tween.Tween24.func(function ():void
            {
                if (_plane)
                {
                    _plane.removeEventListener("enterFrame", _handleEnterFrame);
                }
                return;
            }), a24.tween.Tween24.removeChild(this)).play()
            return;
        }

        private function _handleEnterFrame(arg1:flash.events.Event):void
        {
            _plane.update2();
            return;
        }

        private var _planeID:int;

        private var _plane:battle.views.planes.Plane;

        private var _isFriend:Boolean;

        private var _isDay:Boolean;
    }
}


//        package torpedo
//          class AerialTorpedo
package battle.views.effects.torpedo
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import flash.geom.*;
    import res.battle.mc.*;

    public class AerialTorpedo extends flash.display.Sprite
    {
        public function AerialTorpedo(arg1:flash.geom.Point)
        {
            super();
            _mc = new res.battle.mc.AerialTorpedoMC();
            addChild(_mc);
            _mc.stop();
            _targetPos = arg1;
            return;
        }

        public function getTweenAnimation():a24.tween.Tween24
        {
            var diffX:Number;
            var diffY:Number;
            var toR:Number;

            var loc1:*;
            diffX = _targetPos.x - x;
            diffY = _targetPos.y - y;
            toR = Math.atan2(diffY, diffX) / 3.14159265359 * 180;
            if (diffX < 0)
            {
                scaleX = -1;
            }
            return a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, 1, 30), a24.tween.Tween24.prop(this).scaleX(1), a24.tween.Tween24.func(function ():void
            {
                rotation = toR;
                return;
            }), a24.tween.Tween24.parallel(common.util.MCUtil.frameTween(_mc, 30, _mc.totalFrames - 1), a24.tween.Tween24.tween(this, 0.8).xy(_targetPos.x, _targetPos.y)))
        }

        private var _mc:res.battle.mc.AerialTorpedoMC;

        private var _targetPos:flash.geom.Point;
    }
}


//          class AerialTorpedoCanvas
package battle.views.effects.torpedo
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.vo.*;
    import flash.display.*;
    import flash.geom.*;

    public class AerialTorpedoCanvas extends flash.display.Sprite
    {
        public function AerialTorpedoCanvas()
        {
            super();
            _torpedos = new __AS3__.vec.Vector.<battle.views.effects.torpedo.AerialTorpedo>();
            return;
        }

        public function reserveTorpedoToShip(arg1:flash.geom.Point, arg2:battle.vo.BattleShipData):void
        {
            if (arg2 == null)
            {
                return;
            }
            var loc1:*=arg2.banner.getGlobalPos(true);
            if (arg2 is battle.vo.FriendShipData)
            {
                loc1.x = loc1.x + 160 / 4;
            }
            else
            {
                loc1.x = loc1.x - 160 / 4;
            }
            reserveTorpedo(arg1, loc1);
            return;
        }

        public function reserveTorpedo(arg1:flash.geom.Point, arg2:flash.geom.Point):void
        {
            var loc1:*=new battle.views.effects.torpedo.AerialTorpedo(arg2);
            loc1.x = arg1.x;
            loc1.y = arg1.y;
            addChild(loc1);
            _torpedos.push(loc1);
            return;
        }

        public function getTween():a24.tween.Tween24
        {
            var loc2:*=0;
            var loc1:*=[];
            loc2 = 0;
            while (loc2 < _torpedos.length)
            {
                loc1.push(_torpedos[loc2].getTweenAnimation());
                ++loc2;
            }
            return a24.tween.Tween24.parallel(loc1);
        }

        private var _torpedos:__AS3__.vec.Vector.<battle.views.effects.torpedo.AerialTorpedo>;
    }
}


//          class AerialTorpedoSuper
package battle.views.effects.torpedo
{
    import a24.tween.*;
    import common.util.*;
    import flash.display.*;
    import flash.geom.*;
    import res.battle.mc.*;

    public class AerialTorpedoSuper extends flash.display.Sprite
    {
        public function AerialTorpedoSuper(arg1:flash.geom.Point)
        {
            super();
            _mc = new res.battle.mc.AerialTorpedoSuperMC();
            addChild(_mc);
            _mc.stop();
            _targetPos = arg1;
            return;
        }

        public function getTweenAnimation():a24.tween.Tween24
        {
            var diffX:Number;
            var diffY:Number;
            var toR:Number;

            var loc1:*;
            diffX = _targetPos.x - x;
            diffY = _targetPos.y - y;
            toR = Math.atan2(diffY, diffX) / 3.14159265359 * 180;
            return a24.tween.Tween24.serial(common.util.MCUtil.frameTween(_mc, 1, _mc.totalFrames - 1), a24.tween.Tween24.func(function ():void
            {
                rotation = toR;
                return;
            }), a24.tween.Tween24.gotoAndStop(_mc.totalFrames, _mc), a24.tween.Tween24.tween(this, 0.75).xy(_targetPos.x, _targetPos.y))
        }

        private var _mc:res.battle.mc.AerialTorpedoSuperMC;

        private var _targetPos:flash.geom.Point;
    }
}


//          class AerialTorpedoSuperCanvas
package battle.views.effects.torpedo
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.vo.*;
    import flash.display.*;
    import flash.geom.*;

    public class AerialTorpedoSuperCanvas extends flash.display.Sprite
    {
        public function AerialTorpedoSuperCanvas()
        {
            super();
            _torpedos = new __AS3__.vec.Vector.<battle.views.effects.torpedo.AerialTorpedoSuper>();
            return;
        }

        public function reserveTorpedoToShip(arg1:flash.geom.Point, arg2:battle.vo.BattleShipData):void
        {
            if (arg2 == null)
            {
                return;
            }
            var loc1:*=arg2.banner.getGlobalPos();
            if (arg2 is battle.vo.FriendShipData)
            {
                loc1.x = loc1.x + 160;
            }
            else
            {
                loc1.x = loc1.x + 0;
            }
            loc1.y = loc1.y + 40 / 2;
            reserveTorpedo(arg1, loc1);
            return;
        }

        public function reserveTorpedo(arg1:flash.geom.Point, arg2:flash.geom.Point):void
        {
            var loc1:*=new battle.views.effects.torpedo.AerialTorpedoSuper(arg2);
            loc1.x = arg1.x;
            loc1.y = arg1.y;
            addChild(loc1);
            _torpedos.push(loc1);
            return;
        }

        public function getTween():a24.tween.Tween24
        {
            var loc2:*=0;
            var loc1:*=[];
            loc2 = 0;
            while (loc2 < _torpedos.length)
            {
                loc1.push(_torpedos[loc2].getTweenAnimation());
                ++loc2;
            }
            return a24.tween.Tween24.parallel(loc1);
        }

        private var _torpedos:__AS3__.vec.Vector.<battle.views.effects.torpedo.AerialTorpedoSuper>;
    }
}


//          class TorpedoCanvas
package battle.views.effects.torpedo
{
    import a24.tween.*;
    import battle.vo.*;
    import common.util.*;
    import flash.display.*;
    import flash.geom.*;
    import res.battle.*;

    public class TorpedoCanvas extends flash.display.Sprite
    {
        public function TorpedoCanvas(arg1:int)
        {
            var loc1:*=NaN;
            var loc3:*=NaN;
            super();
            _gyoraiTweens = [];
            var loc2:*=new flash.display.Shape();
            loc2.graphics.beginFill(0);
        }

        public function get shootShipFirst_f():int
        {
            return _shootShip_firstIndex_f;
        }

        public function get shootShipFirst_e():int
        {
            return _shootShip_firstIndex_e;
        }

        public function reserveGyorai(arg1:battle.vo.BattleShipData, arg2:battle.vo.BattleShipData):void
        {
            _reserveGyorai(new res.battle.MCTorpedo(), arg1, arg2);
            return;
        }

        public function reserveGyorai2(arg1:battle.vo.BattleShipData, arg2:battle.vo.BattleShipData):void
        {
            _reserveGyorai(new res.battle.MCTorpedo2(), arg1, arg2, 0.8);
            return;
        }

        public function getTween():a24.tween.Tween24
        {
            if (_gyoraiTweens.length == 0)
            {
                return a24.tween.Tween24.wait(0);
            }
            var loc1:*=a24.tween.Tween24.parallel(a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_gyorai), _gyoraiTweens);
            _gyoraiTweens = [];
            return loc1;
        }

        private function _reserveGyorai(arg1:flash.display.MovieClip, arg2:battle.vo.BattleShipData, arg3:battle.vo.BattleShipData, arg4:Number=1.8):void
        {
            var loc3:*=arg2.banner.getGlobalPos(true);
            var loc1:*=arg3.banner.getGlobalPos(true);
            if (arg2 is battle.vo.EnemyShipData)
            {
                if (_shootShip_firstIndex_e < 0)
                {
                    _shootShip_firstIndex_e = arg2.index;
                }
                else
                {
                    _shootShip_firstIndex_e = Math.min(arg2.index, _shootShip_firstIndex_e);
                }
                loc3.x = loc3.x - 160 / 3;
                loc1.x = loc1.x + 160 / 3;
            }
            else
            {
                if (_shootShip_firstIndex_f < 0)
                {
                    _shootShip_firstIndex_f = arg2.index;
                }
                else
                {
                    _shootShip_firstIndex_f = Math.min(arg2.index, _shootShip_firstIndex_f);
                }
                loc3.x = loc3.x + 160 / 3;
                loc1.x = loc1.x - 160 / 3;
            }
            arg1.x = loc3.x;
            arg1.y = loc3.y;
            var loc2:*=(loc2 = Math.atan2(arg1.y - loc1.y, arg1.x - loc1.x)) * 180 / 3.14159265359;
            arg1.rotation = loc2;
            _gyoraiTweens.push(a24.tween.Tween24.serial(a24.tween.Tween24.prop(arg1).alpha(0), a24.tween.Tween24.addChild(this, arg1), a24.tween.Tween24.parallel(a24.tween.Tween24.tween(arg1, 0.2).alpha(1), a24.tween.Tween24.tween(arg1, arg4).xy(loc1.x, loc1.y), a24.tween.Tween24.tween(arg1, 0.2).alpha(0).delay(arg4 - 0.2)), a24.tween.Tween24.removeChild(arg1)));
            return;
        }

        public static const MASK_TYPE_1:int=0;

        public static const MASK_TYPE_2:int=1;

        private var _gyoraiTweens:Array;

        private var _shootShip_firstIndex_f:int=-1;

        private var _shootShip_firstIndex_e:int=-1;
    }
}


//      package layers
//        class BombLayer
package battle.views.layers
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.views.effects.bomb.*;
    import battle.vo.*;
    import flash.display.*;
    import flash.geom.*;

    public class BombLayer extends flash.display.Sprite
    {
        public function BombLayer()
        {
            super();
            return;
        }

        public function getTweenBomb(arg1:battle.vo.BattleShipData, arg2:Number, arg3:String=null, arg4:flash.geom.Point=null):a24.tween.Tween24
        {
            arg4 = arg4 != null ? arg4 : new flash.geom.Point();
            var loc3:*=arg1.banner.getGlobalPos();
            var loc2:*;
            (loc2 = new battle.views.effects.bomb.Explosion()).x = loc3.x + 160 / 2 + arg4.x;
            loc2.y = loc3.y + 40 / 2 + arg4.y;
            if (arg3 != "EXPLOSION_TYPE:MIZUHASIRA")
            {
                if (arg3 == "EXPLOSION_TYPE:MIZUHASIRA_BAKURAI")
                {
                    if (arg1 is battle.vo.FriendShipData)
                    {
                        loc2.scaleX = -1;
                        loc2.x = loc2.x + 30;
                        loc2.y = loc2.y + 40 / 2;
                    }
                    else
                    {
                        loc2.x = loc2.x - 30;
                        loc2.y = loc2.y + 40 / 2;
                    }
                }
            }
            else if (arg1 is battle.vo.FriendShipData)
            {
                loc2.scaleX = -1;
                loc2.x = loc2.x + 110;
                loc2.y = loc2.y + 40 / 2;
            }
            else
            {
                loc2.x = loc2.x - 110;
                loc2.y = loc2.y + 40 / 2;
            }
            var loc1:*=a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, loc2), loc2.createBombTween(arg2, arg3), a24.tween.Tween24.removeChild(loc2));
            return a24.tween.Tween24.parallel(a24.tween.Tween24.func(loc1.play), a24.tween.Tween24.wait(0));
        }

        public function getTweenBombs(arg1:__AS3__.vec.Vector.<Boolean>, arg2:Number=1):a24.tween.Tween24
        {
            var loc1:*=null;
            var loc4:*=!(arg1 == null) && arg1.length > 0 && arg1[0];
            var loc2:*=!(arg1 == null) && arg1.length > 1 && arg1[1];
            var loc3:*=!(arg1 == null) && arg1.length > 2 && arg1[2];
            if (loc4 || loc2)
            {
                loc1 = new battle.views.effects.bomb.Explosions();
                if (loc4)
                {
                    loc1.addBomb_f(arg2);
                }
                if (loc2)
                {
                    loc1.addBomb_e(arg2);
                }
                if (loc3)
                {
                    loc1.addBomb_f_Combined(arg2);
                }
                return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, loc1), loc1.getTweenAnimation(), a24.tween.Tween24.removeChild(loc1));
            }
            return a24.tween.Tween24.wait(0);
        }
    }
}


//        class HPGaugeLayer
package battle.views.layers
{
    import battle.views.*;
    import flash.display.*;

    public class HPGaugeLayer extends flash.display.Sprite
    {
        public function HPGaugeLayer()
        {
            super();
            return;
        }

        public function get hpGauge():battle.views.HPGauge
        {
            return _hpGauge;
        }

        public function createHPGauge(arg1:int, arg2:Boolean=false):void
        {
            _hpGauge = new battle.views.HPGauge(arg1, arg2);
            _hpGauge.x = 800 - _hpGauge.width;
            addChild(_hpGauge);
            return;
        }

        public function finalize():void
        {
            removeChild(_hpGauge);
            _hpGauge = null;
            return;
        }

        private var _hpGauge:battle.views.HPGauge=null;
    }
}


//        class InfoLayer
package battle.views.layers
{
    import a24.tween.*;
    import battle.display.common.*;
    import common.util.*;
    import flash.display.*;

    public class InfoLayer extends flash.display.Sprite
    {
        public function InfoLayer()
        {
            _content = new flash.display.Sprite();
            _info = new flash.display.Sprite();
            super();
            super.addChild(_content);
            super.addChild(_info);
            return;
        }

        public function finalize():void
        {
            _content.removeChildren();
            _info.removeChildren();
            removeChildren();
            _content = null;
            _info = null;
            return;
        }

        public function getTween(arg1:int):a24.tween.Tween24
        {
            var loc1:*=new battle.display.common.CenterLineInfo();
            loc1.createView(arg1);
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(_info, loc1), a24.tween.Tween24.parallel(a24.tween.Tween24.waitEvent(loc1, "CenterLineView::EVENT_ANIMATION_KEY2"), a24.tween.Tween24.func(loc1.play), a24.tween.Tween24.func(common.util.SoundUtil.playSE, BattleAssets.SE_battle_telop))).onComplete(_getTween, loc1);
        }

        private function _getTween(arg1:battle.display.common.CenterLineInfo):void
        {
            a24.tween.Tween24.serial(a24.tween.Tween24.waitEvent(arg1, "CenterLineView::EVENT_ANIMATION_END"), a24.tween.Tween24.removeChild(arg1)).play();
            return;
        }

        public override function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return _content.addChild(arg1);
        }

        private var _content:flash.display.Sprite;

        private var _info:flash.display.Sprite;
    }
}


//        class TorpedoLayer
package battle.views.layers
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.views.effects.torpedo.*;

    public class TorpedoLayer extends battle.views.layers.BombLayer
    {
        public function TorpedoLayer()
        {
            super();
            return;
        }

        public function getTweenAerialTorpedo(arg1:battle.views.effects.torpedo.AerialTorpedoCanvas):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, arg1), arg1.getTween(), a24.tween.Tween24.removeChild(arg1));
        }

        public function getTweenAerialTorpedoSuper(arg1:battle.views.effects.torpedo.AerialTorpedoSuperCanvas):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, arg1), arg1.getTween(), a24.tween.Tween24.removeChild(arg1));
        }

        public function getTweenRaigeki(arg1:battle.views.effects.torpedo.TorpedoCanvas):a24.tween.Tween24
        {
            return a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, arg1), arg1.getTween(), a24.tween.Tween24.removeChild(arg1));
        }

        public function getTweenWaterBomb(arg1:__AS3__.vec.Vector.<battle.vo.BattleShipData>):a24.tween.Tween24
        {
            var loc3:*=0;
            var loc1:*=null;
            var loc2:*=[];
            loc3 = 0;
            while (loc3 < arg1.length)
            {
                loc1 = getTweenBomb(arg1[loc3], 0, "EXPLOSION_TYPE:MIZUHASIRA");
                loc2.push(loc1);
                ++loc3;
            }
            return a24.tween.Tween24.parallel(loc2);
        }
    }
}


//      package planes
//        class Plane
package battle.views.planes
{
    import battle.util.*;
    import common.*;
    import flash.display.*;
    import manager.resource.*;
    import res.battle.kouku.funnel.*;

    public class Plane extends flash.display.Sprite
    {
        public function Plane(arg1:int, arg2:manager.resource.ISlotitemAttacher)
        {
            var loc2:*=0;
            var loc1:*=null;
            super();
            _planeItemID = arg1;
            if (common.Consts.isEnemyCharacter(arg1))
            {
                loc2 = battle.util.SlotitemUtil.getEnemyPlaneType(arg1, false);
                loc1 = new res.battle.kouku.funnel.MCEnemyPlaneType();
                loc1.gotoAndStop(loc2);
                addChild(loc1);
            }
            else
            {
                _planeSprite = new battle.views.planes.PlaneSprite();
                _planeSprite.reserve(arg2, arg1);
                addChild(_planeSprite);
            }
            _rSpd = 0.02 + Math.random() * 0.2;
            return;
        }

        public function init():void
        {
            if (_planeSprite == null)
            {
                return;
            }
            var loc1:*={};
            if (common.Consts.planeOffset.hasOwnProperty(_planeItemID))
            {
                loc1 = common.Consts.planeOffset[_planeItemID];
            }
            _planeSprite.moveOffset(loc1);
            return;
        }

        public function update():void
        {
            _r = _r + _rSpd;
            y = _initY + 20 * Math.sin(_r) + _d;
            _d = _d * -1;
            return;
        }

        public function update2():void
        {
            _r = _r + _rSpd;
            y = _initY + 10 * Math.sin(_r) + _d;
            _d = _d * -1;
            return;
        }

        private var _planeItemID:int;

        private var _planeSprite:battle.views.planes.PlaneSprite;

        private var _initY:Number=0;

        private var _r:Number=0;

        private var _rSpd:Number;

        private var _d:Number=-1.5;
    }
}


//        class PlaneSprite
package battle.views.planes
{
    import battle.util.*;
    import flash.display.*;
    import manager.resource.*;
    import res.battle.kouku.funnel.*;

    public class PlaneSprite extends flash.display.Sprite
    {
        public function PlaneSprite()
        {
            super();
            _canvas = new flash.display.Sprite();
            _img = new flash.display.Sprite();
            addChild(_canvas);
            return;
        }

        public function reserve(arg1:manager.resource.ISlotitemAttacher, arg2:int):void
        {
            var loc2:*=0;
            var loc1:*=null;
            if (arg2 >= 500)
            {
                loc2 = battle.util.SlotitemUtil.getEnemyPlaneType(arg2, false);
                loc1 = new res.battle.kouku.funnel.MCEnemyPlaneType();
                loc1.gotoAndStop(loc2);
                _img.addChild(loc1);
            }
            else
            {
                arg1.stackItemUp(arg2, _img);
            }
            return;
        }

        public function moveOffset(arg1:Object):void
        {
            if (_rootOffseted == false)
            {
                _setRootOffset();
            }
            var loc3:*=arg1.hasOwnProperty("sx") ? arg1.sx : 1;
            var loc1:*=arg1.hasOwnProperty("r") ? arg1.r : 0;
            var loc2:*=arg1.hasOwnProperty("x") ? arg1.x : 0;
            var loc4:*=arg1.hasOwnProperty("y") ? arg1.y : 0;
            _canvas.scaleX = loc3;
            _canvas.rotation = loc1;
            _canvas.x = _img.width / 2 + loc2;
            _canvas.y = _img.height / 2 + loc4;
            return;
        }

        public function drawBG_forDebug():void
        {
            _img.graphics.clear();
            _img.graphics.beginFill(16711680, 0.3);
            _img.graphics.drawRect(0, 0, _img.width, _img.height);
            _img.graphics.endFill();
            return;
        }

        private function _setRootOffset():void
        {
            _rootOffseted = true;
            _img.x = (-_img.width) / 2;
            _img.y = (-_img.height) / 2;
            _canvas.x = _img.width / 2;
            _canvas.y = _img.height / 2;
            _canvas.addChild(_img);
            return;
        }

        private var _rootOffseted:Boolean=false;

        private var _canvas:flash.display.Sprite;

        private var _img:flash.display.Sprite;
    }
}


//      class HPGauge
package battle.views
{
    import a24.tween.*;
    import battle.display.main.banner.*;
    import battle.events.*;
    import battle.models.*;
    import battle.views.effects.bomb.*;
    import common.debug.*;
    import flash.display.*;
    import flash.events.*;

    public class HPGauge extends flash.display.Sprite
    {
        public function HPGauge(arg1:int, arg2:Boolean)
        {
            super();
            if (arg2)
            {
                _mc = new Assets.Cls_MapGaugeSP();
            }
            else
            {
                _mc = new Assets.Cls_MapGauge();
            }
            addChild(_mc);
            _mc.gotoAndStop(arg1);
            var loc1:*=_barMC;
            if (loc1 != null)
            {
                _gaugeMC.x = 0;
                _initBarW = loc1.width;
            }
            return;
        }

        private function get _gaugeMC():flash.display.MovieClip
        {
            return _mc.hasOwnProperty("gauge") ? _mc.gauge : null;
        }

        private function get _barMC():flash.display.MovieClip
        {
            var loc1:*=_gaugeMC;
            return !(loc1 == null) && loc1.hasOwnProperty("bar") ? loc1.bar : null;
        }

        public function set damageScale(arg1:Number):void
        {
            _damageScale = arg1;
            return;
        }

        public function get damageScale():Number
        {
            return _damageScale;
        }

        public function get animateNow():Boolean
        {
            return _animateNow || !(_bombTween == null);
        }

        public function get bombed():Boolean
        {
            return _bombed;
        }

        public function setExBossHP(arg1:battle.models.BattleData):void
        {
            var loc1:*=_barMC;
            if (loc1 != null)
            {
                _gaugeMax = arg1.baseData.exBossDefeatRequest;
                _gaugeNow = Math.max(_gaugeMax - arg1.baseData.exBossDefeat, 0);
                if (arg1.baseData.isInvalidationBoss() == false)
                {
                    arg1.enemyShips[0].banner.addEventListener("BattleBanner::GEKICHIN", _handleTargetShipDead);
                }
                _updateGauge();
            }
            return;
        }

        public function setEventBossHP(arg1:battle.models.BattleData):void
        {
            var loc1:*=_barMC;
            if (loc1 != null)
            {
                _gaugeMax = arg1.baseData.eventMapHPMax;
                _gaugeNow = arg1.baseData.mapHPNow;
                if (arg1.baseData.isInvalidationBoss() == false)
                {
                    arg1.enemyShips[0].banner.addEventListener("ShipDamageEvent::DAMAGE", _handleTargetShipDamaged);
                    arg1.enemyShips[0].banner.addEventListener("BattleBanner::GEKICHIN", _handleTargetShipDead);
                }
                _updateGauge();
            }
            return;
        }

        private function _updateGauge():void
        {
            var loc1:*=1 / _gaugeMax * _gaugeNow;
            _targetBarW = _initBarW * loc1;
            if (_animateNow == false)
            {
                _animateNow = true;
                addEventListener("enterFrame", _handleEnterframe);
            }
            return;
        }

        private function _handleEnterframe(arg1:flash.events.Event):void
        {
            if (Math.abs(_barMC.width - _targetBarW) <= ANIM_SPEED)
            {
                _barMC.width = _targetBarW;
                _animateNow = false;
                removeEventListener("enterFrame", _handleEnterframe);
                if (_targetBarW <= 0)
                {
                    _bomb();
                }
            }
            else if (_targetBarW > _barMC.width)
            {
                _barMC.width = _barMC.width + ANIM_SPEED;
            }
            else
            {
                _barMC.width = _barMC.width - ANIM_SPEED;
            }
            return;
        }

        private function _bomb():void
        {
            var e1:battle.views.effects.bomb.Explosion;
            var e2:battle.views.effects.bomb.Explosion;
            var e3:battle.views.effects.bomb.Explosion;

            var loc1:*;
            common.debug.Debug.log("[[ HPゲージ 爆発 ]]");
            e1 = new battle.views.effects.bomb.Explosion();
            e1.x = 71;
            e1.y = 13;
            e2 = new battle.views.effects.bomb.Explosion();
            e2.x = 139;
            e2.y = 38;
            e3 = new battle.views.effects.bomb.Explosion();
            e3.x = 206;
            e3.y = 16;
            _bombTween = a24.tween.Tween24.serial(a24.tween.Tween24.addChild(this, e1, e2, e3), a24.tween.Tween24.parallel(e1.createBombTween(0, "EXPLOSION_TYPE:SMALL"), e2.createBombTween(0, "EXPLOSION_TYPE:SMALL").delay(0.25), e3.createBombTween(0, "EXPLOSION_TYPE:SMALL").delay(0.35), a24.tween.Tween24.tween(_gaugeMC, 0.35).alpha(0).delay(0.25)));
            _bombed = true;
            _bombTween.onComplete(function ():void
            {
                _bombTween = null;
                return;
            }).play()
            return;
        }

        private function _handleTargetShipDamaged(arg1:battle.events.ShipDamageEvent):void
        {
            common.debug.Debug.log("ーーーーー敵旗艦ダメージーーーーー");
            var loc1:*=arg1.target as battle.display.main.banner.BattleBanner;
            if (loc1 != null)
            {
                common.debug.Debug.log("Gauge HP: " + _gaugeNow + "/" + _gaugeMax);
                _gaugeNow = Math.max(0.1, _gaugeNow - arg1.damage * _damageScale);
                _updateGauge();
                common.debug.Debug.log("Gauge HP: " + _gaugeNow + "/" + _gaugeMax);
            }
            return;
        }

        private function _handleTargetShipDead(arg1:flash.events.Event):void
        {
            common.debug.Debug.log("ーーーーー敵旗艦轟沈ーーーーー");
            var loc1:*=arg1.target as battle.display.main.banner.BattleBanner;
            if (loc1 != null)
            {
                if (_damageScale <= 0)
                {
                    _gaugeNow = Math.min(_gaugeMax, _gaugeNow - 1);
                    _updateGauge();
                }
                else
                {
                    if (_gaugeNow == 0.1)
                    {
                        _gaugeNow = 0;
                        _updateGauge();
                    }
                    loc1.removeEventListener("ShipDamageEvent::DAMAGE", _handleTargetShipDamaged);
                }
                loc1.removeEventListener("BattleBanner::GEKICHIN", _handleTargetShipDead);
            }
            return;
        }

        private var ANIM_SPEED:Number=2;

        private var _mc:flash.display.MovieClip;

        private var _initBarW:Number=0;

        private var _targetBarW:Number=0;

        private var _animateNow:Boolean=false;

        private var _bombTween:a24.tween.Tween24=null;

        private var _bombed:Boolean=false;

        private var _gaugeMax:Number=0;

        private var _gaugeNow:Number=0;

        private var _damageScale:Number=0;
    }
}


//      class MainView
package battle.views
{
    import battle.display.common.*;
    import battle.display.layers.*;
    import battle.display.main.*;
    import battle.views.layers.*;
    import flash.display.*;

    public class MainView extends flash.display.Sprite
    {
        public function MainView()
        {
            _bgLayer = new battle.display.main.BackgroundView();
            _bannerLayer = new battle.display.main.BannerView();
            _torpedoLayer = new battle.views.layers.TorpedoLayer();
            _bombLayer = new battle.views.layers.BombLayer();
            _raderLayer = new battle.display.layers.RaderLayer();
            _contentsLayer = new flash.display.Sprite();
            _shutter = new battle.views.ShutterFrame();
            _hpGaugeLayer = new battle.views.layers.HPGaugeLayer();
            _infoLayer = new battle.views.layers.InfoLayer();
            _upperBar = new battle.display.common.UpperBar();
            _infoLayer2 = new battle.views.layers.InfoLayer();
            _cutinLayer = new flash.display.Sprite();
            _topLayer = new flash.display.Sprite();
            super();
            addChild(_bgLayer);
            addChild(_torpedoLayer);
            addChild(_bannerLayer);
            addChild(_bombLayer);
            _damageCanvas = new battle.display.main.DamageView(this);
            addChild(_damageCanvas);
            addChild(_contentsLayer);
            addChild(_raderLayer);
            addChild(_hpGaugeLayer);
            addChild(_shutter);
            addChild(_infoLayer);
            _upperBar.y = 11;
            addChild(_upperBar);
            addChild(_infoLayer2);
            addChild(_cutinLayer);
            addChild(_topLayer);
            return;
        }

        public function get bgLayer():battle.display.main.BackgroundView
        {
            return _bgLayer;
        }

        public function get bannerLayer():battle.display.main.BannerView
        {
            return _bannerLayer;
        }

        public function get torpedoLayer():battle.views.layers.TorpedoLayer
        {
            return _torpedoLayer;
        }

        public function get bombLayer():battle.views.layers.BombLayer
        {
            return _bombLayer;
        }

        public function get damageCanvas():battle.display.main.DamageView
        {
            return _damageCanvas;
        }

        public function get raderLayer():battle.display.layers.RaderLayer
        {
            return _raderLayer;
        }

        public function get contentsLayer():flash.display.Sprite
        {
            return _contentsLayer;
        }

        public function get hpGaugeLayer():battle.views.layers.HPGaugeLayer
        {
            return _hpGaugeLayer;
        }

        public function get infoLayer():battle.views.layers.InfoLayer
        {
            return _infoLayer;
        }

        public function get upperBar():battle.display.common.UpperBar
        {
            return _upperBar;
        }

        public function get cutinLayer():flash.display.Sprite
        {
            return _cutinLayer;
        }

        public function get infoLayer2():battle.views.layers.InfoLayer
        {
            return _infoLayer2;
        }

        public function get shutter():battle.views.ShutterFrame
        {
            return _shutter;
        }

        public function get topLayer():flash.display.Sprite
        {
            return _topLayer;
        }

        public function preFinalize1st():void
        {
            removeChild(_bgLayer);
            _bgLayer.finalize();
            _bgLayer = null;
            removeChild(_torpedoLayer);
            _torpedoLayer = null;
            removeChild(_bannerLayer);
            _bannerLayer.finalize();
            _bannerLayer = null;
            removeChild(_bombLayer);
            _bombLayer = null;
            removeChild(_damageCanvas);
            _damageCanvas.finalize();
            _damageCanvas = null;
            removeChild(_contentsLayer);
            _contentsLayer = null;
            removeChild(_raderLayer);
            _raderLayer = null;
            removeChild(_hpGaugeLayer);
            _hpGaugeLayer = null;
            removeChild(_infoLayer);
            _infoLayer = null;
            removeChild(_infoLayer2);
            _infoLayer2 = null;
            removeChild(_cutinLayer);
            _cutinLayer = null;
            return;
        }

        public function finalize():void
        {
            removeChildren();
            _upperBar = null;
            _shutter = null;
            _topLayer = null;
            return;
        }

        private var _bgLayer:battle.display.main.BackgroundView;

        private var _bannerLayer:battle.display.main.BannerView;

        private var _torpedoLayer:battle.views.layers.TorpedoLayer;

        private var _bombLayer:battle.views.layers.BombLayer;

        private var _damageCanvas:battle.display.main.DamageView;

        private var _raderLayer:battle.display.layers.RaderLayer;

        private var _contentsLayer:flash.display.Sprite;

        private var _shutter:battle.views.ShutterFrame;

        private var _hpGaugeLayer:battle.views.layers.HPGaugeLayer;

        private var _infoLayer:battle.views.layers.InfoLayer;

        private var _upperBar:battle.display.common.UpperBar;

        private var _infoLayer2:battle.views.layers.InfoLayer;

        private var _cutinLayer:flash.display.Sprite;

        private var _topLayer:flash.display.Sprite;
    }
}


//      class ShutterFrame
package battle.views
{
    import common.display.*;

    public class ShutterFrame extends common.display.ShutterView
    {
        public function ShutterFrame()
        {
            super();
            SHUTTER_TOP_OPENED_Y = SHUTTER_TOP_OPENED_Y + 25;
            SHUTTER_BTM_OPENED_Y = SHUTTER_BTM_OPENED_Y - 25;
            return;
        }
    }
}


//    package vo
//      class BattleShipData
package battle.vo
{
    import battle.display.main.banner.*;
    import common.debug.*;
    import common.util.*;
    import flash.events.*;
    import flash.utils.*;
    import vo.*;

    public class BattleShipData extends Object
    {
        public function BattleShipData(arg1:int, arg2:Object, arg3:Boolean)
        {
            super();
            _index = arg1;
            _obj = arg2;
            _combined = arg3;
            _preCondition = common.util.Util.getCondition(nowHP, getMaxHp());
            return;
        }

        private function _getSlotitemIndex(arg1:int):int
        {
            var loc1:*=getSlotItemIDs();
            return loc1.indexOf(arg1);
        }

        private function _hasSlotitem(arg1:int):Boolean
        {
            var loc1:*=getSlotItemIDs();
            return !(loc1.indexOf(arg1) == -1);
        }

        private function _hasExSlotitem(arg1:int):Boolean
        {
            return getExSlotItemID() == arg1;
        }

        private function _hasEquipTypeInExSlotitem(arg1:int):Boolean
        {
            var loc1:*=getExSlotItemID();
            return DataFacade.getMasterSlotItemData().getSlotItemEquipType(loc1) == arg1;
        }

        private function _handleDamaged(arg1:flash.events.Event):void
        {
            common.debug.Debug.log("艦がダメージを受けた時のイベント");
            if (this is battle.vo.EnemyShipData)
            {
                battle.vo.EnemyShipData(this).playVoice_Defence();
            }
            return;
        }

        public function toString():String
        {
            return getName() + "(" + index + ")";
        }

        public function get index():int
        {
            return _index;
        }

        public function get banner():battle.display.main.banner.BattleBanner
        {
            return _banner;
        }

        public function set banner(arg1:battle.display.main.banner.BattleBanner):void
        {
            if (_banner != null)
            {
                _banner.removeEventListener("ShipDamageEvent::DAMAGE", _handleDamaged);
            }
            _banner = arg1;
            if (_banner != null)
            {
                _banner.setTaihiFlag(isTaihi());
                _banner.addEventListener("ShipDamageEvent::DAMAGE", _handleDamaged);
            }
            return;
        }

        public function get waitCutin():int
        {
            return _waitCutin;
        }

        public function get obj():Object
        {
            return _obj;
        }

        public function get combined():Boolean
        {
            return _combined;
        }

        public function getCharaID():int
        {
            return _obj["api_ship_id"];
        }

        public function getMaxHp():int
        {
            return _obj["api_maxhp"];
        }

        public function getInitHp():int
        {
            return _obj["inithp"];
        }

        public function get nowHP():int
        {
            return _obj["api_nowhp"];
        }

        public function set nowHP(arg1:int):void
        {
            _obj["api_nowhp"] = arg1;
            return;
        }

        public function getLevel():int
        {
            return _obj["api_lv"];
        }

        public function getKaryoku():int
        {
            return _obj["param"][0];
        }

        public function getRaisou():int
        {
            return _obj["param"][1];
        }

        public function getTaiku():int
        {
            return _obj["param"][2];
        }

        public function getSoukou():int
        {
            return _obj["param"][3];
        }

        public function isTaihi():Boolean
        {
            return _obj.hasOwnProperty("is_taihi") ? _obj["is_taihi"] : false;
        }

        public function getName():String
        {
            return DataFacade.getMasterShipData().getName(getCharaID());
        }

        public function getBacks():int
        {
            return DataFacade.getMasterShipData().getBacks(getCharaID());
        }

        public function getSpeed():int
        {
            return DataFacade.getMasterShipData().getSpeed(getCharaID());
        }

        public function getHPRate():Number
        {
            var loc1:*=getMaxHp();
            return nowHP / loc1;
        }

        public function getSLotItemCount():int
        {
            return DataFacade.getMasterShipData().getSlotNum(getCharaID());
        }

        public function getSlotItemIDs():Array
        {
            return null;
        }

        public function getSlotItemCount():int
        {
            return common.util.Util.getInt(_obj, "api_slotnum", 0);
        }

        public function getExSlotItemID():int
        {
            return 0;
        }

        public function useExSlotItem():int
        {
            return -1;
        }

        public function getSlotItemEquipTypes():Array
        {
            var loc6:*=0;
            var loc2:*=0;
            var loc5:*=0;
            var loc4:*=[];
            var loc1:*=DataFacade.getMasterSlotItemData();
            var loc3:*=getSlotItemIDs();
            loc6 = 0;
            while (loc6 < loc3.length)
            {
                loc2 = loc3[loc6];
                loc5 = loc1.getSlotItemEquipType(loc2);
                loc4.push(loc5);
                ++loc6;
            }
            return loc4;
        }

        public function getShipType():int
        {
            return DataFacade.getMasterShipData().getShipType(getCharaID());
        }

        public function isSubMarine():Boolean
        {
            var loc1:*=getShipType();
            return loc1 == 13 || loc1 == 14;
        }

        public function isGround():Boolean
        {
            return getSpeed() <= 0;
        }

        public function getCondition():int
        {
            return common.util.Util.getCondition(nowHP, getMaxHp());
        }

        public function repair(arg1:Number):void
        {
            if (nowHP > 0 && _preCondition == 0)
            {
                throw new Error("BattleShipData::repair can call only at HP0.");
                return;
            }
            nowHP = arg1;
            common.debug.Debug.log(getName() + "(" + index + ") repair HP:" + nowHP);
            var loc1:*=getCondition();
            _preCondition = loc1;
            return;
        }

        public function useYouin():void
        {
            var loc3:*=null;
            var loc4:*=0;
            var loc2:*=0;
            var loc1:*=0;
            if (hasYouinAtEx())
            {
                useExSlotItem();
            }
            else
            {
                loc3 = getSlotItemIDs();
                loc4 = 0;
                while (loc4 < loc3.length)
                {
                    loc2 = loc3[loc4];
                    loc1 = 42;
                    if (loc1 == loc2)
                    {
                        loc3.splice(loc4, 1);
                        loc3.push(-1);
                        return;
                    }
                    ++loc4;
                }
            }
            return;
        }

        public function useMegami():void
        {
            var loc2:*=null;
            var loc4:*=0;
            var loc1:*=0;
            var loc3:*=0;
            if (hasMegamiAtEx())
            {
                useExSlotItem();
            }
            else
            {
                loc2 = getSlotItemIDs();
                loc4 = 0;
                while (loc4 < loc2.length)
                {
                    loc1 = loc2[loc4];
                    loc3 = 43;
                    if (loc3 == loc1)
                    {
                        loc2.splice(loc4, 1);
                        loc2.push(-1);
                        return;
                    }
                    ++loc4;
                }
            }
            return;
        }

        public function useRation():Array
        {
            var loc5:*=0;
            var loc1:*=0;
            var loc4:*=[];
            if (_hasEquipTypeInExSlotitem(43))
            {
                loc4.push(useExSlotItem());
            }
            var loc3:*=getSlotItemIDs();
            var loc2:*=getSlotItemEquipTypes();
            loc5 = loc2.length - 1;
            while (loc5 >= 0)
            {
                if (loc2[loc5] == 43)
                {
                    loc1 = loc3[loc5];
                    if (loc4.indexOf(loc1) == -1)
                    {
                        loc4.push(loc1);
                        loc3.splice(loc5, 1);
                        loc3.push(-1);
                    }
                }
                --loc5;
            }
            return loc4;
        }

        public function damage(arg1:int, arg2:Boolean=true):void
        {
            var damage:int;
            var updatePreCondition:Boolean;
            var preHP:int;
            var condition:int;

            var loc1:*;
            damage = arg1;
            updatePreCondition = arg2;
            preHP = nowHP;
            nowHP = nowHP - damage;
            if (isPractice)
            {
                nowHP = Math.max(1, nowHP);
            }
            else
            {
                nowHP = Math.max(0, nowHP);
            }
            common.debug.Debug.log(getName() + "(" + index + ") damage:" + damage + " HP:" + preHP + "->" + nowHP);
            condition = getCondition();
            if (!(_preCondition == 0) && condition == 0)
            {
                _waitCutin = 0;
            }
            else if ((_preCondition == 100 || _preCondition == 75) && (condition == 50 || condition == 25))
            {
                _waitCutin = condition;
            }
            else if (_preCondition == 100 && condition == 75)
            {
                if (this is battle.vo.FriendShipData && getCharaID() > 0)
                {
                    banner.addEventListener("ShipDamageEvent::DAMAGE", function (arg1:flash.events.Event):void
                    {
                        banner.removeEventListener("ShipDamageEvent::DAMAGE", arguments.callee);
                        common.debug.Debug.log("艦がダメージを受けた時のイベント(小破)");
                        common.util.SoundUtil.playVoiceAtRandom(getCharaID(), [19, 20], [50, 50]);
                        return;
                    })
                }
            }
            if (updatePreCondition == true)
            {
                _preCondition = condition;
            }
            return;
        }

        public function clearWaitCutin():void
        {
            _waitCutin = 100;
            return;
        }

        public function getYouinIndex():int
        {
            return _getSlotitemIndex(42);
        }

        public function hasYouin():Boolean
        {
            return _hasSlotitem(42);
        }

        public function hasYouinAtEx():Boolean
        {
            return _hasExSlotitem(42);
        }

        public function getMegamiIndex():int
        {
            return _getSlotitemIndex(43);
        }

        public function hasMegami():Boolean
        {
            return _hasSlotitem(43);
        }

        public function hasMegamiAtEx():Boolean
        {
            return _hasExSlotitem(43);
        }

        public function hasPicket():Boolean
        {
            return _hasSlotitem(129) || _hasExSlotitem(129);
        }

        public function getCloneObject():Object
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeObject(_obj);
            loc1.position = 0;
            return loc1.readObject();
        }

        protected var _index:int;

        protected var _obj:Object=null;

        protected var _combined:Boolean=false;

        private var _banner:battle.display.main.banner.BattleBanner=null;

        private var _preCondition:int=100;

        private var _waitCutin:int=100;

        public static var isPractice:Boolean=false;
    }
}


//      class EnemyShipData
package battle.vo
{
    import common.util.*;

    public class EnemyShipData extends battle.vo.BattleShipData
    {
        public function EnemyShipData(arg1:int, arg2:int, arg3:int, arg4:Array, arg5:int, arg6:int, arg7:Array)
        {
            super(arg1, {"api_ship_id":arg2, "api_lv":arg3, "api_slot":arg4, "inithp":arg5, "api_nowhp":arg5, "api_maxhp":arg6, "param":arg7}, false);
            return;
        }

        public function get eVoiceID():int
        {
            return _eVoiceID;
        }

        public override function getSlotItemIDs():Array
        {
            return _obj["api_slot"];
        }

        public function clearPrePlayedVoiceFlg():void
        {
            _prePlayed_aVoice = _prePlayed_dVoice = -1;
            return;
        }

        public function playVoice_Offence_Koukuu():void
        {
            return;
        }

        public function playVoice_Offence():void
        {
            var voiceID:int;
            var tmp:Array;

            var loc1:*;
            if (!(_aVoiceIDs == null) && _aVoiceIDs.length > 0)
            {
                if (_prePlayed_aVoice == -1 || _aVoiceIDs.length == 1)
                {
                    voiceID = _aVoiceIDs[0];
                }
                else
                {
                    tmp = _aVoiceIDs.filter(function ():*
                    {
                        var filter:Function;

                        return undefined = function (arg1:int, arg2:int, arg3:Array):Boolean
                        {
                            return !(_prePlayed_aVoice == arg1);
                        }
                    }())
                    voiceID = tmp[Math.floor(Math.random() * tmp.length)];
                }
                common.util.SoundUtil.playVoice(9998, voiceID);
            }
            return;
        }

        public function playVoice_Defence():void
        {
            var loc1:*=0;
            if (!(_dVoiceIDs == null) && _dVoiceIDs.length > 0 && _prePlayed_dVoice == -1 && nowHP > 0)
            {
                loc1 = _dVoiceIDs[Math.floor(Math.random() * _dVoiceIDs.length)];
                common.util.SoundUtil.playVoice(9998, loc1);
            }
            return;
        }

        public function setVoiceIDs(arg1:Array, arg2:Array, arg3:int):void
        {
            _aVoiceIDs = arg1;
            _dVoiceIDs = arg2;
            _eVoiceID = arg3;
            return;
        }

        public var boss:Boolean=false;

        private var _aVoiceIDs:Array;

        private var _dVoiceIDs:Array;

        private var _eVoiceID:int=0;

        private var _prePlayed_aVoice:int=-1;

        private var _prePlayed_dVoice:int=-1;
    }
}


//      class FriendShipData
package battle.vo
{
    import common.util.*;

    public class FriendShipData extends battle.vo.BattleShipData
    {
        public function FriendShipData(arg1:int, arg2:Object, arg3:Boolean)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public function getMemId():int
        {
            return _obj["api_id"];
        }

        public override function getSlotItemIDs():Array
        {
            return _obj["api_slot"];
        }

        public override function getExSlotItemID():int
        {
            return _obj["api_slot_ex"];
        }

        public override function useExSlotItem():int
        {
            var loc1:*=common.util.Util.getInt(_obj, "api_slot_ex", -1);
            _obj["api_slot_ex"] = 0;
            return loc1;
        }
    }
}


//    class Battle
package battle
{
    import __AS3__.vec.*;
    import a24.tween.*;
    import battle.models.*;
    import battle.phase.*;
    import battle.phase.boku.*;
    import battle.phase.combined.*;
    import battle.phase.day.*;
    import battle.views.*;
    import battle.vo.*;
    import common.debug.*;
    import common.events.*;
    import common.models.bases.*;
    import common.resources.*;
    import common.scenes.*;
    import common.util.*;
    import flash.events.*;
    import manager.*;
    import scene.*;

    public class Battle extends common.scenes.BattleBase
    {
        public function Battle()
        {
            super();
            return;
        }

        public function get view():battle.views.MainView
        {
            return _view;
        }

        public override function initialize(arg1:Object=null):void
        {
            var loc1:*=null;
            if (_ins != null)
            {
                AppFacade.showErrorScreen();
                return;
            }
            _ins = this;
            manager.CacheManager.ALL_CACHE = true;
            if (_view && _view.parent)
            {
                _view.parent.removeChild(_view);
            }
            visible = true;
            _view = new battle.views.MainView();
            addChild(_view);
            var loc2:*=new common.models.bases.BattleBaseData(arg1);
            if (loc2 != null)
            {
                _data = new battle.models.BattleData(loc2);
                if (loc2.getBoukuuData() == null)
                {
                    _phaseInitialize();
                }
                else
                {
                    common.debug.Debug.log("防空戦の処理へ");
                    common.debug.Debug.log("[== 防空 Initialize ==]");
                    loc1 = new battle.phase.boku.PhaseBokuInitialize(_view, _data);
                    loc1.getTween().onComplete(_phaseGo1stCombat).play();
                }
            }
            else
            {
                common.debug.Debug.log("Corrupt BattleBaseData.");
                AppFacade.showErrorScreen();
            }
            return;
        }

        public override function setVisiblityAtUpperBarLayer(arg1:Boolean):void
        {
            _view.upperBar.visible = arg1;
            return;
        }

        public override function setVisiblityAtShutterLayer(arg1:Boolean):void
        {
            _view.shutter.visible = arg1;
            return;
        }

        public override function finalize():void
        {
            _ins = null;
            _view.finalize();
            _view = null;
            _data = null;
            removeChildren();
            manager.CacheManager.ALL_CACHE = false;
            manager.CacheManager.reduceCache();
            return;
        }

        private function _phaseInitialize():void
        {
            common.debug.Debug.log("[== Initialize ==]");
            var loc1:*=new battle.phase.PhaseInitialize(_view, _data);
            loc1.getTween().onComplete(_phaseGo1stCombat).play();
            return;
        }

        private function _phaseGo1stCombat():void
        {
            var loc2:*=false;
            var loc1:*=new Date().getTime();
            _data.baseData.__t__ = loc1;
            _data.baseData.__c__ = 0;
            addEventListener("enterFrame", _ad);
            if (_data.baseData.isPractice())
            {
                _phase1stCombat(false);
            }
            else
            {
                loc2 = false;
                if (_data.baseData.isNightOnlyBattle() || _data.baseData.isNightDayBattle())
                {
                    loc2 = true;
                }
                if (_data.baseData.isCombinedFriend() != true)
                {
                    _phase1stCombat(loc2);
                }
                else
                {
                    _phase1stCombat_Combined(loc2);
                }
            }
            return;
        }

        private function _phase1stCombat(arg1:Boolean):void
        {
            var loc1:*=null;
            _data.combatCount = 1;
            if (arg1)
            {
                common.debug.Debug.log("[== NightCombat ==]");
                loc1 = new battle.phase.PhaseNightCombat(_view, _data);
            }
            else if (_data.baseData.isAerialWarfare())
            {
                common.debug.Debug.log("[== DayCombat - Aerial ==]");
                loc1 = new battle.phase.day.PhaseAerialWarfare(_view, _data);
            }
            else
            {
                common.debug.Debug.log("[== DayCombat ==]");
                loc1 = new battle.phase.PhaseDayCombat(_view, _data);
            }
            loc1.getTween().onComplete(_phaseEnd1stCombat).play();
            return;
        }

        private function _phaseEnd1stCombat():void
        {
            common.debug.Debug.log("[== 離脱判定 ==]");
            var loc1:*=new battle.phase.PhaseRidatsu(_view, _data);
            loc1.getTween().onComplete(_phaseGo2ndCombat, loc1).play();
            return;
        }

        private function _phase1stCombat_Combined(arg1:Boolean):void
        {
            var loc2:*=null;
            var loc1:*=0;
            _data.combatCount = 1;
            if (arg1)
            {
                common.debug.Debug.log("[== NightCombat ==]");
                loc2 = new battle.phase.combined.PhaseCombinedNightCombat(_view, _data);
            }
            else if (_data.baseData.isAerialWarfare())
            {
                common.debug.Debug.log("[== DayCombat - Aerial (Combined Deck) ==]");
                loc2 = new battle.phase.combined.PhaseCombinedAerialWarfare(_view, _data);
            }
            else
            {
                loc1 = _data.baseData.getCombinedType();
                if (loc1 != 1)
                {
                    if (loc1 != 2)
                    {
                        if (loc1 == 3)
                        {
                            common.debug.Debug.log("[== DayCombat(連合艦隊[輸送部隊]) ==]");
                            loc2 = new battle.phase.combined.PhaseDayCombatKidou(_view, _data);
                        }
                    }
                    else
                    {
                        common.debug.Debug.log("[== DayCombat(連合艦隊[水上部隊]) ==]");
                        loc2 = new battle.phase.combined.PhaseDayCombatSuijo(_view, _data);
                    }
                }
                else
                {
                    common.debug.Debug.log("[== DayCombat(連合艦隊[機動部隊]) ==]");
                    loc2 = new battle.phase.combined.PhaseDayCombatKidou(_view, _data);
                }
            }
            loc2.getTween().onComplete(_phaseEnd1stCombat).play();
            return;
        }

        private function _phaseGo2ndCombat(arg1:battle.phase.PhaseRidatsu=null):void
        {
            var loc1:*=null;
            _data.combatCount = 2;
            if (_data.baseData.isNightOnlyBattle())
            {
                _phaseCheck();
            }
            else if (_data.baseData.isNightDayBattle())
            {
                if (arg1.isGoNext)
                {
                    _playBGM_2ndCombat(true, _data.baseData);
                    loc1 = new battle.phase.PhaseDayCombat(_view, _data);
                    arg1.getTween().onComplete(_phaseCheck).play();
                }
                else
                {
                    _phaseCheck();
                }
            }
            else if (arg1.isGoNext)
            {
                _playBGM_2ndCombat(false, _data.baseData);
                if (_data.baseData.isCombinedFriend())
                {
                    loc1 = new battle.phase.combined.PhaseCombinedNightCombat(_view, _data);
                }
                else
                {
                    loc1 = new battle.phase.PhaseNightCombat(_view, _data);
                }
                loc1.getTween().onComplete(_phaseCheck).play();
            }
            else
            {
                _phaseCheck();
            }
            return;
        }

        private function _getBattleResultSwf(arg1:int=0):void
        {
            var retryCount:int;
            var cls:Class;
            var sceneLoader:scene.SceneLoader;

            var loc1:*;
            retryCount = arg1;
            cls = Assets.getSceneCLS(4);
            if (cls == null)
            {
                if (retryCount >= 3)
                {
                    AppFacade.showErrorScreen("Load failed. battleresult");
                }
                else
                {
                    sceneLoader = scene.SceneLoader.createSceneLoader(4);
                    sceneLoader.load("battleresult", function (arg1:scene.SceneLoader):void
                    {
                        _getBattleResultSwf(retryCount + 1);
                        return;
                    }, function (arg1:scene.SceneLoader):void
                    {
                        _getBattleResultSwf(retryCount + 1);
                        return;
                    })
                }
                return;
            }
            _phaseCheck();
            return;
        }

        private function _phaseCheck():void
        {
            var loc3:*=null;
            var loc5:*=0;
            var loc2:*=null;
            var loc1:*=null;
            var loc4:*=AppFacade.root.getDebugManager();
            if (_data.baseData.isPractice() == false && !(loc4 == null) && !loc4.isEmulate)
            {
                loc3 = [];
                loc5 = 0;
                while (loc5 < _data.friendShips.length)
                {
                    loc2 = _data.friendShips[loc5];
                    if (loc2 == null)
                    {
                        loc3.push(null);
                    }
                    else
                    {
                        loc3.push(loc2.obj);
                    }
                    ++loc5;
                }
                if (!(_data.friendShips_combined == null) && _data.baseData.isCombinedFriend())
                {
                    loc5 = 0;
                    while (loc5 < _data.friendShips_combined.length)
                    {
                        loc2 = _data.friendShips_combined[loc5];
                        if (loc2 == null)
                        {
                            loc3.push(null);
                        }
                        else
                        {
                            loc3.push(loc2.obj);
                        }
                        ++loc5;
                    }
                }
                loc1 = AppFacade.root && Object(AppFacade.root).hasOwnProperty("task1") ? AppFacade.root["task1"](loc3) : a24.tween.Tween24.wait(0);
                loc1.onComplete(_phaseBrancheBokuEnd).play();
            }
            else
            {
                _phaseBrancheBokuEnd();
            }
            return;
        }

        private function _phaseBrancheBokuEnd():void
        {
            var loc1:*=null;
            if (_data.baseData.getBoukuuData() == null)
            {
                _phaseResult();
            }
            else
            {
                removeEventListener("enterFrame", _ad);
                loc1 = new common.events.BattleEndEvent();
                if (_data.baseData.hasNext())
                {
                    dispatchEvent(loc1);
                }
                else
                {
                    visible = false;
                    dispatchEvent(loc1);
                }
            }
            return;
        }

        private function _phaseResult():void
        {
            var loc2:*=Assets.getSceneCLS(4);
            if (loc2 == null)
            {
                _getBattleResultSwf();
                return;
            }
            common.debug.Debug.log("[== Result ==]");
            removeEventListener("enterFrame", _ad);
            var loc1:*=new Date().getTime();
            common.debug.Debug.log("[-]: " + _data.baseData.__t__ + " -> " + loc1 + "(" + (loc1 - _data.baseData.__t__) + ")");
            _data.baseData.__t__ = loc1 - _data.baseData.__t__;
            var loc3:*=new loc2();
            loc3.battleBase = this;
            a24.tween.Tween24.serial(a24.tween.Tween24.func(_view.upperBar.show, 15), a24.tween.Tween24.addChild(_view.topLayer, loc3), loc3.initialTween(_data.createObjectForResult()), a24.tween.Tween24.func(_preFinalize), a24.tween.Tween24.waitEvent(loc3, "complete"), a24.tween.Tween24.func(_afterBattleResult, loc3), a24.tween.Tween24.removeChild(loc3), a24.tween.Tween24.func(loc3.finalize)).onComplete(_phaseFinalize).play();
            return;
        }

        private function _preFinalize():void
        {
            var loc3:*=0;
            _view.preFinalize1st();
            var loc1:*=_data.friendShipAll;
            loc3 = 0;
            while (loc3 < loc1.length)
            {
                if (loc1[loc3] != null)
                {
                    loc1[loc3].banner = null;
                }
                ++loc3;
            }
            var loc2:*=_data.enemyShips;
            loc3 = 0;
            while (loc3 < loc2.length)
            {
                if (loc2[loc3] != null)
                {
                    loc2[loc3].banner = null;
                }
                ++loc3;
            }
            return;
        }

        private function _afterBattleResult(arg1:common.scenes.BattleResultBase):void
        {
            var loc2:*=arg1.getEscapeShipIndexes();
            loc2 = loc2 != null ? loc2 : [];
            var loc1:*=arg1.getTowShipIndexes();
            loc1 = loc1 != null ? loc1 : [];
            _data.baseData.setEscapeCandidate(loc2, loc1);
            return;
        }

        private function _phaseFinalize():void
        {
            var loc1:*=null;
            var loc2:*=null;
            common.debug.Debug.log("[== Finalize ==]");
            common.util.SoundUtil.stopAllVoices();
            common.util.SoundUtil.VOICE_MAX_SIDE_BY_SIDE = 1;
            common.resources.ShipResourceLoader.option = null;
            if (_data.baseData.isPractice())
            {
                dispatchEvent(new common.events.BattleEndEvent());
            }
            else
            {
                loc1 = _data.friendShips[0];
                loc2 = new common.events.BattleEndEvent();
                loc2.damagedFlagship = loc1.getCondition() <= 25;
                loc2.hasYouinAtFlagship = loc1.hasYouin() || loc1.hasYouinAtEx();
                loc2.hasMegamiAtFlagship = loc1.hasMegami() || loc1.hasMegamiAtEx();
                loc2.taihiList_Main = _data.combatData.getTaihiFlags(true, false);
                loc2.taihiList_Sub = _data.combatData.getTaihiFlags(true, true);
                if (_data.baseData.hasNext())
                {
                    if (loc2.damagedFlagship && !loc2.hasYouinAtFlagship && !loc2.hasMegamiAtFlagship)
                    {
                        _phaseKikanTaiha(loc2);
                    }
                    else if (_data.baseData.hasEscapeCandidate())
                    {
                        _phaseEscapeSelect(loc2, _data.baseData.escape_cadidate[0], _data.baseData.tow_cadidate[0]);
                    }
                    else
                    {
                        dispatchEvent(loc2);
                    }
                }
                else
                {
                    visible = false;
                    dispatchEvent(loc2);
                }
            }
            return;
        }

        private function _phaseEscapeSelect(arg1:common.events.BattleEndEvent, arg2:int, arg3:int):void
        {
            common.debug.Debug.log("===護衛退避===");
            common.debug.Debug.log("   退避艦:" + arg2 + " 曳航艦:" + arg3);
            _view.upperBar.show(16);
            var loc1:*;
            (loc1 = new battle.phase.PhaseEscapeSelect(_view, _data, arg2, arg3)).getTween().onComplete(_phaseEscapeSelected, arg1, loc1).play();
            return;
        }

        private function _phaseEscapeSelected(arg1:common.events.BattleEndEvent, arg2:battle.phase.PhaseEscapeSelect):void
        {
            var loc2:*=null;
            var loc1:*=null;
            if (arg2.result)
            {
                if ((loc2 = arg2.escapeShip).combined != false)
                {
                    arg1.taihiList_Sub.push(loc2.index + 1);
                }
                else
                {
                    arg1.taihiList_Main.push(loc2.index + 1);
                }
                loc1 = arg2.towShip;
                if (loc1.combined != false)
                {
                    arg1.taihiList_Sub.push(loc1.index + 1);
                }
                else
                {
                    arg1.taihiList_Main.push(loc1.index + 1);
                }
            }
            arg2.finalize();
            dispatchEvent(arg1);
            return;
        }

        private function _phaseKikanTaiha(arg1:common.events.BattleEndEvent):void
        {
            var loc1:*=new battle.phase.PhaseKikanTaiha(_view, _data);
            loc1.getTween().onComplete(dispatchEvent, arg1).play();
            return;
        }

        private function _playBGM_2ndCombat(arg1:Boolean, arg2:common.models.bases.BattleBaseData, arg3:int=0):void
        {
            var loc5:*=0;
            var loc6:*=null;
            if (common.util.SoundUtil.volumeBGM == 0)
            {
                return;
            }
            var loc2:*=arg2.isBossMap();
            var loc1:*=arg2.areaID;
            var loc7:*=arg2.mapNo;
            if (_data.baseData.isPractice())
            {
                loc5 = 2;
            }
            else
            {
                loc5 = BattleAssets.getBGM_ID(arg1, loc2, loc1, loc7, _data.combatData.getBossDamaged());
            }
            var loc4:*=BattleAssets.getBGMClsFromID(loc5);
            var loc3:*=0;
            if (loc4 != null)
            {
                if (loc4 == _data.preSoundClass)
                {
                    loc3 = _data.preSoundStoppedPosition;
                }
                common.util.SoundUtil.playBGM("MAIN_BGM", new loc4(), loc3);
            }
            else
            {
                if (arg3 >= 3)
                {
                    return;
                }
                (loc6 = new battle.phase.PhaseLoadBGM(_view, _data, BattleAssets.getBGM_ID(arg1, loc2, loc1, loc7, _data.combatData.getBossDamaged()))).getTween().onComplete(_playBGM_2ndCombat, arg1, arg2, arg3 + 1).play();
            }
            return;
        }

        private function _ad(arg1:flash.events.Event):void
        {
            _data.baseData.__c__ = (_data.baseData.__c__ + 1);
            return;
        }

        private var _data:battle.models.BattleData=null;

        private var _view:battle.views.MainView;

        private static var _ins:battle.Battle=null;
    }
}


//    class BattleConsts
package battle
{
    import __AS3__.vec.*;
    import battle.models.*;
    import battle.vo.*;

    public class BattleConsts extends Object
    {
        public function BattleConsts()
        {
            super();
            return;
        }

        private static function _initEnemyVoice34(arg1:int, arg2:int, arg3:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg4:Boolean):void
        {
            var loc4:*=0;
            var loc3:*=null;
            var loc1:*=0;
            var loc2:*=null;
            loc4 = 0;
            while (loc4 < arg3.length)
            {
                if ((loc3 = battle.vo.EnemyShipData(arg3[loc4])) != null)
                {
                    loc1 = loc3.getCharaID();
                    loc2 = loc3.getName();
                    if (arg2 == 342 && loc2 == "集積地棲姫" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([33265320], [33265330], 33265340);
                    }
                    else if (arg2 == 342 && loc2 == "集積地棲姫-壊" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([33265620], [33265630], 33265640);
                    }
                    else if (arg2 == 343 && loc2 == "駆逐古鬼" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([34367320], [34367330], 34367340);
                    }
                    else if (arg2 == 344 && loc2 == "重巡棲姫" && loc3.index == 0)
                    {
                        if (loc1 == 659 || loc1 == 660 || loc1 == 661)
                        {
                            loc3.setVoiceIDs([33365920], [33365930], 33365940);
                        }
                        else if (loc1 == 662 || loc1 == 663 || loc1 == 664)
                        {
                            loc3.setVoiceIDs([33366220], [33366230], 33366240);
                        }
                    }
                    else if (arg2 == 345 && loc2 == "リコリス棲姫" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([34567920], [34567930], 34567940);
                    }
                    else if (arg2 == 346 && loc2 == "中枢棲姫" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([34668420], [34668430], 34668440);
                    }
                    else if (arg2 == 347 && loc2 == "中枢棲姫-壊" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([34768720], [34768730], 34768740);
                    }
                    else if (loc2 != "駆逐古姫")
                    {
                        if (loc2 != "PT小鬼群")
                        {
                            if (loc2 != "戦艦棲姫")
                            {
                                if (loc2 != "空母棲姫")
                                {
                                    if (loc2 != "駆逐水鬼")
                                    {
                                        if (loc2 != "駆逐棲姫")
                                        {
                                            if (loc2 != "水母棲姫")
                                            {
                                                if (loc2 == "潜水棲姫")
                                                {
                                                    if (arg4 != false)
                                                    {
                                                        loc3.setVoiceIDs([32464421], [32464431], 32464440);
                                                    }
                                                    else
                                                    {
                                                        loc3.setVoiceIDs([32464420], [32464430], 32464440);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                loc3.setVoiceIDs([31306252], [31306253], 0);
                                            }
                                        }
                                        else
                                        {
                                            loc3.setVoiceIDs([30505972], [30505973], 0);
                                        }
                                    }
                                    else if (arg4 != false)
                                    {
                                        loc3.setVoiceIDs([32564721], [32564731], 32564740);
                                    }
                                    else
                                    {
                                        loc3.setVoiceIDs([32564720], [32564730], 32564740);
                                    }
                                }
                                else
                                {
                                    loc3.setVoiceIDs([29405862], [29405863], 0);
                                }
                            }
                            else
                            {
                                loc3.setVoiceIDs([27605572], [27605573], 0);
                            }
                        }
                        else
                        {
                            loc3.setVoiceIDs([32263720], [32263730], 0);
                        }
                    }
                    else
                    {
                        loc3.setVoiceIDs([34769020], [34769030], 0);
                    }
                }
                ++loc4;
            }
            return;
        }

        public static function isBossInsert(arg1:battle.models.BattleData):Object
        {
            var loc3:*=0;
            var loc4:*=null;
            var loc2:*=arg1.baseData.areaID;
            var loc5:*=arg1.baseData.mapID;
            var loc1:*=arg1.enemyShips[0];
            if (loc2 == 33)
            {
                return _isBossInsert33(arg1);
            }
            if (loc2 == 34)
            {
                return _isBossInsert34(arg1);
            }
            if (loc5 == 64)
            {
                loc3 = loc1.getCharaID();
                if ((loc4 = loc1.getName()) == "離島棲姫" && arg1.baseData.isBossMap() == true)
                {
                    return {"id":loc3, "message":"ココマデ……。クルトワ……ネ…………。", "offsetX":110, "offsetY":0, "voice":6466810, "stype":"離島基地"};
                }
            }
            return null;
        }

        private static function _isBossInsert33(arg1:battle.models.BattleData):Object
        {
            var loc1:*=arg1.enemyShips[0];
            var loc2:*=loc1.getCharaID();
            if (arg1.baseData.mapID == 331 && loc1.getName() == "潜水棲姫")
            {
                return {"id":loc2, "message":"キタノ…ネェ……？　エモノタチ…ガァ……フフ…ハハハ…！", "offsetX":71, "offsetY":-7, "voice":32464410};
            }
            if (arg1.baseData.mapID != 332)
            {
                if (arg1.baseData.mapID == 333)
                {
                    if (loc1.getName() == "重巡棲姫")
                    {
                        if (loc2 == 659 || loc2 == 660 || loc2 == 661)
                        {
                            return {"id":loc2, "message":"バカ…メ……ヤクタタズドモ…メ……マタ…シズンデシマエ…", "offsetX":205, "offsetY":7, "voice":33365910, "stype":"深海棲艦"};
                        }
                        if (loc2 == 662 || loc2 == 663 || loc2 == 664)
                        {
                            return {"id":loc2, "message":"ノコノコト…ヤクタタズ…ドモ…ガ………シズメェ……ッ！", "offsetX":157, "offsetY":-54, "voice":33366210, "stype":"深海棲艦"};
                        }
                    }
                }
            }
            else
            {
                if (loc1.getName() == "集積地棲姫")
                {
                    return {"id":loc2, "message":"アツメタ…ブッシ…ハ……ヤラセハ……シナイ………ッ！", "offsetX":71, "offsetY":-3, "voice":33265310, "stype":"マーマレード湾"};
                }
                if (loc1.getName() == "集積地棲姫-壊")
                {
                    return {"id":loc2, "message":"マタ…キタノカ……。モウ……カエレッ…ヨォ………ッ！", "offsetX":25, "offsetY":0, "voice":33265610, "stype":"マーマレード湾"};
                }
            }
            return null;
        }

        private static function _isBossInsert34(arg1:battle.models.BattleData):Object
        {
            var loc3:*=false;
            var loc1:*=arg1.enemyShips[0];
            var loc2:*=loc1.getCharaID();
            if (arg1.baseData.mapID != 342)
            {
                if (arg1.baseData.mapID == 343 && loc1.getName() == "駆逐古鬼")
                {
                    return {"id":loc2, "message":"ダカラサ……。ソンナノツクッタッテサ……。ナニニナルノサァ！", "offsetX":180, "offsetY":20, "voice":34367310, "stype":"旧型駆逐艦"};
                }
                if (arg1.baseData.mapID != 344)
                {
                    if (arg1.baseData.mapID == 345 && loc1.getName() == "リコリス棲姫" && arg1.baseData.isBossMap())
                    {
                        return {"id":loc2, "message":"フ……トンデキタリ…ウッテキタリ…。イソガシイモンダナ……。", "offsetX":110, "offsetY":7, "voice":34567910, "stype":"航空基地"};
                    }
                    if (arg1.baseData.mapID == 346 && loc1.getName() == "中枢棲姫" && arg1.baseData.isBossMap())
                    {
                        if ((loc3 = arg1.combatData.getBossDamaged() == 1) == true)
                        {
                            return {"id":loc2, "message":"ナゼダ……ドウヤッテ…キタァ…………。ドウ…ヤッテ……?", "offsetX":40, "offsetY":-120, "voice":34668411, "stype":"拠点基地"};
                        }
                        return {"id":loc2, "message":"ナゼダ……ドウヤッテ…キタァ…………。ドウ…ヤッテ……?", "offsetX":40, "offsetY":-120, "voice":34668410, "stype":"拠点基地"};
                    }
                    if (arg1.baseData.mapID == 347 && loc1.getName() == "中枢棲姫-壊" && arg1.baseData.isBossMap())
                    {
                        return {"id":loc2, "message":"フタタビ…ココニ…タドリ…ツイタノカァ……? キサマラガ……！", "offsetX":30, "offsetY":-100, "voice":34768710, "stype":"半壊基地"};
                    }
                }
                else if (loc1.getName() == "重巡棲姫")
                {
                    if (loc2 == 659 || loc2 == 660 || loc2 == 661)
                    {
                        return {"id":loc2, "message":"バカ…メ……ヤクタタズドモ…メ……マタ…シズンデシマエ…", "offsetX":205, "offsetY":7, "voice":33365910, "stype":"深海棲艦"};
                    }
                    if (loc2 == 662 || loc2 == 663 || loc2 == 664)
                    {
                        return {"id":loc2, "message":"ノコノコト…ヤクタタズ…ドモ…ガ………シズメェ……ッ！", "offsetX":157, "offsetY":-54, "voice":33366210, "stype":"深海棲艦"};
                    }
                }
            }
            else
            {
                if (loc1.getName() == "集積地棲姫")
                {
                    return {"id":loc2, "message":"アツメタ…ブッシ…ハ……ヤラセハ……シナイ………ッ！", "offsetX":71, "offsetY":-3, "voice":33265310, "stype":"敵基地"};
                }
                if (loc1.getName() == "集積地棲姫-壊")
                {
                    return {"id":loc2, "message":"マタ…キタノカ……。モウ……カエレッ…ヨォ………ッ！", "offsetX":25, "offsetY":0, "voice":33265610, "stype":"敵基地"};
                }
            }
            return null;
        }

        public static function initEnemyVoice(arg1:battle.models.BattleData):void
        {
            var loc8:*=0;
            var loc5:*=null;
            var loc2:*=0;
            var loc3:*=null;
            var loc1:*=arg1.baseData.areaID;
            var loc7:*=arg1.baseData.mapID;
            var loc4:*=arg1.enemyShips;
            var loc6:*=arg1.combatData.getBossDamaged() == 1;
            if (loc1 != 33)
            {
                if (loc1 != 34)
                {
                    loc8 = 0;
                    while (loc8 < loc4.length)
                    {
                        if ((loc5 = battle.vo.EnemyShipData(loc4[loc8])) != null)
                        {
                            loc2 = loc5.getCharaID();
                            loc3 = loc5.getName();
                            if (loc7 != 35)
                            {
                                if (loc7 != 45)
                                {
                                    if (loc7 != 61)
                                    {
                                        if (loc7 == 64)
                                        {
                                            if (loc3 != "砲台小鬼")
                                            {
                                                if (loc3 == "離島棲姫")
                                                {
                                                    loc5.setVoiceIDs([6466820], [6466830], 0);
                                                }
                                            }
                                            else
                                            {
                                                loc5.setVoiceIDs([6466520], [6466530], 0);
                                            }
                                        }
                                    }
                                    else if (loc2 == 585 && loc5.index == 0)
                                    {
                                        loc5.setVoiceIDs([6105851, 6105852], [6105853], 0);
                                    }
                                }
                                else if (loc2 == 573 && loc5.index == 0)
                                {
                                    loc5.setVoiceIDs([4505731], [4505731], 0);
                                }
                                else if (loc2 == 613 && loc5.index == 0)
                                {
                                    loc5.setVoiceIDs([4506131], [4505731], 0);
                                }
                            }
                            else if ((loc2 == 587 || loc2 == 589) && loc5.index == 0)
                            {
                                loc5.setVoiceIDs([3505871, 3505872], [3505873], 0);
                            }
                            else if ((loc2 == 588 || loc2 == 590) && loc5.index == 0)
                            {
                                loc5.setVoiceIDs([3505881, 3505882], [3505883], 0);
                            }
                        }
                        ++loc8;
                    }
                }
                else
                {
                    _initEnemyVoice34(loc1, loc7, loc4, loc6);
                }
            }
            else
            {
                _initEnemyVoice33(loc1, loc7, loc4, loc6);
            }
            return;
        }

        private static function _initEnemyVoice33(arg1:int, arg2:int, arg3:__AS3__.vec.Vector.<battle.vo.BattleShipData>, arg4:Boolean):void
        {
            var loc4:*=0;
            var loc3:*=null;
            var loc1:*=0;
            var loc2:*=null;
            loc4 = 0;
            while (loc4 < arg3.length)
            {
                if ((loc3 = battle.vo.EnemyShipData(arg3[loc4])) != null)
                {
                    loc1 = loc3.getCharaID();
                    loc2 = loc3.getName();
                    if (arg2 == 331 && loc2 == "潜水棲姫" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([32464420], [32464430], 32464440);
                    }
                    else if (arg2 == 332 && loc2 == "集積地棲姫" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([33265320], [33265330], 33265340);
                    }
                    else if (arg2 == 332 && loc2 == "集積地棲姫-壊" && loc3.index == 0)
                    {
                        loc3.setVoiceIDs([33265620], [33265630], 33265640);
                    }
                    else if (arg2 == 333 && loc2 == "重巡棲姫" && loc3.index == 0)
                    {
                        if (loc1 == 659 || loc1 == 660 || loc1 == 661)
                        {
                            loc3.setVoiceIDs([33365920], [33365930], 33365940);
                        }
                        else if (loc1 == 662 || loc1 == 663 || loc1 == 664)
                        {
                            loc3.setVoiceIDs([33366220], [33366230], 33366240);
                        }
                    }
                    else if (loc2 != "駆逐棲姫")
                    {
                        if (loc2 != "水母棲姫")
                        {
                            if (loc2 != "PT小鬼群")
                            {
                                if (loc2 != "戦艦棲姫")
                                {
                                    if (loc2 == "空母棲姫")
                                    {
                                        loc3.setVoiceIDs([29405862], [29405863], 0);
                                    }
                                }
                                else
                                {
                                    loc3.setVoiceIDs([27605572], [27605573], 0);
                                }
                            }
                            else
                            {
                                loc3.setVoiceIDs([32263720], [32263730], 0);
                            }
                        }
                        else
                        {
                            loc3.setVoiceIDs([31306252], [31306253], 0);
                        }
                    }
                    else
                    {
                        loc3.setVoiceIDs([30505972], [30505973], 0);
                    }
                }
                ++loc4;
            }
            return;
        }

        public static const PHASE_D_SUPPORT_H:int=6;

        public static const PHASE_D_SUPPORT_R:int=7;

        public static const PHASE_D_KAIMAKU:int=8;

        public static const PHASE_D_HOUGEKI:int=9;

        public static const PHASE_D_RAIGEKI:int=10;

        public static const PHASE_D_END:int=11;

        public static const PHASE_Y_ATTACK:int=13;

        public static const PHASE_RESULT:int=15;

        public static const PHASE_ESCAPE:int=16;

        public static const SAKUTEKI_RESULT_01_SEIKOU:int=1;

        public static const SAKUTEKI_RESULT_02_SEIKOU_MIKIKAN:int=2;

        public static const SAKUTEKI_RESULT_03_MIKIKAN:int=3;

        public static const SAKUTEKI_RESULT_04_SIPPAI:int=4;

        public static const SAKUTEKI_RESULT_05_HAKKEN:int=5;

        public static const SAKUTEKI_RESULT_06_HAKKEN_DEKIZU:int=6;

        public static const SEIKU_KAKUHO:int=1;

        public static const SEIKU_YUSEI:int=2;

        public static const SEIKU_SOUSHITSU:int=4;

        public static const COMBATFORM_01_DOUKOU:int=1;

        public static const COMBATFORM_02_HANKOU:int=2;

        public static const COMBATFORM_03_T_JI_FRIEND:int=3;

        public static const COMBATFORM_04_T_JI_ENEMY:int=4;

        public static const HITFLG_NOATTACKED:int=-1;

        public static const HITFLG_MISS:int=0;

        public static const HITFLG_NORMAL:int=1;

        public static const HITFLG_CRITICAL:int=2;

        public static const HITFLG_KYOUSA:int=3;

        public static const ATTACK_TYPE_NORMAL:int=0;

        public static const ATTACK_TYPE_LASER:int=1;

        public static const ATTACK_TYPE_RENZOKU:int=2;

        public static const ATTACK_TYPE_TEI_SYU_FUK:int=3;

        public static const ATTACK_TYPE_TEI_DEN_SYU:int=4;

        public static const ATTACK_TYPE_TEI_SYU_TETSU:int=5;

        public static const ATTACK_TYPE_TEI_SYU_SYU:int=6;

        public static const PHASE_INITIALIZE:int=0;

        public static const ATTACK_TYPE_SEA:int=8;

        public static const ATTACK_TYPE_TORPEDO:int=9;

        public static const SPFLG_00_NORMAL:int=0;

        public static const SPFLG_01_RENZOKU:int=1;

        public static const SPFLG_02_SYU_RAI:int=2;

        public static const SPFLG_03_RAI_RAI:int=3;

        public static const ATTACK_TYPE_AIR:int=7;

        public static const SPFLG_05_SYU_SYU_SYU:int=5;

        public static const PHASE_PREBATTLE:int=1;

        public static const PHASE_D_SAKUTEKI:int=2;

        public static const PHASE_D_KOUKUU:int=3;

        public static const PHASE_D_SUPPORT:int=4;

        public static const PHASE_D_SUPPORT_K:int=5;

        public static const SPFLG_04_SYU_SYU_FUK:int=4;
    }
}


//    class BattleMain
package battle
{
    import flash.display.*;

    public class BattleMain extends flash.display.Sprite
    {
        public function BattleMain()
        {
            super();
            return;
        }
    }
}


//  package connection
//    package api_req_combined_battle
//      class GobackPortAPI
package connection.api_req_combined_battle
{
    import battle.models.*;
    import common.debug.*;
    import connection.*;
    import flash.events.*;

    public class GobackPortAPI extends connection.APIConnectionBase
    {
        public function GobackPortAPI(arg1:battle.models.BattleData)
        {
            super();
            _data = arg1;
            _API_NAME = "護衛艦退避";
            _url = "api_req_combined_battle/goback_port";
            return;
        }

        public override function load(arg1:flash.events.IEventDispatcher=null):void
        {
            var loc1:*=_data.baseData.getEmulateData(_url);
            if (loc1 != null)
            {
                common.debug.Debug.log("[Emulate]" + _API_NAME);
                _handleLoadComplete(null, loc1);
                if (arg1)
                {
                    arg1.dispatchEvent(new flash.events.Event(COMPLETE));
                }
            }
            else
            {
                super.load(arg1);
            }
            return;
        }

        protected override function _handleLoadComplete(arg1:flash.events.Event, arg2:Object):void
        {
            if (SettingFacade.DEBUG)
            {
                common.debug.Debug.log(API_NAME + "::" + JSON.stringify(arg2));
            }
            return;
        }

        private var _data:battle.models.BattleData;
    }
}


//    package battle
//      class BattleDayToNightAPI
package connection.battle
{
    import battle.models.*;
    import common.debug.*;
    import connection.*;
    import flash.events.*;

    public class BattleDayToNightAPI extends connection.APIConnectionBase
    {
        public function BattleDayToNightAPI(arg1:battle.models.BattleData)
        {
            super();
            _data = arg1;
            if (_data.baseData.isCombinedFriend())
            {
                _API_NAME = "昼戦から夜戦へ(連合艦隊)";
                _url = "api_req_combined_battle/midnight_battle";
            }
            else
            {
                _API_NAME = "昼戦から夜戦へ(通常艦隊)";
                _url = "api_req_battle_midnight/battle";
            }
            return;
        }

        protected override function _preLoad():void
        {
            _urlVariables["api_recovery_type"] = _data.baseData.marchingType;
            return;
        }

        public override function load(arg1:flash.events.IEventDispatcher=null):void
        {
            var loc1:*=_data.baseData.getEmulateData(_url);
            if (loc1 != null)
            {
                common.debug.Debug.log("[Emulate]" + _API_NAME);
                _handleLoadComplete(null, loc1);
                if (arg1)
                {
                    arg1.dispatchEvent(new flash.events.Event(COMPLETE));
                }
            }
            else
            {
                super.load(arg1);
            }
            return;
        }

        protected override function _handleLoadComplete(arg1:flash.events.Event, arg2:Object):void
        {
            if (SettingFacade.DEBUG)
            {
                common.debug.Debug.log(JSON.stringify(arg2));
            }
            _data.setNightData(_url, arg2);
            return;
        }

        private var _data:battle.models.BattleData;
    }
}


//      class BattleStartAerialWarfareAPI
package connection.battle
{
    import battle.models.*;
    import common.debug.*;
    import connection.*;
    import flash.events.*;

    public class BattleStartAerialWarfareAPI extends connection.APIConnectionBase
    {
        public function BattleStartAerialWarfareAPI(arg1:battle.models.BattleData)
        {
            super();
            _data = arg1;
            if (_data.baseData.isCombinedFriend())
            {
                _API_NAME = "戦闘開始(連合艦隊 - 航空戦)";
                _url = "api_req_combined_battle/airbattle";
            }
            else
            {
                _API_NAME = "戦闘開始(通常艦隊 - 航空戦)";
                _url = "api_req_sortie/airbattle";
            }
            return;
        }

        public override function load(arg1:flash.events.IEventDispatcher=null):void
        {
            var loc1:*=_data.baseData.getEmulateData(_url);
            if (loc1 != null)
            {
                common.debug.Debug.log("[Emulate]" + _API_NAME);
                _handleLoadComplete(null, loc1);
                if (arg1)
                {
                    arg1.dispatchEvent(new flash.events.Event(COMPLETE));
                }
            }
            else
            {
                super.load(arg1);
            }
            return;
        }

        protected override function _preLoad():void
        {
            _urlVariables["api_formation"] = _data.baseData.formationID;
            _urlVariables["api_recovery_type"] = _data.baseData.marchingType;
            var loc3:*=_data.baseData.underwayReplenishment;
            if (loc3 != -1)
            {
                _urlVariables["api_supply_flag"] = loc3;
            }
            var loc1:*=_data.baseData.ration;
            if (loc1 != -1)
            {
                _urlVariables["api_ration_flag"] = loc1;
            }
            var loc2:*=Assets.CreateURLVariablesClass;
            if (loc2)
            {
                new loc2().register(_urlVariables);
            }
            return;
        }

        protected override function _handleLoadComplete(arg1:flash.events.Event, arg2:Object):void
        {
            if (SettingFacade.DEBUG)
            {
                common.debug.Debug.log(JSON.stringify(arg2));
            }
            _data.setCommonData(arg2);
            _data.setDayData(_url, arg2);
            return;
        }

        private var _data:battle.models.BattleData;
    }
}


//      class BattleStartDayAPI
package connection.battle
{
    import battle.models.*;
    import common.debug.*;
    import connection.*;
    import flash.events.*;

    public class BattleStartDayAPI extends connection.APIConnectionBase
    {
        public function BattleStartDayAPI(arg1:battle.models.BattleData)
        {
            var loc1:*=0;
            super();
            _data = arg1;
            if (_data.baseData.isCombinedFriend())
            {
                loc1 = _data.baseData.getCombinedType();
                if (loc1 != 1)
                {
                    if (loc1 != 2)
                    {
                        if (loc1 == 3)
                        {
                            _API_NAME = "戦闘開始(連合艦隊-輸送部隊)";
                            _url = "api_req_combined_battle/battle";
                        }
                    }
                    else
                    {
                        _API_NAME = "戦闘開始(連合艦隊-水上部隊)";
                        _url = "api_req_combined_battle/battle_water";
                    }
                }
                else
                {
                    _API_NAME = "戦闘開始(連合艦隊-機動部隊)";
                    _url = "api_req_combined_battle/battle";
                }
            }
            else
            {
                _API_NAME = "戦闘開始";
                _url = "api_req_sortie/battle";
            }
            return;
        }

        protected override function _preLoad():void
        {
            _urlVariables["api_formation"] = _data.baseData.formationID;
            _urlVariables["api_recovery_type"] = _data.baseData.marchingType;
            var loc3:*=_data.baseData.underwayReplenishment;
            if (loc3 != -1)
            {
                _urlVariables["api_supply_flag"] = loc3;
            }
            var loc1:*=_data.baseData.ration;
            if (loc1 != -1)
            {
                _urlVariables["api_ration_flag"] = loc1;
            }
            var loc2:*=Assets.CreateURLVariablesClass;
            if (loc2)
            {
                new loc2().register(_urlVariables);
            }
            return;
        }

        public override function load(arg1:flash.events.IEventDispatcher=null):void
        {
            var loc1:*=_data.baseData.getEmulateData(_url);
            if (loc1 != null)
            {
                common.debug.Debug.log("[Emulate]" + _API_NAME);
                _handleLoadComplete(null, loc1);
                if (arg1)
                {
                    arg1.dispatchEvent(new flash.events.Event(COMPLETE));
                }
            }
            else
            {
                super.load(arg1);
            }
            return;
        }

        protected override function _handleLoadComplete(arg1:flash.events.Event, arg2:Object):void
        {
            if (SettingFacade.DEBUG)
            {
                common.debug.Debug.log(JSON.stringify(arg2));
            }
            _data.setCommonData(arg2);
            _data.setDayData(_url, arg2);
            return;
        }

        private var _data:battle.models.BattleData;
    }
}


//      class BattleStartLongDistanceAirRaidAPI
package connection.battle
{
    import battle.models.*;
    import common.debug.*;
    import connection.*;
    import flash.events.*;

    public class BattleStartLongDistanceAirRaidAPI extends connection.APIConnectionBase
    {
        public function BattleStartLongDistanceAirRaidAPI(arg1:battle.models.BattleData)
        {
            super();
            _data = arg1;
            if (_data.baseData.isCombinedFriend())
            {
                _API_NAME = "長距離空襲戦開始(連合艦隊)";
                _url = "api_req_combined_battle/ld_airbattle";
            }
            else
            {
                _API_NAME = "長距離空襲戦開始(通常艦隊)";
                _url = "api_req_sortie/ld_airbattle";
            }
            return;
        }

        public override function load(arg1:flash.events.IEventDispatcher=null):void
        {
            var loc1:*=_data.baseData.getEmulateData(_url);
            if (loc1 != null)
            {
                common.debug.Debug.log("[Emulate]" + _API_NAME);
                _handleLoadComplete(null, loc1);
                if (arg1)
                {
                    arg1.dispatchEvent(new flash.events.Event(COMPLETE));
                }
            }
            else
            {
                super.load(arg1);
            }
            return;
        }

        protected override function _preLoad():void
        {
            _urlVariables["api_formation"] = _data.baseData.formationID;
            _urlVariables["api_recovery_type"] = _data.baseData.marchingType;
            var loc3:*=_data.baseData.underwayReplenishment;
            if (loc3 != -1)
            {
                _urlVariables["api_supply_flag"] = loc3;
            }
            var loc1:*=_data.baseData.ration;
            if (loc1 != -1)
            {
                _urlVariables["api_ration_flag"] = loc1;
            }
            var loc2:*=Assets.CreateURLVariablesClass;
            if (loc2)
            {
                new loc2().register(_urlVariables);
            }
            return;
        }

        protected override function _handleLoadComplete(arg1:flash.events.Event, arg2:Object):void
        {
            if (SettingFacade.DEBUG)
            {
                common.debug.Debug.log(JSON.stringify(arg2));
            }
            _data.setCommonData(arg2);
            _data.setDayData(_url, arg2);
            return;
        }

        private var _data:battle.models.BattleData;
    }
}


//      class BattleStartNightAPI
package connection.battle
{
    import battle.models.*;
    import common.debug.*;
    import connection.*;
    import flash.events.*;

    public class BattleStartNightAPI extends connection.APIConnectionBase
    {
        public function BattleStartNightAPI(arg1:battle.models.BattleData)
        {
            super();
            _data = arg1;
            if (_data.baseData.isCombinedFriend())
            {
                _API_NAME = "戦闘開始(連合艦隊 - 夜戦のみ)";
                _url = "api_req_combined_battle/sp_midnight";
            }
            else
            {
                _API_NAME = "戦闘開始(通常艦隊 - 夜戦のみ)";
                _url = "api_req_battle_midnight/sp_midnight";
            }
            return;
        }

        protected override function _preLoad():void
        {
            _urlVariables["api_formation"] = _data.baseData.formationID;
            _urlVariables["api_recovery_type"] = _data.baseData.marchingType;
            var loc2:*=_data.baseData.underwayReplenishment;
            if (loc2 != -1)
            {
                _urlVariables["api_supply_flag"] = loc2;
            }
            var loc1:*=_data.baseData.ration;
            if (loc1 != -1)
            {
                _urlVariables["api_ration_flag"] = loc1;
            }
            return;
        }

        public override function load(arg1:flash.events.IEventDispatcher=null):void
        {
            var loc1:*=_data.baseData.getEmulateData(_url);
            if (loc1 != null)
            {
                common.debug.Debug.log("[Emulate]" + _API_NAME);
                _handleLoadComplete(null, loc1);
                if (arg1)
                {
                    arg1.dispatchEvent(new flash.events.Event(COMPLETE));
                }
            }
            else
            {
                super.load(arg1);
            }
            return;
        }

        protected override function _handleLoadComplete(arg1:flash.events.Event, arg2:Object):void
        {
            if (SettingFacade.DEBUG)
            {
                common.debug.Debug.log(JSON.stringify(arg2));
            }
            _data.setCommonData(arg2);
            _data.setNightData(_url, arg2);
            return;
        }

        private var _data:battle.models.BattleData;
    }
}


//      class PracticeDayToNightAPI
package connection.battle
{
    import battle.models.*;
    import common.debug.*;
    import connection.*;
    import flash.events.*;

    public class PracticeDayToNightAPI extends connection.APIConnectionBase
    {
        public function PracticeDayToNightAPI(arg1:battle.models.BattleData)
        {
            super();
            _data = arg1;
            _API_NAME = "昼戦から夜戦へ(演習)";
            _url = "api_req_practice/midnight_battle";
            return;
        }

        public override function load(arg1:flash.events.IEventDispatcher=null):void
        {
            var loc1:*=_data.baseData.getEmulateData(_url);
            if (loc1 != null)
            {
                common.debug.Debug.log("[Emulate]" + _API_NAME);
                _handleLoadComplete(null, loc1);
                if (arg1)
                {
                    arg1.dispatchEvent(new flash.events.Event(COMPLETE));
                }
            }
            else
            {
                super.load(arg1);
            }
            return;
        }

        protected override function _handleLoadComplete(arg1:flash.events.Event, arg2:Object):void
        {
            if (SettingFacade.DEBUG)
            {
                common.debug.Debug.log(JSON.stringify(arg2));
            }
            _data.setNightData(_url, arg2);
            return;
        }

        private var _data:battle.models.BattleData;
    }
}


//      class PracticeStartDayAPI
package connection.battle
{
    import battle.models.*;
    import common.debug.*;
    import connection.*;
    import flash.events.*;

    public class PracticeStartDayAPI extends connection.APIConnectionBase
    {
        public function PracticeStartDayAPI(arg1:battle.models.BattleData)
        {
            super();
            _data = arg1;
            _API_NAME = "戦闘開始(演習)";
            _url = "api_req_practice/battle";
            return;
        }

        protected override function _preLoad():void
        {
            _urlVariables.api_deck_id = _data.baseData.deckID;
            _urlVariables.api_formation_id = _data.baseData.formationID;
            _urlVariables.api_enemy_id = _data.baseData.enemyID;
            var loc1:*=Assets.CreateURLVariablesClass;
            if (loc1)
            {
                new loc1().register(_urlVariables);
            }
            return;
        }

        public override function load(arg1:flash.events.IEventDispatcher=null):void
        {
            var loc1:*=_data.baseData.getEmulateData(_url);
            if (loc1 != null)
            {
                common.debug.Debug.log("[Emulate]" + _API_NAME);
                _handleLoadComplete(null, loc1);
                if (arg1)
                {
                    arg1.dispatchEvent(new flash.events.Event(COMPLETE));
                }
            }
            else
            {
                super.load(arg1);
            }
            return;
        }

        protected override function _handleLoadComplete(arg1:flash.events.Event, arg2:Object):void
        {
            if (SettingFacade.DEBUG)
            {
                common.debug.Debug.log(JSON.stringify(arg2));
            }
            _data.setCommonData(arg2);
            _data.setDayData(_url, arg2);
            return;
        }

        private var _data:battle.models.BattleData;
    }
}


//  package fl
//    package motion
//      class AdjustColor
package fl.motion
{
    public class AdjustColor extends Object
    {
        public function AdjustColor()
        {
            super();
            return;
        }

        public function set brightness(arg1:Number):void
        {
            if (this.m_brightnessMatrix == null)
            {
                this.m_brightnessMatrix = new fl.motion.ColorMatrix();
            }
            if (arg1 != 0)
            {
                this.m_brightnessMatrix.SetBrightnessMatrix(arg1);
            }
            return;
        }

        public function set contrast(arg1:Number):void
        {
            var loc1:*=arg1;
            if (arg1 != 0)
            {
                if (arg1 > 0)
                {
                    loc1 = s_arrayOfDeltaIndex[int(arg1)] * 127 + 127;
                }
                else
                {
                    loc1 = arg1 / 100 * 127 + 127;
                }
            }
            else
            {
                loc1 = 127;
            }
            if (this.m_contrastMatrix == null)
            {
                this.m_contrastMatrix = new fl.motion.ColorMatrix();
            }
            this.m_contrastMatrix.SetContrastMatrix(loc1);
            return;
        }

        public function set saturation(arg1:Number):void
        {
            var loc1:*=arg1;
            if (arg1 != 0)
            {
                if (arg1 > 0)
                {
                    loc1 = 1 + 3 * arg1 / 100;
                }
                else
                {
                    loc1 = arg1 / 100 + 1;
                }
            }
            else
            {
                loc1 = 1;
            }
            if (this.m_saturationMatrix == null)
            {
                this.m_saturationMatrix = new fl.motion.ColorMatrix();
            }
            this.m_saturationMatrix.SetSaturationMatrix(loc1);
            return;
        }

        public function set hue(arg1:Number):void
        {
            if (this.m_hueMatrix == null)
            {
                this.m_hueMatrix = new fl.motion.ColorMatrix();
            }
            if (arg1 != 0)
            {
                this.m_hueMatrix.SetHueMatrix(arg1 * Math.PI / 180);
            }
            return;
        }

        public function AllValuesAreSet():Boolean
        {
            return this.m_brightnessMatrix && this.m_contrastMatrix && this.m_saturationMatrix && this.m_hueMatrix;
        }

        public function CalculateFinalFlatArray():Array
        {
            if (this.CalculateFinalMatrix())
            {
                return this.m_finalMatrix.GetFlatArray();
            }
            return null;
        }

        private function CalculateFinalMatrix():Boolean
        {
            if (!this.AllValuesAreSet())
            {
                return false;
            }
            this.m_finalMatrix = new fl.motion.ColorMatrix();
            this.m_finalMatrix.Multiply(this.m_brightnessMatrix);
            this.m_finalMatrix.Multiply(this.m_contrastMatrix);
            this.m_finalMatrix.Multiply(this.m_saturationMatrix);
            this.m_finalMatrix.Multiply(this.m_hueMatrix);
            return true;
        }


        {
            s_arrayOfDeltaIndex = [0, 0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.2, 0.21, 0.22, 0.24, 0.25, 0.27, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.53, 0.56, 0.59, 0.62, 0.65, 0.68, 0.71, 0.74, 0.77, 0.8, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98, 1, 1.06, 1.12, 1.18, 1.24, 1.3, 1.36, 1.42, 1.48, 1.54, 1.6, 1.66, 1.72, 1.78, 1.84, 1.9, 1.96, 2, 2.12, 2.25, 2.37, 2.5, 2.62, 2.75, 2.87, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.3, 4.7, 4.9, 5, 5.5, 6, 6.5, 6.8, 7, 7.3, 7.5, 7.8, 8, 8.4, 8.7, 9, 9.4, 9.6, 9.8, 10];
        }

        private var m_brightnessMatrix:fl.motion.ColorMatrix;

        private var m_contrastMatrix:fl.motion.ColorMatrix;

        private var m_saturationMatrix:fl.motion.ColorMatrix;

        private var m_hueMatrix:fl.motion.ColorMatrix;

        private var m_finalMatrix:fl.motion.ColorMatrix;

        private static var s_arrayOfDeltaIndex:Array;
    }
}


//      class Animator
package fl.motion
{
    import flash.display.*;
    import flash.geom.*;

    public class Animator extends fl.motion.AnimatorBase
    {
        public function Animator(arg1:XML=null, arg2:flash.display.DisplayObject=null)
        {
            this.motion = new fl.motion.Motion(arg1);
            super(arg1, arg2);
            return;
        }

        public override function set motion(arg1:fl.motion.MotionBase):void
        {
            super.motion = arg1;
            var loc1:*=arg1 as fl.motion.Motion;
            if (loc1 && loc1.source && loc1.source.transformationPoint)
            {
                this.transformationPoint = loc1.source.transformationPoint.clone();
            }
            return;
        }

        protected override function setTargetState():void
        {
            this.targetState.scaleX = this._target.scaleX;
            this.targetState.scaleY = this._target.scaleY;
            this.targetState.skewX = fl.motion.MatrixTransformer.getSkewX(this._target.transform.matrix);
            this.targetState.skewY = fl.motion.MatrixTransformer.getSkewY(this._target.transform.matrix);
            this.targetState.bounds = this._target.getBounds(this._target);
            this.initTransformPointInternal(this._target.transform.matrix);
            this.targetState.z = 0;
            var loc1:*;
            this.targetState.rotationY = loc1 = 0;
            this.targetState.rotationX = loc1;
            return;
        }

        private function initTransformPointInternal(arg1:flash.geom.Matrix):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc4:*=null;
            var loc1:*=this.targetState.bounds;
            if (this.transformationPoint)
            {
                loc2 = this.transformationPoint.x * loc1.width + loc1.left;
                loc3 = this.transformationPoint.y * loc1.height + loc1.top;
                this.targetState.transformPointInternal = new flash.geom.Point(loc2, loc3);
                loc4 = arg1.transformPoint(this.targetState.transformPointInternal);
                this.targetState.x = loc4.x;
                this.targetState.y = loc4.y;
            }
            else
            {
                this.targetState.transformPointInternal = new flash.geom.Point(0, 0);
                this.targetState.x = this._target.x;
                this.targetState.y = this._target.y;
            }
            return;
        }

        protected override function setTimeClassic(arg1:int, arg2:fl.motion.MotionBase, arg3:fl.motion.KeyframeBase):Boolean
        {
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc5:*=null;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=null;
            var loc11:*=false;
            var loc12:*=null;
            var loc13:*=NaN;
            var loc14:*=NaN;
            var loc15:*=NaN;
            var loc16:*=NaN;
            var loc17:*=NaN;
            var loc18:*=null;
            var loc19:*=NaN;
            var loc1:*;
            if (!(loc1 = arg2 as fl.motion.Motion))
            {
                return false;
            }
            var loc2:*;
            if (loc2 = loc1.getMatrix(arg1))
            {
                if (!motionArray || !_lastMatrixApplied || !matricesEqual(loc2, _lastMatrixApplied))
                {
                    this._target.transform.matrix = loc2;
                    _lastMatrixApplied = loc2;
                }
            }
            else
            {
                if (motionArray && !(loc1 == _lastMotionUsed))
                {
                    this.transformationPoint = loc1.motion_internal::transformationPoint ? loc1.motion_internal::transformationPoint : new flash.geom.Point(0.5, 0.5);
                    this.initTransformPointInternal(loc1.motion_internal::initialMatrix);
                    _lastMotionUsed = loc1;
                }
                loc3 = loc1.getValue(arg1, fl.motion.Tweenables.X);
                loc4 = loc1.getValue(arg1, fl.motion.Tweenables.Y);
                loc5 = new flash.geom.Point(loc3, loc4);
                if (this.positionMatrix)
                {
                    loc5 = this.positionMatrix.transformPoint(loc5);
                }
                loc5.x = loc5.x + this.targetState.x;
                loc5.y = loc5.y + this.targetState.y;
                loc6 = loc1.getValue(arg1, fl.motion.Tweenables.SCALE_X) * this.targetState.scaleX;
                loc7 = loc1.getValue(arg1, fl.motion.Tweenables.SCALE_Y) * this.targetState.scaleY;
                loc8 = 0;
                loc9 = 0;
                if (this.orientToPath)
                {
                    loc15 = loc1.getValue(arg1 + 1, fl.motion.Tweenables.X);
                    loc16 = loc1.getValue(arg1 + 1, fl.motion.Tweenables.Y);
                    loc17 = Math.atan2(loc16 - loc4, loc15 - loc3) * 180 / Math.PI;
                    if (!isNaN(loc17))
                    {
                        loc8 = loc17 + this.targetState.skewX;
                        loc9 = loc17 + this.targetState.skewY;
                    }
                }
                else
                {
                    loc8 = loc1.getValue(arg1, fl.motion.Tweenables.SKEW_X) + this.targetState.skewX;
                    loc9 = loc1.getValue(arg1, fl.motion.Tweenables.SKEW_Y) + this.targetState.skewY;
                }
                loc10 = new flash.geom.Matrix(loc6 * Math.cos(loc9 * Math.PI / 180), loc6 * Math.sin(loc9 * Math.PI / 180), (-loc7) * Math.sin(loc8 * Math.PI / 180), loc7 * Math.cos(loc8 * Math.PI / 180), 0, 0);
                loc11 = false;
                if (loc1.useRotationConcat(arg1))
                {
                    loc18 = new flash.geom.Matrix();
                    loc19 = loc1.getValue(arg1, fl.motion.Tweenables.ROTATION_CONCAT);
                    loc18.rotate(loc19);
                    loc10.concat(loc18);
                    loc11 = true;
                }
                loc10.tx = loc5.x;
                loc10.ty = loc5.y;
                loc12 = loc10.transformPoint(this.targetState.transformPointInternal);
                loc13 = loc10.tx - loc12.x;
                loc14 = loc10.ty - loc12.y;
                loc10.tx = loc10.tx + loc13;
                loc10.ty = loc10.ty + loc14;
                if (!motionArray || !_lastMatrixApplied || !matricesEqual(loc10, _lastMatrixApplied))
                {
                    if (!loc11)
                    {
                        this._target.rotation = loc9;
                    }
                    this._target.transform.matrix = loc10;
                    if (loc11 && this._target.scaleX == 0 && this._target.scaleY == 0)
                    {
                        this._target.scaleX = loc6;
                        this._target.scaleY = loc7;
                    }
                    _lastMatrixApplied = loc10;
                }
            }
            if (!(_lastCacheAsBitmapApplied == arg3.cacheAsBitmap) || !_cacheAsBitmapHasBeenApplied)
            {
                this._target.cacheAsBitmap = arg3.cacheAsBitmap;
                _cacheAsBitmapHasBeenApplied = true;
                _lastCacheAsBitmapApplied = arg3.cacheAsBitmap;
            }
            return true;
        }

        public static function fromXMLString(arg1:String, arg2:flash.display.DisplayObject=null):fl.motion.Animator
        {
            return new Animator(new XML(arg1), arg2);
        }

        public static function matricesEqual(arg1:flash.geom.Matrix, arg2:flash.geom.Matrix):Boolean
        {
            return arg1.a == arg2.a && arg1.b == arg2.b && arg1.c == arg2.c && arg1.d == arg2.d && arg1.tx == arg2.tx && arg1.ty == arg2.ty;
        }
    }
}


//      class Animator3D
package fl.motion
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.geom.*;

    public class Animator3D extends fl.motion.AnimatorBase
    {
        public function Animator3D(arg1:XML=null, arg2:flash.display.DisplayObject=null)
        {
            super(arg1, arg2);
            this.transformationPoint = new flash.geom.Point(0, 0);
            this._initialPosition = null;
            this._initialMatrixOfTarget = null;
            this._isAnimator3D = true;
            return;
        }

        public override function set initialPosition(arg1:Array):void
        {
            if (arg1.length == 3)
            {
                this._initialPosition = new flash.geom.Vector3D();
                this._initialPosition.x = arg1[0];
                this._initialPosition.y = arg1[1];
                this._initialPosition.z = arg1[2];
            }
            return;
        }

        protected override function setTargetState():void
        {
            if (!motionArray && !(this._target.transform.matrix == null))
            {
                this._initialMatrixOfTarget = convertMatrixToMatrix3D(this._target.transform.matrix);
            }
            return;
        }

        protected override function setTime3D(arg1:int, arg2:fl.motion.MotionBase):Boolean
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=NaN;
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=null;
            var loc11:*=null;
            var loc1:*=arg2.getMatrix3D(arg1) as flash.geom.Matrix3D;
            if (motionArray && !(arg2 == _lastMotionUsed))
            {
                this.transformationPoint = arg2.motion_internal::transformationPoint ? arg2.motion_internal::transformationPoint : new flash.geom.Point(0, 0);
                if (arg2.motion_internal::initialPosition)
                {
                    this.initialPosition = arg2.motion_internal::initialPosition;
                }
                else
                {
                    this._initialPosition = null;
                }
                _lastMotionUsed = arg2;
            }
            if (loc1)
            {
                if (!motionArray || !_lastMatrix3DApplied || !matrices3DEqual(loc1, flash.geom.Matrix3D(_lastMatrix3DApplied)))
                {
                    loc2 = loc1.clone();
                    if (this._initialMatrixOfTarget)
                    {
                        loc2.append(this._initialMatrixOfTarget);
                    }
                    this._target.transform.matrix3D = loc2;
                    _lastMatrix3DApplied = loc1;
                }
                return true;
            }
            if (arg2.is3D)
            {
                loc3 = new flash.geom.Matrix3D();
                loc4 = arg2.getValue(arg1, fl.motion.Tweenables.ROTATION_X) * Math.PI / 180;
                loc5 = arg2.getValue(arg1, fl.motion.Tweenables.ROTATION_Y) * Math.PI / 180;
                loc6 = arg2.getValue(arg1, fl.motion.Tweenables.ROTATION_CONCAT) * Math.PI / 180;
                loc3.prepend(fl.motion.MatrixTransformer3D.rotateAboutAxis(loc6, fl.motion.MatrixTransformer3D.AXIS_Z));
                loc3.prepend(fl.motion.MatrixTransformer3D.rotateAboutAxis(loc5, fl.motion.MatrixTransformer3D.AXIS_Y));
                loc3.prepend(fl.motion.MatrixTransformer3D.rotateAboutAxis(loc4, fl.motion.MatrixTransformer3D.AXIS_X));
                loc7 = arg2.getValue(arg1, fl.motion.Tweenables.X);
                loc8 = arg2.getValue(arg1, fl.motion.Tweenables.Y);
                loc9 = arg2.getValue(arg1, fl.motion.Tweenables.Z);
                if (!(getSign(loc7) == 0) || !(getSign(loc8) == 0) || !(getSign(loc9) == 0))
                {
                    loc3.appendTranslation(loc7, loc8, loc9);
                }
                loc3.prependTranslation(-this.transformationPoint.x, -this.transformationPoint.y, -this.transformationPointZ);
                if (this._initialPosition)
                {
                    loc3.appendTranslation(this._initialPosition.x, this._initialPosition.y, this._initialPosition.z);
                }
                loc10 = this.getScaleSkewMatrix(arg2, arg1, this.transformationPoint.x, this.transformationPoint.y);
                loc11 = convertMatrixToMatrix3D(loc10);
                loc3.prepend(loc11);
                if (this._initialMatrixOfTarget)
                {
                    loc3.append(this._initialMatrixOfTarget);
                }
                if (!motionArray || !_lastMatrix3DApplied || !matrices3DEqual(loc3, flash.geom.Matrix3D(_lastMatrix3DApplied)))
                {
                    this._target.transform.matrix3D = loc3;
                    _lastMatrix3DApplied = loc3;
                }
            }
            return false;
        }

        protected override function removeChildTarget(arg1:flash.display.MovieClip, arg2:flash.display.DisplayObject, arg3:String):void
        {
            super.removeChildTarget(arg1, arg2, arg3);
            if (arg2.transform.matrix3D != null)
            {
                arg2.transform.matrix = IDENTITY_MATRIX;
            }
            return;
        }

        private function getScaleSkewMatrix(arg1:fl.motion.MotionBase, arg2:int, arg3:Number, arg4:Number):flash.geom.Matrix
        {
            var loc1:*=arg1.getValue(arg2, fl.motion.Tweenables.SCALE_X);
            var loc2:*=arg1.getValue(arg2, fl.motion.Tweenables.SCALE_Y);
            var loc3:*=arg1.getValue(arg2, fl.motion.Tweenables.SKEW_X);
            var loc4:*=arg1.getValue(arg2, fl.motion.Tweenables.SKEW_Y);
            var loc5:*;
            (loc5 = new flash.geom.Matrix()).translate(-arg3, -arg4);
            var loc6:*;
            (loc6 = new flash.geom.Matrix()).scale(loc1, loc2);
            loc5.concat(loc6);
            var loc7:*;
            (loc7 = new flash.geom.Matrix()).a = Math.cos(loc4 * Math.PI / 180);
            loc7.b = Math.sin(loc4 * Math.PI / 180);
            loc7.c = -Math.sin(loc3 * Math.PI / 180);
            loc7.d = Math.cos(loc3 * Math.PI / 180);
            loc5.concat(loc7);
            loc5.translate(arg3, arg4);
            return loc5;
        }

        protected static function getSign(arg1:Number):int
        {
            return arg1 < -EPSILON ? -1 : arg1 > EPSILON ? 1 : 0;
        }

        protected static function convertMatrixToMatrix3D(arg1:flash.geom.Matrix):flash.geom.Matrix3D
        {
            var loc1:*=new Vector.<Number>(16);
            loc1[0] = arg1.a;
            loc1[1] = arg1.b;
            loc1[2] = 0;
            loc1[3] = 0;
            loc1[4] = arg1.c;
            loc1[5] = arg1.d;
            loc1[6] = 0;
            loc1[7] = 0;
            loc1[8] = 0;
            loc1[9] = 0;
            loc1[10] = 1;
            loc1[11] = 0;
            loc1[12] = arg1.tx;
            loc1[13] = arg1.ty;
            loc1[14] = 0;
            loc1[15] = 1;
            return new flash.geom.Matrix3D(loc1);
        }

        protected static function matrices3DEqual(arg1:flash.geom.Matrix3D, arg2:flash.geom.Matrix3D):Boolean
        {
            var loc1:*=arg1.rawData;
            var loc2:*=arg2.rawData;
            if (loc1 == null || !(loc1.length == 16) || loc2 == null || !(loc2.length == 16))
            {
                return false;
            }
            var loc3:*=0;
            while (loc3 < 16)
            {
                if (loc1[loc3] != loc2[loc3])
                {
                    return false;
                }
                ++loc3;
            }
            return true;
        }


        {
            IDENTITY_MATRIX = new flash.geom.Matrix();
        }

        protected static const EPSILON:Number=1e-008;

        private var _initialPosition:flash.geom.Vector3D;

        private var _initialMatrixOfTarget:flash.geom.Matrix3D;

        private static var IDENTITY_MATRIX:flash.geom.Matrix;
    }
}


//      class AnimatorBase
package fl.motion
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;

    public class AnimatorBase extends flash.events.EventDispatcher
    {
        public function AnimatorBase(arg1:XML=null, arg2:flash.display.DisplayObject=null)
        {
            super();
            this.target = arg2;
            this._isAnimator3D = false;
            this.transformationPoint = new flash.geom.Point(0.5, 0.5);
            this.transformationPointZ = 0;
            this._sceneName = "";
            this._toRemove = new Array();
            this._lastFrameHandled = -1;
            this._lastSceneHandled = null;
            this._registeredParent = false;
            return;
        }

        public function get isPlaying():Boolean
        {
            return this._isPlaying;
        }

        public function get time():int
        {
            return this._time;
        }

        public function set time(arg1:int):void
        {
            var loc2:*=null;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=null;
            var loc8:*=null;
            if (arg1 == this._time)
            {
                return;
            }
            if (this._placeholderName)
            {
                if (!(loc5 = this._targetParent[this._placeholderName]))
                {
                    loc5 = this._targetParent.getChildByName(this._placeholderName);
                }
                if (loc5 && loc5.parent == this._targetParent && this._target.parent == this._targetParent)
                {
                    this._targetParent.addChildAt(this._target, this._targetParent.getChildIndex(loc5) + 1);
                }
            }
            var loc1:*=this.motion;
            if (loc1)
            {
                if (arg1 > loc1.duration - 1)
                {
                    arg1 = loc1.duration - 1;
                }
                else if (arg1 < 0)
                {
                    arg1 = 0;
                }
                this._time = arg1;
            }
            else
            {
                loc2 = this.motionArray;
                if (arg1 <= this._spanStart)
                {
                    loc1 = loc2[0];
                    arg1 = this._spanStart;
                }
                else if (arg1 >= this._spanEnd)
                {
                    loc1 = loc2[loc2.length - 1];
                    arg1 = this._spanEnd;
                }
                else
                {
                    loc6 = 0;
                    while (loc6 < loc2.length)
                    {
                        loc1 = loc2[loc6];
                        if (arg1 <= loc1.motion_internal::spanStart + loc1.duration - 1)
                        {
                        };
                        ++loc6;
                    }
                }
                this._time = arg1;
                arg1 = arg1 - loc1.motion_internal::spanStart;
            }
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.TIME_CHANGE));
            var loc3:*;
            var loc4:*;
            if (loc4 = (loc3 = loc1.getCurrentKeyframe(arg1)).index == this._lastRenderedTime && (!loc2 || this._lastRenderedMotion == loc1) && !loc3.tweensLength)
            {
                return;
            }
            if (loc3.blank)
            {
                this._target.visible = false;
            }
            else
            {
                if (this._isAnimator3D)
                {
                    this._lastMatrixApplied = null;
                    this.setTime3D(arg1, loc1);
                }
                else
                {
                    this._lastMatrix3DApplied = null;
                    this.setTimeClassic(arg1, loc1, loc3);
                }
                loc7 = loc1.getColorTransform(arg1);
                if (loc2)
                {
                    if (!loc7 && this._lastColorTransformApplied)
                    {
                        loc7 = new flash.geom.ColorTransform();
                    }
                    if (loc7 && (!this._lastColorTransformApplied || !colorTransformsEqual(loc7, this._lastColorTransformApplied)))
                    {
                        this._target.transform.colorTransform = loc7;
                        this._lastColorTransformApplied = loc7;
                    }
                }
                else if (loc7)
                {
                    this._target.transform.colorTransform = loc7;
                }
                loc8 = loc1.getFilters(arg1);
                if (loc2 && !loc8 && this._filtersApplied)
                {
                    this._target.filters = null;
                    this._filtersApplied = false;
                }
                else if (loc8)
                {
                    this._target.filters = loc8;
                    this._filtersApplied = true;
                }
                if (!loc2 || !(this._lastBlendModeApplied == loc3.blendMode))
                {
                    this._target.blendMode = loc3.blendMode;
                    this._lastBlendModeApplied = loc3.blendMode;
                }
                if (!loc2 || !(this._lastOpaqueBackgroundApplied == loc3.opaqueBackground) || !this._opaqueBackgroundHasBeenApplied)
                {
                    this._target.opaqueBackground = loc3.opaqueBackground;
                    this._opaqueBackgroundHasBeenApplied = true;
                    this._lastOpaqueBackgroundApplied = loc3.opaqueBackground;
                }
                if (!loc2 || !(this._lastVisibleApplied == loc3.visible) || !this._visibleHasBeenApplied)
                {
                    this._target.visible = loc3.visible;
                    this._visibleHasBeenApplied = true;
                    this._lastVisibleApplied = loc3.visible;
                }
            }
            this._lastRenderedTime = arg1;
            this._lastRenderedMotion = loc1;
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.MOTION_UPDATE));
            return;
        }

        public function get motion():fl.motion.MotionBase
        {
            return this._motion;
        }

        public function set motion(arg1:fl.motion.MotionBase):void
        {
            this._motion = arg1;
            if (arg1)
            {
                if (this.motionArray)
                {
                    var loc1:*;
                    this._spanEnd = loc1 = -1;
                    this._spanStart = loc1;
                }
                this.motionArray = null;
            }
            return;
        }

        public function get motionArray():Array
        {
            return this._motionArray;
        }

        public function set motionArray(arg1:Array):void
        {
            var loc1:*=0;
            this._motionArray = arg1 && arg1.length > 0 ? arg1 : null;
            if (this._motionArray)
            {
                this.motion = null;
                this._spanStart = this._motionArray[0].motion_internal::spanStart;
                this._spanEnd = this._spanStart - 1;
                loc1 = 0;
                while (loc1 < this._motionArray.length)
                {
                    this._spanEnd = this._spanEnd + this._motionArray[loc1].duration;
                    ++loc1;
                }
            }
            return;
        }

        public function get target():flash.display.DisplayObject
        {
            return this._target;
        }

        public function set target(arg1:flash.display.DisplayObject):void
        {
            if (!arg1)
            {
                return;
            }
            this._target = arg1;
            if (arg1 != this._lastTarget)
            {
                this._lastColorTransformApplied = null;
                this._filtersApplied = false;
                this._lastBlendModeApplied = null;
                this._cacheAsBitmapHasBeenApplied = false;
                this._opaqueBackgroundHasBeenApplied = false;
                this._visibleHasBeenApplied = false;
                this._lastMatrixApplied = null;
                this._lastMatrix3DApplied = null;
                this._toRemove = new Array();
            }
            this._lastTarget = arg1;
            var loc1:*=false;
            if (this.targetParent && !(this.targetName == ""))
            {
                if (this.targetStateOriginal)
                {
                    this.targetState = this.targetStateOriginal;
                    return;
                }
                loc1 = true;
            }
            this.targetState = {};
            this.setTargetState();
            if (loc1)
            {
                this.targetStateOriginal = this.targetState;
            }
            return;
        }

        protected function setTargetState():void
        {
            return;
        }

        public function set initialPosition(arg1:Array):void
        {
            return;
        }

        public function rewind():void
        {
            this.time = this.motionArray ? this._spanStart : 0;
            return;
        }

        protected function setTime3D(arg1:int, arg2:fl.motion.MotionBase):Boolean
        {
            return false;
        }

        public function useCurrentFrame(arg1:Boolean, arg2:int):void
        {
            this._useCurrentFrame = arg1;
            if (!this.motionArray)
            {
                this._spanStart = arg2;
            }
            return;
        }

        protected function setTimeClassic(arg1:int, arg2:fl.motion.MotionBase, arg3:fl.motion.KeyframeBase):Boolean
        {
            return false;
        }

        public function get targetParent():flash.display.DisplayObjectContainer
        {
            return this._targetParent;
        }

        public function set targetParent(arg1:flash.display.DisplayObjectContainer):void
        {
            this._targetParent = arg1;
            return;
        }

        public function get targetParentButton():flash.display.SimpleButton
        {
            return this._targetParentBtn;
        }

        public function set targetParentButton(arg1:flash.display.SimpleButton):*
        {
            this._targetParentBtn = arg1;
            return;
        }

        public function get targetName():String
        {
            return this._targetName;
        }

        public function set targetName(arg1:String):void
        {
            this._targetName = arg1;
            return;
        }

        public function get placeholderName():String
        {
            return this._placeholderName;
        }

        public function set placeholderName(arg1:String):void
        {
            this._placeholderName = arg1;
            return;
        }

        public function get instanceFactoryClass():Class
        {
            return this._instanceFactoryClass;
        }

        public function set instanceFactoryClass(arg1:Class):void
        {
            var f:Class;

            var loc1:*;
            f = arg1;
            if (f == this._instanceFactoryClass)
            {
                return;
            }
            this._instanceFactoryClass = f;
            try
            {
                this.instanceFactory = (loc2 = this._instanceFactoryClass)["getSingleton"]();
            }
            catch (e:Error)
            {
                instanceFactory = null;
            }
            return;
        }

        public function get usingCurrentFrame():Boolean
        {
            return this._useCurrentFrame;
        }

        public function get spanStart():int
        {
            return this._spanStart;
        }

        public function get spanEnd():int
        {
            if (this._spanEnd >= 0)
            {
                return this._spanEnd;
            }
            if (this._motion && this._motion.duration > 0)
            {
                return this._spanStart + this._motion.duration - 1;
            }
            return this._spanStart;
        }

        public function get sceneName():String
        {
            return this._sceneName;
        }

        public function set sceneName(arg1:String):void
        {
            this._sceneName = arg1;
            return;
        }

        private function handleEnterFrame(arg1:flash.events.Event):void
        {
            var loc1:*=null;
            if (this._registeredParent)
            {
                loc1 = this._targetParent as flash.display.MovieClip;
                if (loc1 == null)
                {
                    return;
                }
                if (!this.usingCurrentFrame || !(loc1.currentFrame == this._lastFrameHandled) || !(loc1.currentScene.name == this._lastSceneHandled) || this.target == null && !(this.instanceFactoryClass == null))
                {
                    processCurrentFrame(loc1, this, false);
                }
                this.removeChildren();
                this._lastFrameHandled = loc1.currentFrame;
                this._lastSceneHandled = loc1.currentScene.name;
            }
            else
            {
                this.nextFrame();
            }
            return;
        }

        private function removeChildren():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=0;
            while (loc1 < this._toRemove.length)
            {
                loc2 = this._toRemove[loc1];
                if (loc2.target == this._target || !(loc2.target.parent == this._targetParent))
                {
                    this._toRemove.splice(loc1, 1);
                    continue;
                }
                loc3 = flash.display.MovieClip(this._targetParent);
                if (loc2.currentFrame == loc3.currentFrame && (loc3.scenes.length <= 1 || loc2.currentSceneName == loc3.currentScene.name))
                {
                    ++loc1;
                    continue;
                }
                this.removeChildTarget(loc3, loc2.target, loc2.target.name);
                this._toRemove.splice(loc1, 1);
            }
            return;
        }

        protected function removeChildTarget(arg1:flash.display.MovieClip, arg2:flash.display.DisplayObject, arg3:String):void
        {
            arg1.removeChild(arg2);
            if (arg1.hasOwnProperty(arg3) && arg1[arg3] == arg2)
            {
                arg1[arg3] = null;
            }
            this._lastColorTransformApplied = null;
            this._filtersApplied = false;
            this._lastBlendModeApplied = null;
            this._cacheAsBitmapHasBeenApplied = false;
            this._opaqueBackgroundHasBeenApplied = false;
            this._visibleHasBeenApplied = false;
            this._lastMatrixApplied = null;
            this._lastMatrix3DApplied = null;
            return;
        }

        public function get frameEvent():String
        {
            return this._frameEvent;
        }

        public function set frameEvent(arg1:String):void
        {
            this._frameEvent = arg1;
            return;
        }

        public function get targetState3D():Array
        {
            return this._targetState3D;
        }

        public function set targetState3D(arg1:Array):void
        {
            this._targetState3D = arg1;
            return;
        }

        public function nextFrame(arg1:Boolean=false, arg2:Boolean=true):void
        {
            if (this.motionArray && this.time >= this.spanEnd || !this.motionArray && this.time >= this.motion.duration - 1)
            {
                this.handleLastFrame(arg1, arg2);
            }
            else
            {
                var loc1:*;
                var loc2:*=((loc1 = this).time + 1);
                loc1.time = loc2;
            }
            return;
        }

        public function play(arg1:int=-1, arg2:Boolean=true):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (!this._isPlaying)
            {
                if (this._target == null && this._targetParent && !(this._targetName == ""))
                {
                    loc1 = this._targetParent.hasOwnProperty(this._targetName) ? this._targetParent[this._targetName] : this._targetParent.getChildByName(this._targetName);
                    if (!(this.instanceFactory == null))
                    {
                        this.instanceFactory == null;
                        var loc4:*;
                    }
                    if (this.instanceFactory == null)
                    {
                        this.target = loc1;
                    }
                    if (!this.target)
                    {
                        loc1 = this._targetParent.getChildByName(this._targetName);
                        if (this.instanceFactory == null || (loc4 = this.instanceFactory)["isTargetForFrame"](loc1, arg1, this.sceneName))
                        {
                            this.target = loc1;
                        }
                        if (!this.target && this._placeholderName && this.instanceFactory)
                        {
                            if (loc2 = (loc4 = this.instanceFactory)["getInstance"](this._targetParent, this._targetName, arg1, this.sceneName))
                            {
                                loc2.name = this._targetName;
                                this._targetParent[this._targetName] = loc2;
                                if (!(loc3 = this._targetParent[this._placeholderName]))
                                {
                                    loc3 = this._targetParent.getChildByName(this._placeholderName);
                                }
                                if (loc3)
                                {
                                    this._targetParent.addChildAt(loc2, this._targetParent.getChildIndex(loc3) + 1);
                                }
                                else
                                {
                                    this._targetParent.addChild(loc2);
                                }
                                this.target = loc2;
                            }
                        }
                    }
                }
                if (arg2)
                {
                    enterFrameBeacon.addEventListener(this.frameEvent, this.handleEnterFrame, false, 0, true);
                }
                if (!this.target)
                {
                    return;
                }
                this._isPlaying = true;
            }
            this.playCount = 0;
            if (arg1 > -1)
            {
                this.time = arg1;
            }
            else
            {
                this.rewind();
            }
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.MOTION_START));
            return;
        }

        public function end(arg1:Boolean=false, arg2:Boolean=true, arg3:Boolean=false):void
        {
            var loc1:*=null;
            if (arg2)
            {
                enterFrameBeacon.removeEventListener(this.frameEvent, this.handleEnterFrame);
            }
            this._isPlaying = false;
            this.playCount = 0;
            if (this.autoRewind)
            {
                this.rewind();
            }
            else if (this.motion && !(this.time == this.motion.duration - 1))
            {
                this.time = this.motion.duration - 1;
            }
            else if (this.motionArray && !(this.time == this._spanEnd))
            {
                this.time = this._spanEnd;
            }
            if (arg1)
            {
                if (this._targetParent && !(this._targetName == ""))
                {
                    if (this._target && this.instanceFactory && this._targetParent is flash.display.MovieClip && this._targetParent == this._target.parent)
                    {
                        if (arg3)
                        {
                            this.removeChildTarget(flash.display.MovieClip(this._targetParent), this._target, this._targetName);
                        }
                        else
                        {
                            loc1 = flash.display.MovieClip(this._targetParent);
                            this._toRemove.push({"target":this._target, "currentFrame":loc1.currentFrame, "currentSceneName":loc1.currentScene.name});
                        }
                    }
                    this._target = null;
                }
                this._lastRenderedTime = -1;
                this._time = -1;
            }
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.MOTION_END));
            return;
        }

        public function stop():void
        {
            enterFrameBeacon.removeEventListener(this.frameEvent, this.handleEnterFrame);
            this._isPlaying = false;
            this.playCount = 0;
            this.rewind();
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.MOTION_END));
            return;
        }

        public function pause():void
        {
            enterFrameBeacon.removeEventListener(this.frameEvent, this.handleEnterFrame);
            this._isPlaying = false;
            return;
        }

        public function resume():void
        {
            enterFrameBeacon.addEventListener(this.frameEvent, this.handleEnterFrame, false, 0, true);
            this._isPlaying = true;
            return;
        }

        public function startFrameEvents():void
        {
            enterFrameBeacon.addEventListener(this.frameEvent, this.handleEnterFrame, false, 0, true);
            return;
        }

        private function placeholderButtonEnterFrameHandler(arg1:flash.events.Event):void
        {
            var loc2:*=null;
            if (this._targetParentBtn == null || this.instanceFactory == null)
            {
                this._target.removeEventListener(this.frameEvent, this.placeholderButtonEnterFrameHandler);
                return;
            }
            var loc3:*;
            var loc1:*=(loc3 = this.instanceFactory)["getInstance"](this._targetParentBtn, this._targetName, this._spanStart);
            if (loc1 == null)
            {
                return;
            }
            this._target.removeEventListener(this.frameEvent, this.placeholderButtonEnterFrameHandler);
            if (this._target.parent == null || flash.display.DisplayObject(this._target.parent) == this._targetParentBtn)
            {
                loc3 = this._spanStart;
                switch (loc3)
                {
                    case 1:
                    {
                        this._targetParentBtn.overState = loc1;
                        break;
                    }
                    case 2:
                    {
                        this._targetParentBtn.downState = loc1;
                        break;
                    }
                    case 3:
                    {
                        this._targetParentBtn.hitTestState = loc1;
                        break;
                    }
                    default:
                    {
                        this._targetParentBtn.upState = loc1;
                        break;
                    }
                }
            }
            else
            {
                loc2 = this._target.parent as flash.display.DisplayObjectContainer;
                if (loc2 != null)
                {
                    loc2.addChildAt(loc1, loc2.getChildIndex(this._target) + 1);
                    loc2.removeChild(this._target);
                }
            }
            this.target = loc1;
            this.time = 0;
            return;
        }

        private function placeholderSpriteEnterFrameHandler(arg1:flash.events.Event):void
        {
            if (this._targetParent == null || this.instanceFactory == null)
            {
                this._target.removeEventListener(this.frameEvent, this.placeholderSpriteEnterFrameHandler);
                return;
            }
            var loc2:*;
            var loc1:*=(loc2 = this.instanceFactory)["getInstance"](this._targetParent, this._targetName, 0);
            if (loc1 == null)
            {
                return;
            }
            loc1.name = this._targetName;
            this._targetParent[this._targetName] = loc1;
            this._target.removeEventListener(this.frameEvent, this.placeholderSpriteEnterFrameHandler);
            this._targetParent[this._placeholderName] = null;
            this._targetParent.addChildAt(loc1, this._targetParent.getChildIndex(this._target) + 1);
            this._targetParent.removeChild(this._target);
            this.target = loc1;
            this.time = 0;
            return;
        }

        private function handleLastFrame(arg1:Boolean=false, arg2:Boolean=true):void
        {
            var loc1:*;
            var loc2:*=((loc1 = this).playCount + 1);
            loc1.playCount = loc2;
            if (this.repeatCount == 0 || this.playCount < this.repeatCount)
            {
                this.rewind();
            }
            else
            {
                this.end(arg1, arg2, false);
            }
            return;
        }

        protected static function colorTransformsEqual(arg1:flash.geom.ColorTransform, arg2:flash.geom.ColorTransform):Boolean
        {
            return arg1.alphaMultiplier == arg2.alphaMultiplier && arg1.alphaOffset == arg2.alphaOffset && arg1.blueMultiplier == arg2.blueMultiplier && arg1.blueOffset == arg2.blueOffset && arg1.greenMultiplier == arg2.greenMultiplier && arg1.greenOffset == arg2.greenOffset && arg1.redMultiplier == arg2.redMultiplier && arg1.redOffset == arg2.redOffset;
        }

        public static function registerParentFrameHandler(arg1:flash.display.MovieClip, arg2:fl.motion.AnimatorBase, arg3:int, arg4:int=0, arg5:Boolean=false):void
        {
            arg2._registeredParent = true;
            if (arg3 == -1)
            {
                arg3 = arg1.currentFrame - 1;
            }
            if (arg5)
            {
                arg2.useCurrentFrame(true, arg3);
            }
            else
            {
                arg2.repeatCount = arg4;
            }
            return;
        }

        public static function processCurrentFrame(arg1:flash.display.MovieClip, arg2:fl.motion.AnimatorBase, arg3:Boolean, arg4:Boolean=false):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (arg2 && arg1)
            {
                if (arg2.usingCurrentFrame)
                {
                    loc1 = arg1.currentFrame - 1;
                    if (arg1.scenes.length > 1)
                    {
                        if (arg1.currentScene.name != arg2.sceneName)
                        {
                            loc1 = -1;
                        }
                    }
                    if (loc1 >= arg2.spanStart && loc1 <= arg2.spanEnd)
                    {
                        loc2 = arg2.motionArray ? loc1 : loc1 - arg2.spanStart;
                        if (arg2.isPlaying)
                        {
                            if (!arg4)
                            {
                                if (loc1 != arg2.spanEnd)
                                {
                                    arg2.time = loc2;
                                }
                                else
                                {
                                    arg2.handleLastFrame(true, false);
                                }
                            }
                        }
                        else
                        {
                            arg2.play(loc2, arg3);
                        }
                    }
                    else if (arg2.isPlaying && !arg4)
                    {
                        arg2.end(true, false, true);
                    }
                    else if (!arg2.isPlaying && arg4)
                    {
                        arg2.startFrameEvents();
                    }
                }
                else if (arg2.targetParent && (arg2.targetParent.hasOwnProperty(arg2.targetName) && arg2.targetParent[arg2.targetName] == null || arg2.targetParent.getChildByName(arg2.targetName) == null))
                {
                    if (arg2.isPlaying)
                    {
                        arg2.end(true, false);
                    }
                    else if (arg4)
                    {
                        arg2.startFrameEvents();
                    }
                }
                else if (arg2.isPlaying)
                {
                    if (!arg4)
                    {
                        arg2.nextFrame(false, false);
                    }
                }
                else if (arg4)
                {
                    arg2.play(0, arg3);
                }
            }
            return;
        }

        public static function registerButtonState(arg1:flash.display.SimpleButton, arg2:fl.motion.AnimatorBase, arg3:int, arg4:int=-1, arg5:String=null, arg6:String=null, arg7:Class=null):void
        {
            var targetParentBtn:flash.display.SimpleButton;
            var anim:fl.motion.AnimatorBase;
            var stateFrame:int;
            var zIndex:int=-1;
            var targetName:String=null;
            var placeholderName:String=null;
            var instanceFactoryClass:Class=null;
            var target:flash.display.DisplayObject;
            var newTarget:flash.display.DisplayObject;
            var container:flash.display.DisplayObjectContainer;

            var loc1:*;
            newTarget = null;
            container = null;
            targetParentBtn = arg1;
            anim = arg2;
            stateFrame = arg3;
            zIndex = arg4;
            targetName = arg5;
            placeholderName = arg6;
            instanceFactoryClass = arg7;
            target = targetParentBtn.upState;
            var loc2:*=stateFrame;
            switch (loc2)
            {
                case 1:
                {
                    target = targetParentBtn.overState;
                    break;
                }
                case 2:
                {
                    target = targetParentBtn.downState;
                    break;
                }
                case 3:
                {
                    target = targetParentBtn.hitTestState;
                    break;
                }
            }
            if (!target)
            {
                return;
            }
            if (zIndex >= 0)
            {
                try
                {
                    container = flash.display.DisplayObjectContainer(target);
                    newTarget = container.getChildAt(zIndex);
                }
                catch (e:Error)
                {
                    newTarget = null;
                }
                if (newTarget != null)
                {
                    target = newTarget;
                }
            }
            anim.target = target;
            if (!(placeholderName == null) && !(instanceFactoryClass == null))
            {
                anim.targetParentButton = targetParentBtn;
                anim.targetName = targetName;
                anim.instanceFactoryClass = instanceFactoryClass;
                anim.useCurrentFrame(true, stateFrame);
                anim.target.addEventListener(anim.frameEvent, anim.placeholderButtonEnterFrameHandler, false, 0, true);
                anim.placeholderButtonEnterFrameHandler(null);
            }
            else
            {
                anim.time = 0;
            }
            return;
        }

        public static function registerSpriteParent(arg1:flash.display.Sprite, arg2:fl.motion.AnimatorBase, arg3:String, arg4:String=null, arg5:Class=null):void
        {
            var loc1:*=null;
            if (arg1 == null || arg2 == null || arg3 == null)
            {
                return;
            }
            if (!(arg4 == null) && !(arg5 == null))
            {
                if ((loc1 = arg1[arg4]) == null)
                {
                    loc1 = arg1.getChildByName(arg4);
                }
                arg2.target = loc1;
                arg2.targetParent = arg1;
                arg2.targetName = arg3;
                arg2.placeholderName = arg4;
                arg2.instanceFactoryClass = arg5;
                arg2.useCurrentFrame(true, 0);
                arg2.target.addEventListener(arg2.frameEvent, arg2.placeholderSpriteEnterFrameHandler, false, 0, true);
                arg2.placeholderSpriteEnterFrameHandler(null);
            }
            else
            {
                if ((loc1 = arg1[arg3]) == null)
                {
                    loc1 = arg1.getChildByName(arg3);
                }
                arg2.target = loc1;
                arg2.time = 0;
            }
            return;
        }


        {
            enterFrameBeacon = new flash.display.MovieClip();
        }

        protected var _lastColorTransformApplied:flash.geom.ColorTransform;

        protected var _filtersApplied:Boolean;

        protected var _lastBlendModeApplied:String;

        protected var _cacheAsBitmapHasBeenApplied:Boolean;

        protected var _lastCacheAsBitmapApplied:Boolean;

        protected var _opaqueBackgroundHasBeenApplied:Boolean;

        protected var _lastOpaqueBackgroundApplied:Object;

        private var _useCurrentFrame:Boolean=false;

        private var instanceFactory:Object=null;

        protected var _visibleHasBeenApplied:Boolean;

        private var _spanStart:int=-1;

        private var _spanEnd:int=-1;

        protected var _lastMatrixApplied:flash.geom.Matrix;

        protected var _lastMatrix3DApplied:Object;

        private var _sceneName:String="";

        protected var _toRemove:Array;

        protected var _lastFrameHandled:int;

        protected var _lastSceneHandled:String;

        protected var _registeredParent:Boolean;

        public var orientToPath:Boolean=false;

        private var _frameEvent:String="enterFrame";

        public var transformationPoint:flash.geom.Point;

        public var transformationPointZ:int;

        private var _targetState3D:Array=null;

        public var autoRewind:Boolean=false;

        public var positionMatrix:flash.geom.Matrix;

        protected var _isAnimator3D:Boolean;

        public var repeatCount:int=1;

        private var _isPlaying:Boolean=false;

        protected var _target:flash.display.DisplayObject;

        protected var _lastTarget:flash.display.DisplayObject;

        private var _lastRenderedTime:int=-1;

        private var _time:int=-1;

        private var _targetParent:flash.display.DisplayObjectContainer=null;

        private var _lastRenderedMotion:fl.motion.MotionBase=null;

        private var _targetParentBtn:flash.display.SimpleButton=null;

        private var _targetName:String="";

        private var playCount:int=0;

        protected var targetState:Object;

        private var targetStateOriginal:Object=null;

        private var _placeholderName:String=null;

        private var _instanceFactoryClass:Class=null;

        protected var _lastVisibleApplied:Boolean;

        private var _motion:fl.motion.MotionBase;

        private var _motionArray:Array;

        private static var enterFrameBeacon:flash.display.MovieClip;

        protected var _lastMotionUsed:fl.motion.MotionBase;
    }
}


//      class AnimatorFactoryBase
package fl.motion
{
    import flash.display.*;
    import flash.geom.*;
    import flash.utils.*;

    public class AnimatorFactoryBase extends Object
    {
        public function AnimatorFactoryBase(arg1:fl.motion.MotionBase, arg2:Array=null)
        {
            super();
            this._motion = arg1;
            this._motionArray = arg2;
            this._animators = new flash.utils.Dictionary(true);
            this._transformationPoint = new flash.geom.Point(0.5, 0.5);
            this._transformationPointZ = 0;
            this._is3D = false;
            this._sceneName = "";
            return;
        }

        public function get motion():fl.motion.MotionBase
        {
            return this._motion;
        }

        public function addTarget(arg1:flash.display.DisplayObject, arg2:int=0, arg3:Boolean=true, arg4:int=-1, arg5:Boolean=false):fl.motion.AnimatorBase
        {
            if (arg1)
            {
                return this.addTargetInfo(arg1.parent, arg1.name, arg2, arg3, arg4, arg5);
            }
            return null;
        }

        protected function getNewAnimator():fl.motion.AnimatorBase
        {
            return null;
        }

        public function addTargetInfo(arg1:flash.display.DisplayObject, arg2:String, arg3:int=0, arg4:Boolean=true, arg5:int=-1, arg6:Boolean=false, arg7:Array=null, arg8:int=-1, arg9:String=null, arg10:Class=null):fl.motion.AnimatorBase
        {
            var loc4:*=null;
            if (!(arg1 is flash.display.DisplayObjectContainer) && !(arg1 is flash.display.SimpleButton))
            {
                return null;
            }
            var loc1:*;
            if (!(loc1 = this._animators[arg1]))
            {
                loc1 = new flash.utils.Dictionary();
                this._animators[arg1] = loc1;
            }
            var loc2:*=loc1[arg2];
            var loc3:*=false;
            if (!loc2)
            {
                loc2 = this.getNewAnimator();
                if ((loc4 = flash.utils.getDefinitionByName("flash.events.Event") as Class).hasOwnProperty("FRAME_CONSTRUCTED"))
                {
                    loc2.frameEvent = "frameConstructed";
                }
                loc1[arg2] = loc2;
                loc3 = true;
            }
            loc2.motion = this._motion;
            loc2.motionArray = this._motionArray;
            loc2.transformationPoint = this._transformationPoint;
            loc2.transformationPointZ = this._transformationPointZ;
            loc2.sceneName = this._sceneName;
            if (loc3)
            {
                if (arg1 is flash.display.MovieClip)
                {
                    fl.motion.AnimatorBase.registerParentFrameHandler(arg1 as flash.display.MovieClip, loc2, arg5, arg3, arg6);
                }
            }
            if (arg1 is flash.display.MovieClip)
            {
                loc2.targetParent = flash.display.MovieClip(arg1);
                loc2.targetName = arg2;
                loc2.placeholderName = arg9;
                loc2.instanceFactoryClass = arg10;
            }
            else if (arg1 is flash.display.SimpleButton)
            {
                fl.motion.AnimatorBase.registerButtonState(arg1 as flash.display.SimpleButton, loc2, arg5, arg8, arg2, arg9, arg10);
            }
            else if (arg1 is flash.display.Sprite)
            {
                fl.motion.AnimatorBase.registerSpriteParent(arg1 as flash.display.Sprite, loc2, arg2, arg9, arg10);
            }
            if (arg7)
            {
                loc2.initialPosition = arg7;
            }
            if (arg4)
            {
                fl.motion.AnimatorBase.processCurrentFrame(arg1 as flash.display.MovieClip, loc2, true, true);
            }
            return loc2;
        }

        public function set transformationPoint(arg1:flash.geom.Point):void
        {
            this._transformationPoint = arg1;
            return;
        }

        public function set transformationPointZ(arg1:int):void
        {
            this._transformationPointZ = arg1;
            return;
        }

        public function set sceneName(arg1:String):void
        {
            this._sceneName = arg1;
            return;
        }

        private var _motion:fl.motion.MotionBase;

        private var _motionArray:Array;

        private var _animators:flash.utils.Dictionary;

        protected var _transformationPoint:flash.geom.Point;

        protected var _transformationPointZ:int;

        protected var _is3D:Boolean;

        protected var _sceneName:String;
    }
}


//      class AnimatorFactoryUniversal
package fl.motion
{
    public class AnimatorFactoryUniversal extends fl.motion.AnimatorFactoryBase
    {
        public function AnimatorFactoryUniversal(arg1:fl.motion.MotionBase, arg2:Array)
        {
            super(arg1, arg2);
            return;
        }

        protected override function getNewAnimator():fl.motion.AnimatorBase
        {
            return new fl.motion.AnimatorUniversal();
        }
    }
}


//      class AnimatorUniversal
package fl.motion
{
    import flash.geom.*;

    public class AnimatorUniversal extends fl.motion.Animator3D
    {
        public function AnimatorUniversal()
        {
            super(null, null);
            this._isAnimator3D = false;
            return;
        }

        protected override function setTargetState():void
        {
            super.setTargetState();
            this.targetState.scaleX = this._target.scaleX;
            this.targetState.scaleY = this._target.scaleY;
            this.targetState.skewX = fl.motion.MatrixTransformer.getSkewX(this._target.transform.matrix);
            this.targetState.skewY = fl.motion.MatrixTransformer.getSkewY(this._target.transform.matrix);
            this.targetState.bounds = this._target.getBounds(this._target);
            this.initTransformPointInternal(this._target.transform.matrix);
            this.targetState.z = 0;
            var loc1:*;
            this.targetState.rotationY = loc1 = 0;
            this.targetState.rotationX = loc1;
            return;
        }

        private function initTransformPointInternal(arg1:flash.geom.Matrix):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc4:*=null;
            var loc1:*=this.targetState.bounds;
            if (this.transformationPoint)
            {
                loc2 = this.transformationPoint.x * loc1.width + loc1.left;
                loc3 = this.transformationPoint.y * loc1.height + loc1.top;
                this.targetState.transformPointInternal = new flash.geom.Point(loc2, loc3);
                loc4 = arg1.transformPoint(this.targetState.transformPointInternal);
                this.targetState.x = loc4.x;
                this.targetState.y = loc4.y;
            }
            else
            {
                this.targetState.transformPointInternal = new flash.geom.Point(0, 0);
                this.targetState.x = this._target.x;
                this.targetState.y = this._target.y;
            }
            return;
        }

        protected override function setTimeClassic(arg1:int, arg2:fl.motion.MotionBase, arg3:fl.motion.KeyframeBase):Boolean
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc4:*=null;
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=null;
            var loc10:*=false;
            var loc11:*=null;
            var loc12:*=NaN;
            var loc13:*=NaN;
            var loc14:*=NaN;
            var loc15:*=NaN;
            var loc16:*=NaN;
            var loc17:*=null;
            var loc18:*=NaN;
            if (arg2.is3D)
            {
                _lastMatrixApplied = null;
                return setTime3D(arg1, arg2);
            }
            var loc1:*;
            if (loc1 = arg2.getMatrix(arg1))
            {
                if (!motionArray || !_lastMatrixApplied || !fl.motion.Animator.matricesEqual(loc1, _lastMatrixApplied))
                {
                    this._target.transform.matrix = loc1;
                    _lastMatrixApplied = loc1;
                }
            }
            else
            {
                if (motionArray && !(arg2 == _lastMotionUsed))
                {
                    this.transformationPoint = arg2.motion_internal::transformationPoint ? arg2.motion_internal::transformationPoint : new flash.geom.Point(0.5, 0.5);
                    this.initTransformPointInternal(arg2.motion_internal::initialMatrix);
                    _lastMotionUsed = arg2;
                }
                loc2 = arg2.getValue(arg1, fl.motion.Tweenables.X);
                loc3 = arg2.getValue(arg1, fl.motion.Tweenables.Y);
                loc4 = new flash.geom.Point(loc2, loc3);
                if (this.positionMatrix)
                {
                    loc4 = this.positionMatrix.transformPoint(loc4);
                }
                loc4.x = loc4.x + this.targetState.x;
                loc4.y = loc4.y + this.targetState.y;
                loc5 = arg2.getValue(arg1, fl.motion.Tweenables.SCALE_X) * this.targetState.scaleX;
                loc6 = arg2.getValue(arg1, fl.motion.Tweenables.SCALE_Y) * this.targetState.scaleY;
                loc7 = 0;
                loc8 = 0;
                if (this.orientToPath)
                {
                    loc14 = arg2.getValue(arg1 + 1, fl.motion.Tweenables.X);
                    loc15 = arg2.getValue(arg1 + 1, fl.motion.Tweenables.Y);
                    loc16 = Math.atan2(loc15 - loc3, loc14 - loc2) * 180 / Math.PI;
                    if (!isNaN(loc16))
                    {
                        loc7 = loc16 + this.targetState.skewX;
                        loc8 = loc16 + this.targetState.skewY;
                    }
                }
                else
                {
                    loc7 = arg2.getValue(arg1, fl.motion.Tweenables.SKEW_X) + this.targetState.skewX;
                    loc8 = arg2.getValue(arg1, fl.motion.Tweenables.SKEW_Y) + this.targetState.skewY;
                }
                loc9 = new flash.geom.Matrix(loc5 * Math.cos(loc8 * Math.PI / 180), loc5 * Math.sin(loc8 * Math.PI / 180), (-loc6) * Math.sin(loc7 * Math.PI / 180), loc6 * Math.cos(loc7 * Math.PI / 180), 0, 0);
                loc10 = false;
                if (arg2.useRotationConcat(arg1))
                {
                    loc17 = new flash.geom.Matrix();
                    loc18 = arg2.getValue(arg1, fl.motion.Tweenables.ROTATION_CONCAT);
                    loc17.rotate(loc18);
                    loc9.concat(loc17);
                    loc10 = true;
                }
                loc9.tx = loc4.x;
                loc9.ty = loc4.y;
                loc11 = loc9.transformPoint(this.targetState.transformPointInternal);
                loc12 = loc9.tx - loc11.x;
                loc13 = loc9.ty - loc11.y;
                loc9.tx = loc9.tx + loc12;
                loc9.ty = loc9.ty + loc13;
                if (!motionArray || !_lastMatrixApplied || !fl.motion.Animator.matricesEqual(loc9, _lastMatrixApplied))
                {
                    if (!loc10)
                    {
                        this._target.rotation = loc8;
                    }
                    this._target.transform.matrix = loc9;
                    if (loc10 && this._target.scaleX == 0 && this._target.scaleY == 0)
                    {
                        this._target.scaleX = loc5;
                        this._target.scaleY = loc6;
                    }
                    _lastMatrixApplied = loc9;
                }
            }
            if (!(_lastCacheAsBitmapApplied == arg3.cacheAsBitmap) || !_cacheAsBitmapHasBeenApplied)
            {
                this._target.cacheAsBitmap = arg3.cacheAsBitmap;
                _cacheAsBitmapHasBeenApplied = true;
                _lastCacheAsBitmapApplied = arg3.cacheAsBitmap;
            }
            return true;
        }
    }
}


//      class BezierEase
package fl.motion
{
    import flash.geom.*;

    public class BezierEase extends Object implements fl.motion.ITween
    {
        public function BezierEase(arg1:XML=null)
        {
            super();
            this.points = [];
            this.parseXML(arg1);
            return;
        }

        public function get target():String
        {
            return this._target;
        }

        public function set target(arg1:String):void
        {
            this._target = arg1;
            return;
        }

        private function parseXML(arg1:XML=null):fl.motion.BezierEase
        {
            var loc2:*=null;
            if (!arg1)
            {
                return this;
            }
            if (arg1.@target.length())
            {
                this.target = arg1.@target;
            }
            var loc1:*=arg1.elements();
            var loc3:*=0;
            var loc4:*=loc1;
            for each (loc2 in loc4)
            {
                this.points.push(new flash.geom.Point(Number(loc2.@x), Number(loc2.@y)));
            }
            return this;
        }

        public function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg4 <= 0)
            {
                return NaN;
            }
            var loc1:*;
            if ((loc1 = arg1 / arg4) <= 0)
            {
                return arg2;
            }
            if (loc1 >= 1)
            {
                return arg2 + arg3;
            }
            this.firstNode = new flash.geom.Point(0, arg2);
            this.lastNode = new flash.geom.Point(1, arg2 + arg3);
            var loc2:*;
            (loc2 = [this.firstNode].concat(this.points)).push(this.lastNode);
            var loc3:*;
            return loc3 = fl.motion.CustomEase.getYForPercent(loc1, loc2);
        }

        public var points:Array;

        private var firstNode:flash.geom.Point;

        private var lastNode:flash.geom.Point;

        private var _target:String="";
    }
}


//      class BezierSegment
package fl.motion
{
    import flash.geom.*;

    public class BezierSegment extends Object
    {
        public function BezierSegment(arg1:flash.geom.Point, arg2:flash.geom.Point, arg3:flash.geom.Point, arg4:flash.geom.Point)
        {
            super();
            this.a = arg1;
            this.b = arg2;
            this.c = arg3;
            this.d = arg4;
            return;
        }

        public function getValue(arg1:Number):flash.geom.Point
        {
            var loc1:*=this.a.x;
            var loc2:*=(arg1 * arg1 * (this.d.x - loc1) + 3 * (1 - arg1) * (arg1 * (this.c.x - loc1) + (1 - arg1) * (this.b.x - loc1))) * arg1 + loc1;
            var loc3:*=this.a.y;
            var loc4:*=(arg1 * arg1 * (this.d.y - loc3) + 3 * (1 - arg1) * (arg1 * (this.c.y - loc3) + (1 - arg1) * (this.b.y - loc3))) * arg1 + loc3;
            return new flash.geom.Point(loc2, loc4);
        }

        public function getYForX(arg1:Number, arg2:Array=null):Number
        {
            var loc4:*=NaN;
            if (this.a.x < this.d.x)
            {
                if (arg1 <= this.a.x + 1e-016)
                {
                    return this.a.y;
                }
                if (arg1 >= this.d.x - 1e-016)
                {
                    return this.d.y;
                }
            }
            else
            {
                if (arg1 >= this.a.x + 1e-016)
                {
                    return this.a.y;
                }
                if (arg1 <= this.d.x - 1e-016)
                {
                    return this.d.y;
                }
            }
            if (!arg2)
            {
                arg2 = getCubicCoefficients(this.a.x, this.b.x, this.c.x, this.d.x);
            }
            var loc1:*=getCubicRoots(arg2[0], arg2[1], arg2[2], arg2[3] - arg1);
            var loc2:*=NaN;
            if (loc1.length != 0)
            {
                if (loc1.length != 1)
                {
                    var loc5:*=0;
                    var loc6:*=loc1;
                    for each (loc4 in loc6)
                    {
                        if (!(0 <= loc4 && loc4 <= 1))
                        {
                            continue;
                        }
                        loc2 = loc4;
                        break;
                    }
                }
                else
                {
                    loc2 = loc1[0];
                }
            }
            else
            {
                loc2 = 0;
            }
            if (isNaN(loc2))
            {
                return NaN;
            }
            var loc3:*;
            return loc3 = getSingleValue(loc2, this.a.y, this.b.y, this.c.y, this.d.y);
        }

        public static function getSingleValue(arg1:Number, arg2:Number=0, arg3:Number=0, arg4:Number=0, arg5:Number=0):Number
        {
            return (arg1 * arg1 * (arg5 - arg2) + 3 * (1 - arg1) * (arg1 * (arg4 - arg2) + (1 - arg1) * (arg3 - arg2))) * arg1 + arg2;
        }

        public static function getCubicCoefficients(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Array
        {
            return [-arg1 + 3 * arg2 - 3 * arg3 + arg4, 3 * arg1 - 6 * arg2 + 3 * arg3, -3 * arg1 + 3 * arg2, arg1];
        }

        public static function getCubicRoots(arg1:Number=0, arg2:Number=0, arg3:Number=0, arg4:Number=0):Array
        {
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=NaN;
            var loc11:*=0;
            var loc12:*=NaN;
            if (!arg1)
            {
                return fl.motion.BezierSegment.getQuadraticRoots(arg2, arg3, arg4);
            }
            if (arg1 != 1)
            {
                arg2 = arg2 / arg1;
                arg3 = arg3 / arg1;
                arg4 = arg4 / arg1;
            }
            var loc1:*=(arg2 * arg2 - 3 * arg3) / 9;
            var loc2:*=loc1 * loc1 * loc1;
            var loc3:*=(2 * arg2 * arg2 * arg2 - 9 * arg2 * arg3 + 27 * arg4) / 54;
            var loc4:*;
            if ((loc4 = loc2 - loc3 * loc3) >= 0)
            {
                if (!loc1)
                {
                    return [0];
                }
                loc5 = Math.acos(loc3 / Math.sqrt(loc2));
                loc6 = Math.sqrt(loc1);
                loc7 = -2 * loc6 * Math.cos(loc5 / 3) - arg2 / 3;
                loc8 = -2 * loc6 * Math.cos((loc5 + 2 * Math.PI) / 3) - arg2 / 3;
                loc9 = -2 * loc6 * Math.cos((loc5 + 4 * Math.PI) / 3) - arg2 / 3;
                return [loc7, loc8, loc9];
            }
            loc10 = Math.pow(Math.sqrt(-loc4) + Math.abs(loc3), 1 / 3);
            return [loc12 = (-(loc11 = loc3 > 0 ? 1 : loc3 < 0 ? -1 : 0)) * (loc10 + loc1 / loc10) - arg2 / 3];
        }

        public static function getQuadraticRoots(arg1:Number, arg2:Number, arg3:Number):Array
        {
            var loc4:*=NaN;
            var loc1:*=[];
            if (!arg1)
            {
                if (!arg2)
                {
                    return [];
                }
                loc1[0] = (-arg3) / arg2;
                return loc1;
            }
            var loc2:*;
            var loc3:*;
            if ((loc3 = (loc2 = arg2 * arg2 - 4 * arg1 * arg3) > 0 ? 1 : loc2 < 0 ? -1 : 0) < 0)
            {
                return [];
            }
            if (loc3)
            {
                var loc5:*;
                loc1[1] = loc5 = (-arg2) / (2 * arg1);
                loc1[0] = loc5;
                loc4 = Math.sqrt(loc2) / (2 * arg1);
                loc1[0] = loc1[0] - loc4;
                loc1[1] = loc1[1] + loc4;
            }
            else
            {
                loc1[0] = (-arg2) / (2 * arg1);
            }
            return loc1;
        }

        public var a:flash.geom.Point;

        public var b:flash.geom.Point;

        public var c:flash.geom.Point;

        public var d:flash.geom.Point;
    }
}


//      class Color
package fl.motion
{
    import flash.display.*;
    import flash.geom.*;

    public class Color extends flash.geom.ColorTransform
    {
        public function Color(arg1:Number=1, arg2:Number=1, arg3:Number=1, arg4:Number=1, arg5:Number=0, arg6:Number=0, arg7:Number=0, arg8:Number=0)
        {
            super(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            return;
        }

        public function get brightness():Number
        {
            return this.redOffset ? 1 - this.redMultiplier : this.redMultiplier - 1;
        }

        public function set brightness(arg1:Number):void
        {
            if (arg1 > 1)
            {
                arg1 = 1;
            }
            else if (arg1 < -1)
            {
                arg1 = -1;
            }
            var loc1:*=1 - Math.abs(arg1);
            var loc2:*=0;
            if (arg1 > 0)
            {
                loc2 = arg1 * 255;
            }
            var loc3:*;
            this.blueMultiplier = loc3 = loc1;
            this.greenMultiplier = loc3 = loc3;
            this.redMultiplier = loc3;
            this.blueOffset = loc3 = loc2;
            this.greenOffset = loc3 = loc3;
            this.redOffset = loc3;
            return;
        }

        public function setTint(arg1:uint, arg2:Number):void
        {
            this._tintColor = arg1;
            this._tintMultiplier = arg2;
            var loc4:*;
            this.blueMultiplier = loc4 = 1 - arg2;
            this.greenMultiplier = loc4 = loc4;
            this.redMultiplier = loc4;
            var loc1:*=arg1 >> 16 & 255;
            var loc2:*=arg1 >> 8 & 255;
            var loc3:*=arg1 & 255;
            this.redOffset = Math.round(loc1 * arg2);
            this.greenOffset = Math.round(loc2 * arg2);
            this.blueOffset = Math.round(loc3 * arg2);
            return;
        }

        public function get tintColor():uint
        {
            return this._tintColor;
        }

        public function set tintColor(arg1:uint):void
        {
            this.setTint(arg1, this.tintMultiplier);
            return;
        }

        private function deriveTintColor():uint
        {
            var loc1:*=1 / this.tintMultiplier;
            var loc2:*=Math.round(this.redOffset * loc1);
            var loc3:*=Math.round(this.greenOffset * loc1);
            var loc4:*=Math.round(this.blueOffset * loc1);
            var loc5:*;
            return loc5 = loc2 << 16 | loc3 << 8 | loc4;
        }

        public function get tintMultiplier():Number
        {
            return this._tintMultiplier;
        }

        public function set tintMultiplier(arg1:Number):void
        {
            this.setTint(this.tintColor, arg1);
            return;
        }

        private function parseXML(arg1:XML=null):fl.motion.Color
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            if (!arg1)
            {
                return this;
            }
            var loc1:*=arg1.elements()[0];
            if (!loc1)
            {
                return this;
            }
            var loc5:*=0;
            var loc6:*=loc1.attributes();
            for each (loc2 in loc6)
            {
                if ((loc3 = loc2.localName()) == "tintColor")
                {
                    loc4 = Number(loc2.toString()) as uint;
                    this.tintColor = loc4;
                    continue;
                }
                this[loc3] = Number(loc2.toString());
            }
            return this;
        }

        public static function fromXML(arg1:XML):fl.motion.Color
        {
            return Color(new Color().parseXML(arg1));
        }

        public static function interpolateTransform(arg1:flash.geom.ColorTransform, arg2:flash.geom.ColorTransform, arg3:Number):flash.geom.ColorTransform
        {
            var loc1:*=1 - arg3;
            var loc2:*;
            return loc2 = new flash.geom.ColorTransform(arg1.redMultiplier * loc1 + arg2.redMultiplier * arg3, arg1.greenMultiplier * loc1 + arg2.greenMultiplier * arg3, arg1.blueMultiplier * loc1 + arg2.blueMultiplier * arg3, arg1.alphaMultiplier * loc1 + arg2.alphaMultiplier * arg3, arg1.redOffset * loc1 + arg2.redOffset * arg3, arg1.greenOffset * loc1 + arg2.greenOffset * arg3, arg1.blueOffset * loc1 + arg2.blueOffset * arg3, arg1.alphaOffset * loc1 + arg2.alphaOffset * arg3);
        }

        public static function interpolateColor(arg1:uint, arg2:uint, arg3:Number):uint
        {
            var loc1:*=1 - arg3;
            var loc2:*=arg1 >> 24 & 255;
            var loc3:*=arg1 >> 16 & 255;
            var loc4:*=arg1 >> 8 & 255;
            var loc5:*=arg1 & 255;
            var loc6:*=arg2 >> 24 & 255;
            var loc7:*=arg2 >> 16 & 255;
            var loc8:*=arg2 >> 8 & 255;
            var loc9:*=arg2 & 255;
            var loc10:*=loc2 * loc1 + loc6 * arg3;
            var loc11:*=loc3 * loc1 + loc7 * arg3;
            var loc12:*=loc4 * loc1 + loc8 * arg3;
            var loc13:*=loc5 * loc1 + loc9 * arg3;
            var loc14:*;
            return loc14 = loc10 << 24 | loc11 << 16 | loc12 << 8 | loc13;
        }

        private var _tintColor:Number=0;

        private var _tintMultiplier:Number=0;
    }
}


//      class ColorMatrix
package fl.motion
{
    public class ColorMatrix extends fl.motion.DynamicMatrix
    {
        public function ColorMatrix()
        {
            super(5, 5);
            LoadIdentity();
            return;
        }

        public function SetBrightnessMatrix(arg1:Number):void
        {
            if (!m_matrix)
            {
                return;
            }
            m_matrix[0][4] = arg1;
            m_matrix[1][4] = arg1;
            m_matrix[2][4] = arg1;
            return;
        }

        public function SetContrastMatrix(arg1:Number):void
        {
            if (!m_matrix)
            {
                return;
            }
            var loc1:*=0.5 * (127 - arg1);
            arg1 = arg1 / 127;
            m_matrix[0][0] = arg1;
            m_matrix[1][1] = arg1;
            m_matrix[2][2] = arg1;
            m_matrix[0][4] = loc1;
            m_matrix[1][4] = loc1;
            m_matrix[2][4] = loc1;
            return;
        }

        public function SetSaturationMatrix(arg1:Number):void
        {
            if (!m_matrix)
            {
                return;
            }
            var loc1:*=1 - arg1;
            var loc2:*=loc1 * LUMINANCER;
            m_matrix[0][0] = loc2 + arg1;
            m_matrix[1][0] = loc2;
            m_matrix[2][0] = loc2;
            loc2 = loc1 * LUMINANCEG;
            m_matrix[0][1] = loc2;
            m_matrix[1][1] = loc2 + arg1;
            m_matrix[2][1] = loc2;
            loc2 = loc1 * LUMINANCEB;
            m_matrix[0][2] = loc2;
            m_matrix[1][2] = loc2;
            m_matrix[2][2] = loc2 + arg1;
            return;
        }

        public function SetHueMatrix(arg1:Number):void
        {
            var loc10:*=0;
            if (!m_matrix)
            {
                return;
            }
            LoadIdentity();
            var loc1:*=new fl.motion.DynamicMatrix(3, 3);
            var loc2:*=new fl.motion.DynamicMatrix(3, 3);
            var loc3:*=new fl.motion.DynamicMatrix(3, 3);
            var loc4:*=Math.cos(arg1);
            var loc5:*=Math.sin(arg1);
            var loc6:*=0.213;
            var loc7:*=0.715;
            var loc8:*=0.072;
            loc1.SetValue(0, 0, loc6);
            loc1.SetValue(1, 0, loc6);
            loc1.SetValue(2, 0, loc6);
            loc1.SetValue(0, 1, loc7);
            loc1.SetValue(1, 1, loc7);
            loc1.SetValue(2, 1, loc7);
            loc1.SetValue(0, 2, loc8);
            loc1.SetValue(1, 2, loc8);
            loc1.SetValue(2, 2, loc8);
            loc2.SetValue(0, 0, 1 - loc6);
            loc2.SetValue(1, 0, -loc6);
            loc2.SetValue(2, 0, -loc6);
            loc2.SetValue(0, 1, -loc7);
            loc2.SetValue(1, 1, 1 - loc7);
            loc2.SetValue(2, 1, -loc7);
            loc2.SetValue(0, 2, -loc8);
            loc2.SetValue(1, 2, -loc8);
            loc2.SetValue(2, 2, 1 - loc8);
            loc2.MultiplyNumber(loc4);
            loc3.SetValue(0, 0, -loc6);
            loc3.SetValue(1, 0, 0.143);
            loc3.SetValue(2, 0, -(1 - loc6));
            loc3.SetValue(0, 1, -loc7);
            loc3.SetValue(1, 1, 0.14);
            loc3.SetValue(2, 1, loc7);
            loc3.SetValue(0, 2, 1 - loc8);
            loc3.SetValue(1, 2, -0.283);
            loc3.SetValue(2, 2, loc8);
            loc3.MultiplyNumber(loc5);
            loc1.Add(loc2);
            loc1.Add(loc3);
            var loc9:*=0;
            while (loc9 < 3)
            {
                loc10 = 0;
                while (loc10 < 3)
                {
                    m_matrix[loc9][loc10] = loc1.GetValue(loc9, loc10);
                    ++loc10;
                }
                ++loc9;
            }
            return;
        }

        public function GetFlatArray():Array
        {
            var loc4:*=0;
            if (!m_matrix)
            {
                return null;
            }
            var loc1:*=new Array();
            var loc2:*=0;
            var loc3:*=0;
            while (loc3 < 4)
            {
                loc4 = 0;
                while (loc4 < 5)
                {
                    loc1[loc2] = m_matrix[loc3][loc4];
                    ++loc2;
                    ++loc4;
                }
                ++loc3;
            }
            return loc1;
        }

        protected static const LUMINANCER:Number=0.3086;

        protected static const LUMINANCEG:Number=0.6094;

        protected static const LUMINANCEB:Number=0.082;
    }
}


class XFormData extends Object
{
    public function XFormData()
    {
        super();
        return;
    }

    public var ox:Number;

    public var oy:Number;

    public var oz:Number;
}

//      class CustomEase
package fl.motion
{
    import flash.geom.*;

    public class CustomEase extends Object implements fl.motion.ITween
    {
        public function CustomEase(arg1:XML=null)
        {
            super();
            this.points = [];
            this.parseXML(arg1);
            this.firstNode = new flash.geom.Point(0, 0);
            this.lastNode = new flash.geom.Point(1, 1);
            return;
        }

        public function get target():String
        {
            return this._target;
        }

        public function set target(arg1:String):void
        {
            this._target = arg1;
            return;
        }

        private function parseXML(arg1:XML=null):fl.motion.CustomEase
        {
            var loc2:*=null;
            if (!arg1)
            {
                return this;
            }
            if (arg1.@target.length())
            {
                this.target = arg1.@target;
            }
            var loc1:*=arg1.elements();
            var loc3:*=0;
            var loc4:*=loc1;
            for each (loc2 in loc4)
            {
                this.points.push(new flash.geom.Point(Number(loc2.@x), Number(loc2.@y)));
            }
            return this;
        }

        public function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg4 <= 0)
            {
                return NaN;
            }
            var loc1:*;
            if ((loc1 = arg1 / arg4) <= 0)
            {
                return arg2;
            }
            if (loc1 >= 1)
            {
                return arg2 + arg3;
            }
            var loc2:*;
            (loc2 = [this.firstNode].concat(this.points)).push(this.lastNode);
            var loc3:*=getYForPercent(loc1, loc2);
            return arg2 + loc3 * arg3;
        }

        static function getYForPercent(arg1:Number, arg2:Array):Number
        {
            var loc6:*=0;
            var loc7:*=null;
            var loc1:*=new fl.motion.BezierSegment(arg2[0], arg2[1], arg2[2], arg2[3]);
            var loc2:*=[loc1];
            var loc3:*=3;
            while (loc3 < arg2.length - 3)
            {
                loc2.push(new fl.motion.BezierSegment(arg2[loc3], arg2[loc3 + 1], arg2[loc3 + 2], arg2[loc3 + 3]));
                loc3 = loc3 + 3;
            }
            var loc4:*=loc1;
            if (arg2.length >= 5)
            {
                loc6 = 0;
                while (loc6 < loc2.length)
                {
                    if ((loc7 = loc2[loc6]).a.x <= arg1 && arg1 <= loc7.d.x)
                    {
                        loc4 = loc7;
                    }
                    ++loc6;
                }
            }
            var loc5:*;
            return loc5 = loc4.getYForX(arg1);
        }

        public var points:Array;

        private var firstNode:flash.geom.Point;

        private var lastNode:flash.geom.Point;

        private var _target:String="";
    }
}


//      class DynamicMatrix
package fl.motion
{
    public class DynamicMatrix extends Object
    {
        public function DynamicMatrix(arg1:int, arg2:int)
        {
            super();
            this.Create(arg1, arg2);
            return;
        }

        protected function Create(arg1:int, arg2:int):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (arg1 > 0 && arg2 > 0)
            {
                this.m_width = arg1;
                this.m_height = arg2;
                this.m_matrix = new Array(arg2);
                loc1 = 0;
                while (loc1 < arg2)
                {
                    this.m_matrix[loc1] = new Array(arg1);
                    loc2 = 0;
                    while (loc2 < arg2)
                    {
                        this.m_matrix[loc1][loc2] = 0;
                        ++loc2;
                    }
                    ++loc1;
                }
            }
            return;
        }

        protected function Destroy():void
        {
            this.m_matrix = null;
            return;
        }

        public function GetWidth():Number
        {
            return this.m_width;
        }

        public function GetHeight():Number
        {
            return this.m_height;
        }

        public function GetValue(arg1:int, arg2:int):Number
        {
            var loc1:*=0;
            if (arg1 >= 0 && arg1 < this.m_height && arg2 >= 0 && arg2 <= this.m_width)
            {
                loc1 = this.m_matrix[arg1][arg2];
            }
            return loc1;
        }

        public function SetValue(arg1:int, arg2:int, arg3:Number):void
        {
            if (arg1 >= 0 && arg1 < this.m_height && arg2 >= 0 && arg2 <= this.m_width)
            {
                this.m_matrix[arg1][arg2] = arg3;
            }
            return;
        }

        public function LoadIdentity():void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (this.m_matrix)
            {
                loc1 = 0;
                while (loc1 < this.m_height)
                {
                    loc2 = 0;
                    while (loc2 < this.m_width)
                    {
                        if (loc1 != loc2)
                        {
                            this.m_matrix[loc1][loc2] = 0;
                        }
                        else
                        {
                            this.m_matrix[loc1][loc2] = 1;
                        }
                        ++loc2;
                    }
                    ++loc1;
                }
            }
            return;
        }

        public function LoadZeros():void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (this.m_matrix)
            {
                loc1 = 0;
                while (loc1 < this.m_height)
                {
                    loc2 = 0;
                    while (loc2 < this.m_width)
                    {
                        this.m_matrix[loc1][loc2] = 0;
                        ++loc2;
                    }
                    ++loc1;
                }
            }
            return;
        }

        public function Multiply(arg1:fl.motion.DynamicMatrix, arg2:int=0):Boolean
        {
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=NaN;
            var loc7:*=0;
            var loc8:*=0;
            if (!this.m_matrix || !arg1)
            {
                return false;
            }
            var loc1:*=arg1.GetHeight();
            var loc2:*=arg1.GetWidth();
            if (arg2 != MATRIX_ORDER_APPEND)
            {
                if (this.m_height != loc2)
                {
                    return false;
                }
                loc3 = new fl.motion.DynamicMatrix(this.m_width, loc1);
                loc4 = 0;
                while (loc4 < loc1)
                {
                    loc5 = 0;
                    while (loc5 < this.m_width)
                    {
                        loc6 = 0;
                        loc7 = 0;
                        loc8 = 0;
                        while (loc7 < Math.max(loc1, this.m_height) && loc8 < Math.max(loc2, this.m_width))
                        {
                            loc6 = loc6 + this.m_matrix[loc7][loc5] * arg1.GetValue(loc4, loc8);
                            ++loc7;
                            ++loc8;
                        }
                        loc3.SetValue(loc4, loc5, loc6);
                        ++loc5;
                    }
                    ++loc4;
                }
                this.Destroy();
                this.Create(this.m_width, loc1);
                loc4 = 0;
                while (loc4 < loc1)
                {
                    loc5 = 0;
                    while (loc5 < this.m_width)
                    {
                        this.m_matrix[loc4][loc5] = loc3.GetValue(loc4, loc5);
                        ++loc5;
                    }
                    ++loc4;
                }
            }
            else
            {
                if (this.m_width != loc1)
                {
                    return false;
                }
                loc3 = new fl.motion.DynamicMatrix(loc2, this.m_height);
                loc4 = 0;
                while (loc4 < this.m_height)
                {
                    loc5 = 0;
                    while (loc5 < loc2)
                    {
                        loc6 = 0;
                        loc7 = 0;
                        loc8 = 0;
                        while (loc7 < Math.max(this.m_height, loc1) && loc8 < Math.max(this.m_width, loc2))
                        {
                            loc6 = loc6 + arg1.GetValue(loc7, loc5) * this.m_matrix[loc4][loc8];
                            ++loc7;
                            ++loc8;
                        }
                        loc3.SetValue(loc4, loc5, loc6);
                        ++loc5;
                    }
                    ++loc4;
                }
                this.Destroy();
                this.Create(loc2, this.m_height);
                loc4 = 0;
                while (loc4 < loc1)
                {
                    loc5 = 0;
                    while (loc5 < this.m_width)
                    {
                        this.m_matrix[loc4][loc5] = loc3.GetValue(loc4, loc5);
                        ++loc5;
                    }
                    ++loc4;
                }
            }
            return true;
        }

        public function MultiplyNumber(arg1:Number):Boolean
        {
            var loc2:*=0;
            var loc3:*=NaN;
            if (!this.m_matrix)
            {
                return false;
            }
            var loc1:*=0;
            while (loc1 < this.m_height)
            {
                loc2 = 0;
                while (loc2 < this.m_width)
                {
                    loc3 = 0;
                    loc3 = this.m_matrix[loc1][loc2] * arg1;
                    this.m_matrix[loc1][loc2] = loc3;
                    ++loc2;
                }
                ++loc1;
            }
            return true;
        }

        public function Add(arg1:fl.motion.DynamicMatrix):Boolean
        {
            var loc4:*=0;
            var loc5:*=NaN;
            if (!this.m_matrix || !arg1)
            {
                return false;
            }
            var loc1:*=arg1.GetHeight();
            var loc2:*=arg1.GetWidth();
            if (!(this.m_width == loc2) || !(this.m_height == loc1))
            {
                return false;
            }
            var loc3:*=0;
            while (loc3 < this.m_height)
            {
                loc4 = 0;
                while (loc4 < this.m_width)
                {
                    loc5 = 0;
                    loc5 = this.m_matrix[loc3][loc4] + arg1.GetValue(loc3, loc4);
                    this.m_matrix[loc3][loc4] = loc5;
                    ++loc4;
                }
                ++loc3;
            }
            return true;
        }

        public static const MATRIX_ORDER_PREPEND:int=0;

        public static const MATRIX_ORDER_APPEND:int=1;

        protected var m_width:int;

        protected var m_height:int;

        protected var m_matrix:Array;
    }
}


//      class FunctionEase
package fl.motion
{
    import flash.utils.*;

    public class FunctionEase extends Object implements fl.motion.ITween
    {
        public function FunctionEase(arg1:XML=null)
        {
            super();
            this.parseXML(arg1);
            return;
        }

        public function get functionName():String
        {
            return this._functionName;
        }

        public function set functionName(arg1:String):void
        {
            var loc1:*=arg1.split(".");
            var loc2:*=loc1.pop();
            var loc3:*=loc1.join(".");
            var loc4:*;
            if ((loc4 = flash.utils.getDefinitionByName(loc3) as Class)[loc2] is Function)
            {
                this.easingFunction = loc4[loc2];
                this._functionName = arg1;
            }
            return;
        }

        public function get target():String
        {
            return this._target;
        }

        public function set target(arg1:String):void
        {
            this._target = arg1;
            return;
        }

        private function parseXML(arg1:XML=null):fl.motion.FunctionEase
        {
            if (!arg1)
            {
                return this;
            }
            if (arg1.@functionName.length())
            {
                this.functionName = arg1.@functionName;
            }
            if (arg1.@target.length())
            {
                this.target = arg1.@target;
            }
            return this;
        }

        public function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*=null;
            if (this.parameters is Array)
            {
                loc1 = [arg1, arg2, arg3, arg4].concat(this.parameters);
                return this.easingFunction.apply(null, loc1);
            }
            return this.easingFunction(arg1, arg2, arg3, arg4);
        }

        private var _functionName:String="";

        public var easingFunction:Function=null;

        public var parameters:Array=null;

        private var _target:String="";
    }
}


//      class ITween
package fl.motion
{
    public interface ITween
    {
        function get target():String;

        function set target(arg1:String):void;

        function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number;
    }
}


//      class Keyframe
package fl.motion
{
    import flash.filters.*;
    import flash.utils.*;

    public class Keyframe extends fl.motion.KeyframeBase
    {
        public function Keyframe(arg1:XML=null)
        {
            super(arg1);
            this.tweens = [];
            this.parseXML(arg1);
            return;
        }

        private function parseXML(arg1:XML=null):fl.motion.KeyframeBase
        {
            var xml:XML=null;
            var indexString:String;
            var indexValue:int;
            var tweenableNames:Array;
            var tweenableName:String;
            var elements:XMLList;
            var filtersArray:Array;
            var child:XML;
            var bgColorStr:String;
            var attribute:XML;
            var attributeValue:String;
            var name:String;
            var tweenChildren:XMLList;
            var tweenChild:XML;
            var tweenName:String;
            var filtersChildren:XMLList;
            var filterXML:XML;
            var filterName:String;
            var filterClassName:String;
            var filterClass:Object;
            var filterInstance:flash.filters.BitmapFilter;
            var filterTypeInfo:XML;
            var accessorList:XMLList;
            var ratios:Array;
            var attrib:XML;
            var attribName:String;
            var accessor:XML;
            var attribType:String;
            var attribValue:String;
            var uintValue:uint;
            var valuesArray:Array;

            var loc1:*;
            tweenableName = null;
            elements = null;
            filtersArray = null;
            child = null;
            bgColorStr = null;
            attribute = null;
            attributeValue = null;
            name = null;
            tweenChildren = null;
            tweenChild = null;
            tweenName = null;
            filtersChildren = null;
            filterXML = null;
            filterName = null;
            filterClassName = null;
            filterClass = null;
            filterInstance = null;
            filterTypeInfo = null;
            accessorList = null;
            ratios = null;
            attrib = null;
            attribName = null;
            accessor = null;
            attribType = null;
            attribValue = null;
            uintValue = 0;
            valuesArray = null;
            xml = arg1;
            if (!xml)
            {
                return this;
            }
            indexString = xml.@index.toXMLString();
            indexValue = parseInt(indexString);
            if (indexString)
            {
                this.index = indexValue;
            }
            else
            {
                throw new Error("<Keyframe> is missing the required attribute \"index\".");
            }
            if (xml.@label.length())
            {
                this.label = xml.@label;
            }
            if (xml.@tweenScale.length())
            {
                this.tweenScale = xml.@tweenScale.toString() == "true";
            }
            if (xml.@tweenSnap.length())
            {
                this.tweenSnap = xml.@tweenSnap.toString() == "true";
            }
            if (xml.@tweenSync.length())
            {
                this.tweenSync = xml.@tweenSync.toString() == "true";
            }
            if (xml.@blendMode.length())
            {
                this.blendMode = xml.@blendMode;
            }
            if (xml.@cacheAsBitmap.length())
            {
                this.cacheAsBitmap = xml.@cacheAsBitmap.toString() == "true";
            }
            if (xml.@opaqueBackground.length())
            {
                bgColorStr = xml.@opaqueBackground.toString();
                if (bgColorStr != "null")
                {
                    this.opaqueBackground = parseInt(bgColorStr);
                }
                else
                {
                    this.opaqueBackground = null;
                }
            }
            if (xml.@visible.length())
            {
                this.visible = xml.@visible.toString() == "true";
            }
            if (xml.@rotateDirection.length())
            {
                this.rotateDirection = xml.@rotateDirection;
            }
            if (xml.@rotateTimes.length())
            {
                this.rotateTimes = parseInt(xml.@rotateTimes);
            }
            if (xml.@orientToPath.length())
            {
                this.orientToPath = xml.@orientToPath.toString() == "true";
            }
            if (xml.@blank.length())
            {
                this.blank = xml.@blank.toString() == "true";
            }
            tweenableNames = ["x", "y", "scaleX", "scaleY", "rotation", "skewX", "skewY"];
            var loc2:*=0;
            var loc3:*=tweenableNames;
            for each (tweenableName in loc3)
            {
                attribute = xml.attribute(tweenableName)[0];
                if (!attribute)
                {
                    continue;
                }
                attributeValue = attribute.toString();
                if (!attributeValue)
                {
                    continue;
                }
                this[tweenableName] = Number(attributeValue);
            }
            elements = xml.elements();
            filtersArray = [];
            loc2 = 0;
            loc3 = elements;
            for each (child in loc3)
            {
                name = child.localName();
                if (name != "tweens")
                {
                    if (name != "filters")
                    {
                        if (name == "color")
                        {
                            this.color = fl.motion.Color.fromXML(child);
                        }
                    }
                    else
                    {
                        filtersChildren = child.elements();
                        loc4 = 0;
                        loc5 = filtersChildren;
                        for each (filterXML in loc5)
                        {
                            filterName = filterXML.localName();
                            filterClassName = "flash.filters." + filterName;
                            if (filterName == "AdjustColorFilter")
                            {
                                continue;
                            }
                            filterClass = flash.utils.getDefinitionByName(filterClassName);
                            filterInstance = new filterClass();
                            filterTypeInfo = flash.utils.describeType(filterInstance);
                            accessorList = filterTypeInfo.accessor;
                            ratios = [];
                            var loc6:*=0;
                            var loc7:*=filterXML.attributes();
                            for each (attrib in loc7)
                            {
                                attribName = attrib.localName();
                                var loc9:*=0;
                                var loc10:*=accessorList;
                                var loc8:*=new XMLList("");
                                for each (var loc11:* in loc10)
                                {
                                    var loc12:*;
                                    with (loc12 = loc11)
                                    {
                                        if (@name == attribName)
                                        {
                                            loc8[loc9] = loc11;
                                        }
                                    }
                                }
                                accessor = loc8[0];
                                attribType = accessor.@type;
                                attribValue = attrib.toString();
                                if (attribType == "int")
                                {
                                    filterInstance[attribName] = parseInt(attribValue);
                                    continue;
                                }
                                if (attribType == "uint")
                                {
                                    filterInstance[attribName] = parseInt(attribValue) as uint;
                                    uintValue = parseInt(attribValue) as uint;
                                    continue;
                                }
                                if (attribType == "Number")
                                {
                                    filterInstance[attribName] = Number(attribValue);
                                    continue;
                                }
                                if (attribType == "Boolean")
                                {
                                    filterInstance[attribName] = attribValue == "true";
                                    continue;
                                }
                                if (attribType == "Array")
                                {
                                    attribValue = attribValue.substring(1, attribValue.length - 1);
                                    valuesArray = null;
                                    if (attribName == "ratios" || attribName == "colors")
                                    {
                                        valuesArray = splitUint(attribValue);
                                    }
                                    else if (attribName == "alphas")
                                    {
                                        valuesArray = splitNumber(attribValue);
                                    }
                                    if (attribName != "ratios")
                                    {
                                        if (valuesArray)
                                        {
                                            filterInstance[attribName] = valuesArray;
                                        }
                                    }
                                    else
                                    {
                                        ratios = valuesArray;
                                    }
                                    continue;
                                }
                                if (attribType != "String")
                                {
                                    continue;
                                }
                                filterInstance[attribName] = attribValue;
                            }
                            if (ratios.length)
                            {
                                filterInstance["ratios"] = ratios;
                            }
                            filtersArray.push(filterInstance);
                        }
                    }
                }
                else
                {
                    tweenChildren = child.elements();
                    var loc4:*=0;
                    var loc5:*=tweenChildren;
                    for each (tweenChild in loc5)
                    {
                        tweenName = tweenChild.localName();
                        if (tweenName == "SimpleEase")
                        {
                            this.tweens.push(new fl.motion.SimpleEase(tweenChild));
                            continue;
                        }
                        if (tweenName == "CustomEase")
                        {
                            this.tweens.push(new fl.motion.CustomEase(tweenChild));
                            continue;
                        }
                        if (tweenName == "BezierEase")
                        {
                            this.tweens.push(new fl.motion.BezierEase(tweenChild));
                            continue;
                        }
                        if (tweenName != "FunctionEase")
                        {
                            continue;
                        }
                        this.tweens.push(new fl.motion.FunctionEase(tweenChild));
                    }
                }
                this.filters = filtersArray;
            }
            return this;
        }

        public function getTween(arg1:String=""):fl.motion.ITween
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this.tweens;
            for each (loc1 in loc3)
            {
                if (!(loc1.target == arg1 || loc1.target == "rotation" && (arg1 == "skewX" || arg1 == "skewY") || loc1.target == "position" && (arg1 == "x" || arg1 == "y") || loc1.target == "scale" && (arg1 == "scaleX" || arg1 == "scaleY")))
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        protected override function hasTween():Boolean
        {
            return !(this.getTween() == null);
        }

        public override function get tweensLength():int
        {
            return this.tweens.length;
        }

        private static function splitNumber(arg1:String):Array
        {
            var loc1:*=arg1.split(",");
            var loc2:*=0;
            while (loc2 < loc1.length)
            {
                loc1[loc2] = Number(loc1[loc2]);
                ++loc2;
            }
            return loc1;
        }

        private static function splitUint(arg1:String):Array
        {
            var loc1:*=arg1.split(",");
            var loc2:*=0;
            while (loc2 < loc1.length)
            {
                loc1[loc2] = parseInt(loc1[loc2]) as uint;
                ++loc2;
            }
            return loc1;
        }

        private static function splitInt(arg1:String):Array
        {
            var loc1:*=arg1.split(",");
            var loc2:*=0;
            while (loc2 < loc1.length)
            {
                loc1[loc2] = parseInt(loc1[loc2]) as int;
                ++loc2;
            }
            return loc1;
        }

        public var tweens:Array;

        public var tweenScale:Boolean=true;

        public var tweenSnap:Boolean=false;

        public var tweenSync:Boolean=false;
    }
}


//      class KeyframeBase
package fl.motion
{
    import flash.filters.*;
    import flash.geom.*;
    import flash.utils.*;

    public class KeyframeBase extends Object
    {
        public function KeyframeBase(arg1:XML=null)
        {
            super();
            this.filters = [];
            this.adjustColorObjects = new flash.utils.Dictionary();
            return;
        }

        public function setAdjustColorProperty(arg1:int, arg2:String, arg3:*):void
        {
            var loc2:*=null;
            var loc3:*=null;
            if (arg1 >= this.filters.length)
            {
                return;
            }
            var loc1:*;
            if ((loc1 = this.adjustColorObjects[arg1]) == null)
            {
                loc1 = new fl.motion.AdjustColor();
                this.adjustColorObjects[arg1] = loc1;
            }
            var loc4:*=arg2;
            switch (loc4)
            {
                case "adjustColorBrightness":
                {
                    loc1.brightness = arg3;
                    break;
                }
                case "adjustColorContrast":
                {
                    loc1.contrast = arg3;
                    break;
                }
                case "adjustColorSaturation":
                {
                    loc1.saturation = arg3;
                    break;
                }
                case "adjustColorHue":
                {
                    loc1.hue = arg3;
                    break;
                }
            }
            if (loc1.AllValuesAreSet())
            {
                if (loc2 = this.filters[arg1] as flash.filters.ColorMatrixFilter)
                {
                    if (loc3 = loc1.CalculateFinalFlatArray())
                    {
                        loc2.matrix = loc3;
                    }
                }
            }
            return;
        }

        public function get index():int
        {
            return this._index;
        }

        public function set index(arg1:int):void
        {
            this._index = arg1 < 0 ? 0 : arg1;
            if (this._index == 0)
            {
                this.setDefaults();
            }
            return;
        }

        public function get tweensLength():int
        {
            return 0;
        }

        private function setDefaults():void
        {
            if (isNaN(this.x))
            {
                this.x = 0;
            }
            if (isNaN(this.y))
            {
                this.y = 0;
            }
            if (isNaN(this.z))
            {
                this.z = 0;
            }
            if (isNaN(this.scaleX))
            {
                this.scaleX = 1;
            }
            if (isNaN(this.scaleY))
            {
                this.scaleY = 1;
            }
            if (isNaN(this.skewX))
            {
                this.skewX = 0;
            }
            if (isNaN(this.skewY))
            {
                this.skewY = 0;
            }
            if (isNaN(this.rotationConcat))
            {
                this.rotationConcat = 0;
            }
            if (!this.color)
            {
                this.color = new fl.motion.Color();
            }
            return;
        }

        public function getValue(arg1:String):Number
        {
            return Number(this[arg1]);
        }

        public function setValue(arg1:String, arg2:Number):void
        {
            this[arg1] = arg2;
            return;
        }

        protected function hasTween():Boolean
        {
            return false;
        }

        public function affectsTweenable(arg1:String=""):Boolean
        {
            return !arg1 || !isNaN(this[arg1]) || arg1 == "color" && this.color || arg1 == "filters" && this.filters.length || arg1 == "matrix3D" && this.matrix3D || arg1 == "matrix" && this.matrix || this.blank || this.hasTween();
        }

        public function get rotation():Number
        {
            return this.skewY;
        }

        public function set rotation(arg1:Number):void
        {
            if (isNaN(this.skewX) || isNaN(this.skewY))
            {
                this.skewX = arg1;
            }
            else
            {
                this.skewX = this.skewX + (arg1 - this.skewY);
            }
            this.skewY = arg1;
            return;
        }

        private var _index:int=-1;

        public var x:Number=NaN;

        public var y:Number=NaN;

        public var scaleX:Number=NaN;

        public var scaleY:Number=NaN;

        public var skewX:Number=NaN;

        public var skewY:Number=NaN;

        public var rotationConcat:Number=NaN;

        public var useRotationConcat:Boolean=false;

        public var filters:Array;

        public var color:fl.motion.Color;

        public var label:String="";

        public var loop:String;

        public var firstFrame:String;

        public var cacheAsBitmap:Boolean=false;

        public var matrix3D:Object=null;

        public var matrix:flash.geom.Matrix=null;

        public var z:Number=NaN;

        public var rotationX:Number=NaN;

        public var rotationY:Number=NaN;

        public var adjustColorObjects:flash.utils.Dictionary=null;

        public var blendMode:String="normal";

        public var visible:Boolean=true;

        public var rotateDirection:String="auto";

        public var rotateTimes:uint=0;

        public var orientToPath:Boolean=false;

        public var blank:Boolean=false;

        public var opaqueBackground:Object=null;
    }
}


//      class MatrixTransformer
package fl.motion
{
    import flash.geom.*;

    public class MatrixTransformer extends Object
    {
        public function MatrixTransformer()
        {
            super();
            return;
        }

        public static function getScaleX(arg1:flash.geom.Matrix):Number
        {
            return Math.sqrt(arg1.a * arg1.a + arg1.b * arg1.b);
        }

        public static function setScaleX(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc1:*=getScaleX(arg1);
            if (loc1)
            {
                loc2 = arg2 / loc1;
                arg1.a = arg1.a * loc2;
                arg1.b = arg1.b * loc2;
            }
            else
            {
                loc3 = getSkewYRadians(arg1);
                arg1.a = Math.cos(loc3) * arg2;
                arg1.b = Math.sin(loc3) * arg2;
            }
            return;
        }

        public static function getScaleY(arg1:flash.geom.Matrix):Number
        {
            return Math.sqrt(arg1.c * arg1.c + arg1.d * arg1.d);
        }

        public static function setScaleY(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc1:*=getScaleY(arg1);
            if (loc1)
            {
                loc2 = arg2 / loc1;
                arg1.c = arg1.c * loc2;
                arg1.d = arg1.d * loc2;
            }
            else
            {
                loc3 = getSkewXRadians(arg1);
                arg1.c = (-Math.sin(loc3)) * arg2;
                arg1.d = Math.cos(loc3) * arg2;
            }
            return;
        }

        public static function getSkewXRadians(arg1:flash.geom.Matrix):Number
        {
            return Math.atan2(-arg1.c, arg1.d);
        }

        public static function setSkewXRadians(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc1:*=getScaleY(arg1);
            arg1.c = (-loc1) * Math.sin(arg2);
            arg1.d = loc1 * Math.cos(arg2);
            return;
        }

        public static function getSkewYRadians(arg1:flash.geom.Matrix):Number
        {
            return Math.atan2(arg1.b, arg1.a);
        }

        public static function setSkewYRadians(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc1:*=getScaleX(arg1);
            arg1.a = loc1 * Math.cos(arg2);
            arg1.b = loc1 * Math.sin(arg2);
            return;
        }

        public static function getSkewX(arg1:flash.geom.Matrix):Number
        {
            return Math.atan2(-arg1.c, arg1.d) * 180 / Math.PI;
        }

        public static function setSkewX(arg1:flash.geom.Matrix, arg2:Number):void
        {
            setSkewXRadians(arg1, arg2 * Math.PI / 180);
            return;
        }

        public static function getSkewY(arg1:flash.geom.Matrix):Number
        {
            return Math.atan2(arg1.b, arg1.a) * 180 / Math.PI;
        }

        public static function setSkewY(arg1:flash.geom.Matrix, arg2:Number):void
        {
            setSkewYRadians(arg1, arg2 * Math.PI / 180);
            return;
        }

        public static function getRotationRadians(arg1:flash.geom.Matrix):Number
        {
            return getSkewYRadians(arg1);
        }

        public static function setRotationRadians(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc1:*=getRotationRadians(arg1);
            var loc2:*=getSkewXRadians(arg1);
            setSkewXRadians(arg1, loc2 + arg2 - loc1);
            setSkewYRadians(arg1, arg2);
            return;
        }

        public static function getRotation(arg1:flash.geom.Matrix):Number
        {
            return getRotationRadians(arg1) * 180 / Math.PI;
        }

        public static function setRotation(arg1:flash.geom.Matrix, arg2:Number):void
        {
            setRotationRadians(arg1, arg2 * Math.PI / 180);
            return;
        }

        public static function rotateAroundInternalPoint(arg1:flash.geom.Matrix, arg2:Number, arg3:Number, arg4:Number):void
        {
            var loc1:*=new flash.geom.Point(arg2, arg3);
            loc1 = arg1.transformPoint(loc1);
            arg1.tx = arg1.tx - loc1.x;
            arg1.ty = arg1.ty - loc1.y;
            arg1.rotate(arg4 * Math.PI / 180);
            arg1.tx = arg1.tx + loc1.x;
            arg1.ty = arg1.ty + loc1.y;
            return;
        }

        public static function rotateAroundExternalPoint(arg1:flash.geom.Matrix, arg2:Number, arg3:Number, arg4:Number):void
        {
            arg1.tx = arg1.tx - arg2;
            arg1.ty = arg1.ty - arg3;
            arg1.rotate(arg4 * Math.PI / 180);
            arg1.tx = arg1.tx + arg2;
            arg1.ty = arg1.ty + arg3;
            return;
        }

        public static function matchInternalPointWithExternal(arg1:flash.geom.Matrix, arg2:flash.geom.Point, arg3:flash.geom.Point):void
        {
            var loc1:*=arg1.transformPoint(arg2);
            var loc2:*=arg3.x - loc1.x;
            var loc3:*=arg3.y - loc1.y;
            arg1.tx = arg1.tx + loc2;
            arg1.ty = arg1.ty + loc3;
            return;
        }
    }
}


//      class MatrixTransformer3D
package fl.motion
{
    import __AS3__.vec.*;
    import flash.geom.*;

    public class MatrixTransformer3D extends Object
    {
        public function MatrixTransformer3D()
        {
            super();
            return;
        }

        public static function rotateAboutAxis(arg1:Number, arg2:int):flash.geom.Matrix3D
        {
            var loc1:*=Math.cos(arg1);
            var loc2:*=Math.sin(arg1);
            var loc3:*=new Vector.<Number>();
            var loc4:*=arg2;
            switch (loc4)
            {
                case AXIS_X:
                {
                    loc3[0] = 1;
                    loc3[1] = 0;
                    loc3[2] = 0;
                    loc3[3] = 0;
                    loc3[4] = 0;
                    loc3[5] = loc1;
                    loc3[6] = loc2;
                    loc3[7] = 0;
                    loc3[8] = 0;
                    loc3[9] = -loc2;
                    loc3[10] = loc1;
                    loc3[11] = 0;
                    loc3[12] = 0;
                    loc3[13] = 0;
                    loc3[14] = 0;
                    loc3[15] = 1;
                    break;
                }
                case AXIS_Y:
                {
                    loc3[0] = loc1;
                    loc3[1] = 0;
                    loc3[2] = -loc2;
                    loc3[3] = 0;
                    loc3[4] = 0;
                    loc3[5] = 1;
                    loc3[6] = 0;
                    loc3[7] = 0;
                    loc3[8] = loc2;
                    loc3[9] = 0;
                    loc3[10] = loc1;
                    loc3[11] = 0;
                    loc3[12] = 0;
                    loc3[13] = 0;
                    loc3[14] = 0;
                    loc3[15] = 1;
                    break;
                }
                case AXIS_Z:
                {
                    loc3[0] = loc1;
                    loc3[1] = loc2;
                    loc3[2] = 0;
                    loc3[3] = 0;
                    loc3[4] = -loc2;
                    loc3[5] = loc1;
                    loc3[6] = 0;
                    loc3[7] = 0;
                    loc3[8] = 0;
                    loc3[9] = 0;
                    loc3[10] = 1;
                    loc3[11] = 0;
                    loc3[12] = 0;
                    loc3[13] = 0;
                    loc3[14] = 0;
                    loc3[15] = 1;
                    break;
                }
            }
            return new flash.geom.Matrix3D(loc3);
        }

        public static function getVector(arg1:flash.geom.Matrix3D, arg2:int):flash.geom.Vector3D
        {
            var loc1:*=arg2;
            switch (loc1)
            {
                case 0:
                {
                    return new flash.geom.Vector3D(arg1.rawData[0], arg1.rawData[1], arg1.rawData[2], arg1.rawData[3]);
                }
                case 1:
                {
                    return new flash.geom.Vector3D(arg1.rawData[4], arg1.rawData[5], arg1.rawData[6], arg1.rawData[7]);
                }
                case 2:
                {
                    return new flash.geom.Vector3D(arg1.rawData[8], arg1.rawData[9], arg1.rawData[10], arg1.rawData[11]);
                }
                case 3:
                {
                    return new flash.geom.Vector3D(arg1.rawData[12], arg1.rawData[13], arg1.rawData[14], arg1.rawData[15]);
                }
            }
            return new flash.geom.Vector3D(0, 0, 0, 0);
        }

        public static function getMatrix3D(arg1:flash.geom.Vector3D, arg2:flash.geom.Vector3D, arg3:flash.geom.Vector3D, arg4:flash.geom.Vector3D):flash.geom.Matrix3D
        {
            var loc1:*;
            (loc1 = new Vector.<Number>())[0] = arg1.x;
            loc1[1] = arg1.y;
            loc1[2] = arg1.z;
            loc1[3] = arg1.w;
            loc1[4] = arg2.x;
            loc1[5] = arg2.y;
            loc1[6] = arg2.z;
            loc1[7] = arg2.w;
            loc1[8] = arg3.x;
            loc1[9] = arg3.y;
            loc1[10] = arg3.z;
            loc1[11] = arg3.w;
            loc1[12] = arg4.x;
            loc1[13] = arg4.y;
            loc1[14] = arg4.z;
            loc1[15] = arg4.w;
            return new flash.geom.Matrix3D(loc1);
        }

        public static function rotateAxis(arg1:flash.geom.Matrix3D, arg2:Number, arg3:int):flash.geom.Matrix3D
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=null;
            var loc8:*=null;
            var loc1:*=new flash.geom.Matrix3D();
            var loc2:*=getVector(arg1, arg3);
            loc1.prependRotation(arg2 * 180 / Math.PI, loc2);
            var loc3:*=0;
            while (loc3 < 3)
            {
                if (loc3 != arg3)
                {
                    loc4 = getVector(arg1, loc3);
                    loc5 = new Array(3);
                    loc6 = 0;
                    while (loc6 < 3)
                    {
                        loc8 = getVector(loc1, loc6);
                        loc5[loc6] = loc4.dotProduct(loc8);
                        ++loc6;
                    }
                    loc4.x = loc5[0];
                    loc4.y = loc5[1];
                    loc4.z = loc5[2];
                    loc4.w = 0;
                    loc4 = normalizeVector(loc4);
                    (loc7 = Vector.<Number>(getRawDataVector(arg1)))[loc3 * 4] = loc4.x;
                    loc7[loc3 * 4 + 1] = loc4.y;
                    loc7[loc3 * 4 + 2] = loc4.z;
                    loc7[loc3 * 4 + 3] = loc4.w;
                    arg1 = new flash.geom.Matrix3D(Vector.<Number>(loc7));
                }
                ++loc3;
            }
            return arg1;
        }

        public static function normalizeVector(arg1:flash.geom.Vector3D):flash.geom.Vector3D
        {
            var loc1:*=1 / arg1.length;
            var loc2:*=new flash.geom.Vector3D();
            loc2.x = arg1.x * loc1;
            loc2.y = arg1.y * loc1;
            loc2.z = arg1.z * loc1;
            loc2.w = arg1.w;
            return loc2;
        }

        public static function getRawDataVector(arg1:flash.geom.Matrix3D):__AS3__.vec.Vector.<Number>
        {
            var loc1:*=new Vector.<Number>();
            loc1[0] = arg1.rawData[0];
            loc1[1] = arg1.rawData[1];
            loc1[2] = arg1.rawData[2];
            loc1[3] = arg1.rawData[3];
            loc1[4] = arg1.rawData[4];
            loc1[5] = arg1.rawData[5];
            loc1[6] = arg1.rawData[6];
            loc1[7] = arg1.rawData[7];
            loc1[8] = arg1.rawData[8];
            loc1[9] = arg1.rawData[9];
            loc1[10] = arg1.rawData[10];
            loc1[11] = arg1.rawData[11];
            loc1[12] = arg1.rawData[12];
            loc1[13] = arg1.rawData[13];
            loc1[14] = arg1.rawData[14];
            loc1[15] = arg1.rawData[15];
            return loc1;
        }

        public static const AXIS_X:int=0;

        public static const AXIS_Y:int=1;

        public static const AXIS_Z:int=2;
    }
}


//      class Motion
package fl.motion
{
    import flash.filters.*;
    import flash.geom.*;
    import flash.utils.*;

    public class Motion extends fl.motion.MotionBase
    {
        public function Motion(arg1:XML=null)
        {
            var loc1:*=null;
            super();
            this.keyframes = [];
            this.parseXML(arg1);
            if (!this.source)
            {
                this.source = new fl.motion.Source();
            }
            if (this.duration == 0)
            {
                loc1 = this.getNewKeyframe() as fl.motion.Keyframe;
                loc1.index = 0;
                this.addKeyframe(loc1);
            }
            return;
        }

        public function get keyframesCompact():Array
        {
            var loc1:*=null;
            this._keyframesCompact = [];
            var loc2:*=0;
            var loc3:*=this.keyframes;
            for each (loc1 in loc3)
            {
                if (!loc1)
                {
                    continue;
                }
                this._keyframesCompact.push(loc1);
            }
            return this._keyframesCompact;
        }

        public function set keyframesCompact(arg1:Array):void
        {
            var loc1:*=null;
            this._keyframesCompact = arg1.concat();
            this.keyframes = [];
            var loc2:*=0;
            var loc3:*=this._keyframesCompact;
            for each (loc1 in loc3)
            {
                this.addKeyframe(loc1);
            }
            return;
        }

        public override function getColorTransform(arg1:int):flash.geom.ColorTransform
        {
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc1:*=null;
            var loc2:*=this.getCurrentKeyframe(arg1, "color") as fl.motion.Keyframe;
            if (!loc2 || !loc2.color)
            {
                return null;
            }
            var loc3:*=loc2.color;
            var loc4:*=arg1 - loc2.index;
            var loc5:*=loc2.getTween("color") || loc2.getTween("alpha") || loc2.getTween();
            if (loc4 == 0 || !loc5)
            {
                loc1 = loc3;
            }
            else if (loc5)
            {
                if (!(loc6 = this.getNextKeyframe(arg1, "color") as fl.motion.Keyframe) || !loc6.color)
                {
                    loc1 = loc3;
                }
                else
                {
                    loc7 = loc6.color;
                    loc8 = loc6.index - loc2.index;
                    loc9 = loc5.getValue(loc4, 0, 1, loc8);
                    loc1 = fl.motion.Color.interpolateTransform(loc3, loc7, loc9);
                }
            }
            return loc1;
        }

        public override function getFilters(arg1:Number):Array
        {
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc1:*=null;
            var loc2:*=this.getCurrentKeyframe(arg1, "filters") as fl.motion.Keyframe;
            if (!loc2 || loc2.filters && !loc2.filters.length)
            {
                return [];
            }
            var loc3:*=loc2.filters;
            var loc4:*=arg1 - loc2.index;
            var loc5:*=loc2.getTween("filters") || loc2.getTween();
            if (loc4 == 0 || !loc5)
            {
                loc1 = loc3;
            }
            else if (loc5)
            {
                if (!(loc6 = this.getNextKeyframe(arg1, "filters") as fl.motion.Keyframe) || !loc6.filters.length)
                {
                    loc1 = loc3;
                }
                else
                {
                    loc7 = loc6.filters;
                    loc8 = loc6.index - loc2.index;
                    loc9 = loc5.getValue(loc4, 0, 1, loc8);
                    loc1 = interpolateFilters(loc3, loc7, loc9);
                }
            }
            return loc1;
        }

        protected override function findTweenedValue(arg1:Number, arg2:String, arg3:fl.motion.KeyframeBase, arg4:Number, arg5:Number):Number
        {
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc1:*;
            if (!(loc1 = arg3 as fl.motion.Keyframe))
            {
                return NaN;
            }
            var loc2:*;
            if (!(loc2 = loc1.getTween(arg2) || loc1.getTween()) || !loc1.tweenScale && (arg2 == fl.motion.Tweenables.SCALE_X || arg2 == fl.motion.Tweenables.SCALE_Y) || loc1.rotateDirection == fl.motion.RotateDirection.NONE && (arg2 == fl.motion.Tweenables.ROTATION || arg2 == fl.motion.Tweenables.SKEW_X || arg2 == fl.motion.Tweenables.SKEW_Y))
            {
                return arg5;
            }
            var loc3:*=arg2;
            if (loc2.target == "")
            {
                loc3 = "";
            }
            var loc4:*;
            if (!(loc4 = this.getNextKeyframe(arg1, loc3) as fl.motion.Keyframe) || loc4.blank)
            {
                return arg5;
            }
            loc5 = loc4.getValue(arg2);
            if (isNaN(loc5))
            {
                loc5 = arg5;
            }
            loc6 = loc5 - arg5;
            if (arg2 == fl.motion.Tweenables.SKEW_X || arg2 == fl.motion.Tweenables.SKEW_Y || arg2 == fl.motion.Tweenables.ROTATION)
            {
                if (loc1.rotateDirection != fl.motion.RotateDirection.AUTO)
                {
                    if (loc1.rotateDirection != fl.motion.RotateDirection.CW)
                    {
                        if (loc6 > 0)
                        {
                            loc6 = loc6 % 360 - 360;
                        }
                        loc6 = loc6 - loc1.rotateTimes * 360;
                    }
                    else
                    {
                        if (loc6 < 0)
                        {
                            loc6 = loc6 % 360 + 360;
                        }
                        loc6 = loc6 + loc1.rotateTimes * 360;
                    }
                }
                else if ((loc6 = loc6 % 360) > 180)
                {
                    loc6 = loc6 - 360;
                }
                else if (loc6 < -180)
                {
                    loc6 = loc6 + 360;
                }
            }
            loc7 = loc4.index - loc1.index;
            return loc2.getValue(arg4, arg5, loc6, loc7);
        }

        private function parseXML(arg1:XML):fl.motion.Motion
        {
            var loc3:*=null;
            var loc4:*=null;
            if (!arg1)
            {
                return this;
            }
            if (arg1.@duration.length())
            {
                this.duration = parseInt(arg1.@duration);
            }
            var loc1:*=arg1.elements();
            var loc2:*=0;
            while (loc2 < loc1.length())
            {
                if ((loc3 = loc1[loc2]).localName() != "source")
                {
                    if (loc3.localName() == "Keyframe")
                    {
                        this.addKeyframe(this.getNewKeyframe(loc3));
                    }
                }
                else
                {
                    loc4 = loc3.children()[0];
                    this.source = new fl.motion.Source(loc4);
                }
                ++loc2;
            }
            return this;
        }

        protected override function getNewKeyframe(arg1:XML=null):fl.motion.KeyframeBase
        {
            return new fl.motion.Keyframe(arg1);
        }

        public static function fromXMLString(arg1:String):fl.motion.Motion
        {
            var loc1:*=new XML(arg1);
            return new Motion(loc1);
        }

        public static function interpolateFilters(arg1:Array, arg2:Array, arg3:Number):Array
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            if (arg1.length != arg2.length)
            {
                return null;
            }
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < arg1.length)
            {
                loc3 = arg1[loc2];
                loc4 = arg2[loc2];
                if (loc5 = interpolateFilter(loc3, loc4, arg3))
                {
                    loc1.push(loc5);
                }
                ++loc2;
            }
            return loc1;
        }

        public static function interpolateFilter(arg1:flash.filters.BitmapFilter, arg2:flash.filters.BitmapFilter, arg3:Number):flash.filters.BitmapFilter
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=0;
            var loc9:*=0;
            var loc10:*=0;
            var loc11:*=null;
            var loc12:*=null;
            var loc13:*=null;
            var loc14:*=0;
            var loc15:*=0;
            var loc16:*=0;
            var loc17:*=0;
            var loc18:*=0;
            var loc19:*=NaN;
            var loc20:*=0;
            var loc21:*=NaN;
            var loc22:*=0;
            var loc23:*=NaN;
            var loc24:*=0;
            var loc25:*=NaN;
            var loc26:*=0;
            var loc27:*=0;
            var loc28:*=NaN;
            if (!arg2 || !(arg1["constructor"] == arg2["constructor"]))
            {
                return arg1;
            }
            if (arg3 > 1)
            {
                arg3 = 1;
            }
            else if (arg3 < 0)
            {
                arg3 = 0;
            }
            var loc1:*=1 - arg3;
            var loc2:*=arg1.clone();
            var loc3:*;
            var loc4:*=(loc3 = getTypeInfo(arg1)).accessor;
            var loc29:*=0;
            var loc30:*=loc4;
            label464: for each (loc5 in loc30)
            {
                loc6 = loc5.@name.toString();
                if ((loc7 = loc5.@type) == "Number" || loc7 == "int")
                {
                    loc2[loc6] = arg1[loc6] * loc1 + arg2[loc6] * arg3;
                    continue;
                }
                if (loc7 != "uint")
                {
                    continue;
                }
                var loc31:*=loc6;
                switch (loc31)
                {
                    case "color":
                    case "highlightColor":
                    case "shadowColor":
                    {
                        loc8 = arg1[loc6];
                        loc9 = arg2[loc6];
                        loc10 = fl.motion.Color.interpolateColor(loc8, loc9, arg3);
                        loc2[loc6] = loc10;
                        continue label464;
                    }
                    default:
                    {
                        loc2[loc6] = arg1[loc6] * loc1 + arg2[loc6] * arg3;
                        continue label464;
                    }
                }
            }
            if (arg1 is flash.filters.GradientGlowFilter || arg1 is flash.filters.GradientBevelFilter)
            {
                loc11 = [];
                loc12 = [];
                loc13 = [];
                loc14 = arg1["ratios"].length;
                loc15 = arg2["ratios"].length;
                loc16 = Math.max(loc14, loc15);
                loc17 = 0;
                while (loc17 < loc16)
                {
                    loc18 = Math.min(loc17, loc14 - 1);
                    loc19 = arg1["ratios"][loc18];
                    loc20 = arg1["colors"][loc18];
                    loc21 = arg1["alphas"][loc18];
                    loc22 = Math.min(loc17, loc15 - 1);
                    loc23 = arg2["ratios"][loc22];
                    loc24 = arg2["colors"][loc22];
                    loc25 = arg2["alphas"][loc22];
                    loc26 = loc19 * loc1 + loc23 * arg3;
                    loc27 = fl.motion.Color.interpolateColor(loc20, loc24, arg3);
                    loc28 = loc21 * loc1 + loc25 * arg3;
                    loc11[loc17] = loc26;
                    loc12[loc17] = loc27;
                    loc13[loc17] = loc28;
                    ++loc17;
                }
                loc2["colors"] = loc12;
                loc2["alphas"] = loc13;
                loc2["ratios"] = loc11;
            }
            return loc2;
        }

        private static function getTypeInfo(arg1:*):XML
        {
            var loc1:*="";
            if (arg1 is String)
            {
                loc1 = arg1;
            }
            else
            {
                loc1 = flash.utils.getQualifiedClassName(arg1);
            }
            if (loc1 in typeCache)
            {
                return typeCache[loc1];
            }
            if (arg1 is String)
            {
                arg1 = flash.utils.getDefinitionByName(arg1);
            }
            var loc2:*;
            typeCache[loc1] = loc2 = flash.utils.describeType(arg1);
            return loc2;
        }


        {
            typeCache = {};
        }

        public var source:fl.motion.Source;

        private var _keyframesCompact:Array;

        private static var typeCache:Object;
    }
}


//      class MotionBase
package fl.motion
{
    import flash.filters.*;
    import flash.geom.*;
    import flash.utils.*;

    use namespace motion_internal;

    public class MotionBase extends Object
    {
        public function MotionBase(arg1:XML=null)
        {
            var loc1:*=null;
            super();
            this.keyframes = [];
            if (this.duration == 0)
            {
                loc1 = this.getNewKeyframe();
                loc1.index = 0;
                this.addKeyframe(loc1);
            }
            this._overrideScale = false;
            this._overrideSkew = false;
            this._overrideRotate = false;
            return;
        }

        public function getFilters(arg1:Number):Array
        {
            var loc1:*=null;
            var loc2:*=this.getCurrentKeyframe(arg1, "filters");
            if (!loc2 || loc2.filters && !loc2.filters.length)
            {
                return [];
            }
            var loc3:*=loc2.filters;
            var loc4:*;
            if ((loc4 = arg1 - loc2.index) == 0)
            {
                loc1 = loc3;
            }
            return loc1;
        }

        protected function findTweenedValue(arg1:Number, arg2:String, arg3:fl.motion.KeyframeBase, arg4:Number, arg5:Number):Number
        {
            return NaN;
        }

        motion_internal function set spanStart(arg1:int):void
        {
            this._spanStart = arg1;
            return;
        }

        motion_internal function get spanStart():int
        {
            return this._spanStart;
        }

        motion_internal function get transformationPointZ():int
        {
            return this._transformationPointZ;
        }

        motion_internal function set transformationPoint(arg1:flash.geom.Point):void
        {
            this._transformationPoint = arg1;
            return;
        }

        motion_internal function get transformationPoint():flash.geom.Point
        {
            return this._transformationPoint;
        }

        public function getValue(arg1:Number, arg2:String):Number
        {
            var loc1:*=NaN;
            var loc2:*;
            if (!(loc2 = this.getCurrentKeyframe(arg1, arg2)) || loc2.blank)
            {
                return NaN;
            }
            var loc3:*=loc2.getValue(arg2);
            if (isNaN(loc3) && loc2.index > 0)
            {
                loc3 = this.getValue(loc2.index - 1, arg2);
            }
            if (isNaN(loc3))
            {
                return NaN;
            }
            var loc4:*;
            if ((loc4 = arg1 - loc2.index) == 0)
            {
                return loc3;
            }
            loc1 = this.findTweenedValue(arg1, arg2, loc2, loc4, loc3);
            return loc1;
        }

        motion_internal function set transformationPointZ(arg1:int):void
        {
            this._transformationPointZ = arg1;
            return;
        }

        public function addKeyframe(arg1:fl.motion.KeyframeBase):void
        {
            this.keyframes[arg1.index] = arg1;
            if (this.duration < this.keyframes.length)
            {
                this.duration = this.keyframes.length;
            }
            return;
        }

        public function addPropertyArray(arg1:String, arg2:Array, arg3:int=-1, arg4:int=-1):void
        {
            var loc6:*=null;
            var loc7:*=undefined;
            var loc8:*=0;
            var loc9:*=undefined;
            var loc1:*=arg2.length;
            var loc2:*=null;
            var loc3:*=true;
            var loc4:*=0;
            if (loc1 > 0)
            {
                if (arg2[0] is Number)
                {
                    loc3 = false;
                    if (arg2[0] is Number)
                    {
                        loc4 = Number(arg2[0]);
                    }
                }
            }
            if (this.duration < loc1)
            {
                this.duration = loc1;
            }
            if (arg3 == -1 || arg4 == -1)
            {
                arg3 = 0;
                arg4 = this.duration;
            }
            var loc5:*=arg3;
            while (loc5 < arg4)
            {
                if ((loc6 = fl.motion.KeyframeBase(this.keyframes[loc5])) == null)
                {
                    (loc6 = this.getNewKeyframe()).index = loc5;
                    this.addKeyframe(loc6);
                }
                if (loc6.filters && loc6.filters.length == 0)
                {
                    loc6.filters = null;
                }
                loc7 = loc2;
                if ((loc8 = loc5 - arg3) < arg2.length)
                {
                    if (arg2[loc8] || !loc3)
                    {
                        loc7 = arg2[loc8];
                    }
                }
                var loc10:*=arg1;
                switch (loc10)
                {
                    case "blendMode":
                    case "matrix3D":
                    case "matrix":
                    case "cacheAsBitmap":
                    case "opaqueBackground":
                    case "visible":
                    {
                        loc6[arg1] = loc7;
                        break;
                    }
                    case "rotationConcat":
                    {
                        loc6.useRotationConcat = true;
                        if (!this._overrideRotate && !loc3)
                        {
                            loc6.setValue(arg1, (loc7 - loc4) * Math.PI / 180);
                        }
                        else
                        {
                            loc6.setValue(arg1, loc7 * Math.PI / 180);
                        }
                        break;
                    }
                    case "brightness":
                    case "tintMultiplier":
                    case "tintColor":
                    case "alphaMultiplier":
                    case "alphaOffset":
                    case "redMultiplier":
                    case "redOffset":
                    case "greenMultiplier":
                    case "greenOffset":
                    case "blueMultiplier":
                    case "blueOffset":
                    {
                        if (loc6.color == null)
                        {
                            loc6.color = new fl.motion.Color();
                        }
                        loc6.color[arg1] = loc7;
                        break;
                    }
                    case "rotationZ":
                    {
                        loc6.useRotationConcat = true;
                        this._is3D = true;
                        if (!this._overrideRotate && !loc3)
                        {
                            loc6.setValue("rotationConcat", loc7 - loc4);
                        }
                        else
                        {
                            loc6.setValue("rotationConcat", loc7);
                        }
                        break;
                    }
                    case "rotationX":
                    case "rotationY":
                    case "z":
                    {
                        this._is3D = true;
                    }
                    default:
                    {
                        loc9 = loc7;
                        if (!loc3)
                        {
                            loc10 = arg1;
                            switch (loc10)
                            {
                                case "scaleX":
                                case "scaleY":
                                {
                                    if (!this._overrideScale)
                                    {
                                        if (loc4 != 0)
                                        {
                                            loc9 = loc7 / loc4;
                                        }
                                        else
                                        {
                                            loc9 = loc7 + 1;
                                        }
                                    }
                                    break;
                                }
                                case "skewX":
                                case "skewY":
                                {
                                    if (!this._overrideSkew)
                                    {
                                        loc9 = loc7 - loc4;
                                    }
                                    break;
                                }
                                case "rotationX":
                                case "rotationY":
                                {
                                    if (!this._overrideRotate)
                                    {
                                        loc9 = loc7 - loc4;
                                    }
                                    break;
                                }
                            }
                        }
                        loc6.setValue(arg1, loc9);
                        break;
                    }
                }
                loc2 = loc7;
                ++loc5;
            }
            return;
        }

        motion_internal function set initialPosition(arg1:Array):void
        {
            this._initialPosition = arg1;
            return;
        }

        motion_internal function get initialPosition():Array
        {
            return this._initialPosition;
        }

        public function initFilters(arg1:Array, arg2:Array, arg3:int=-1, arg4:int=-1):void
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=0;
            if (arg3 == -1 || arg4 == -1)
            {
                arg3 = 0;
                arg4 = this.duration;
            }
            var loc1:*=0;
            while (loc1 < arg1.length)
            {
                loc2 = flash.utils.getDefinitionByName(arg1[loc1]) as Class;
                loc3 = arg3;
                while (loc3 < arg4)
                {
                    if ((loc4 = fl.motion.KeyframeBase(this.keyframes[loc3])) == null)
                    {
                        (loc4 = this.getNewKeyframe()).index = loc3;
                        this.addKeyframe(loc4);
                    }
                    if (loc4 && loc4.filters == null)
                    {
                        loc4.filters = new Array();
                    }
                    if (loc4 && loc4.filters)
                    {
                        loc5 = null;
                        var loc7:*=arg1[loc1];
                        switch (loc7)
                        {
                            case "flash.filters.GradientBevelFilter":
                            case "flash.filters.GradientGlowFilter":
                            {
                                loc6 = arg2[loc1];
                                loc5 = flash.filters.BitmapFilter(new loc2(4, 45, new Array(loc6), new Array(loc6), new Array(loc6)));
                                break;
                            }
                            default:
                            {
                                loc5 = flash.filters.BitmapFilter(new loc2());
                                break;
                            }
                        }
                        if (loc5)
                        {
                            loc4.filters.push(loc5);
                        }
                    }
                    ++loc3;
                }
                ++loc1;
            }
            return;
        }

        motion_internal function set initialMatrix(arg1:flash.geom.Matrix):void
        {
            this._initialMatrix = arg1;
            return;
        }

        motion_internal function get initialMatrix():flash.geom.Matrix
        {
            return this._initialMatrix;
        }

        public function addFilterPropertyArray(arg1:int, arg2:String, arg3:Array, arg4:int=-1, arg5:int=-1):void
        {
            var loc5:*=null;
            var loc6:*=undefined;
            var loc7:*=0;
            var loc1:*=arg3.length;
            var loc2:*=null;
            var loc3:*=true;
            if (loc1 > 0)
            {
                if (arg3[0] is Number)
                {
                    loc3 = false;
                }
            }
            if (this.duration < loc1)
            {
                this.duration = loc1;
            }
            if (arg4 == -1 || arg5 == -1)
            {
                arg4 = 0;
                arg5 = this.duration;
            }
            var loc4:*=arg4;
            while (loc4 < arg5)
            {
                if ((loc5 = fl.motion.KeyframeBase(this.keyframes[loc4])) == null)
                {
                    (loc5 = this.getNewKeyframe()).index = loc4;
                    this.addKeyframe(loc5);
                }
                loc6 = loc2;
                if ((loc7 = loc4 - arg4) < arg3.length)
                {
                    if (arg3[loc7] || !loc3)
                    {
                        loc6 = arg3[loc7];
                    }
                }
                var loc8:*=arg2;
                switch (loc8)
                {
                    case "adjustColorBrightness":
                    case "adjustColorContrast":
                    case "adjustColorSaturation":
                    case "adjustColorHue":
                    {
                        loc5.setAdjustColorProperty(arg1, arg2, loc6);
                        break;
                    }
                    default:
                    {
                        if (arg1 < loc5.filters.length)
                        {
                            loc5.filters[arg1][arg2] = loc6;
                        }
                        break;
                    }
                }
                loc2 = loc6;
                ++loc4;
            }
            return;
        }

        public function get duration():int
        {
            if (this._duration < this.keyframes.length)
            {
                this._duration = this.keyframes.length;
            }
            return this._duration;
        }

        public function set duration(arg1:int):void
        {
            if (arg1 < this.keyframes.length)
            {
                arg1 = this.keyframes.length;
            }
            this._duration = arg1;
            return;
        }

        protected function getNewKeyframe(arg1:XML=null):fl.motion.KeyframeBase
        {
            return new fl.motion.KeyframeBase(arg1);
        }

        public function get is3D():Boolean
        {
            return this._is3D;
        }

        public function set is3D(arg1:Boolean):void
        {
            this._is3D = arg1;
            return;
        }

        public function overrideTargetTransform(arg1:Boolean=true, arg2:Boolean=true, arg3:Boolean=true):void
        {
            this._overrideScale = arg1;
            this._overrideSkew = arg2;
            this._overrideRotate = arg3;
            return;
        }

        private function indexOutOfRange(arg1:int):Boolean
        {
            return isNaN(arg1) || arg1 < 0 || arg1 > this.duration - 1;
        }

        public function getCurrentKeyframe(arg1:int, arg2:String=""):fl.motion.KeyframeBase
        {
            var loc2:*=null;
            if (isNaN(arg1) || arg1 < 0 || arg1 > this.duration - 1)
            {
                return null;
            }
            var loc1:*=arg1;
            while (loc1 > 0)
            {
                if ((loc2 = this.keyframes[loc1]) && loc2.affectsTweenable(arg2))
                {
                    return loc2;
                }
                --loc1;
            }
            return this.keyframes[0];
        }

        public function getNextKeyframe(arg1:int, arg2:String=""):fl.motion.KeyframeBase
        {
            var loc2:*=null;
            if (isNaN(arg1) || arg1 < 0 || arg1 > this.duration - 1)
            {
                return null;
            }
            var loc1:*=arg1 + 1;
            while (loc1 < this.keyframes.length)
            {
                if ((loc2 = this.keyframes[loc1]) && loc2.affectsTweenable(arg2))
                {
                    return loc2;
                }
                ++loc1;
            }
            return null;
        }

        public function setValue(arg1:int, arg2:String, arg3:Number):void
        {
            if (arg1 == 0)
            {
                return;
            }
            var loc1:*;
            if (!(loc1 = this.keyframes[arg1]))
            {
                (loc1 = this.getNewKeyframe()).index = arg1;
                this.addKeyframe(loc1);
            }
            loc1.setValue(arg2, arg3);
            return;
        }

        public function getColorTransform(arg1:int):flash.geom.ColorTransform
        {
            var loc1:*=null;
            var loc2:*=this.getCurrentKeyframe(arg1, "color");
            if (!loc2 || !loc2.color)
            {
                return null;
            }
            var loc3:*=loc2.color;
            var loc4:*;
            if ((loc4 = arg1 - loc2.index) == 0)
            {
                loc1 = loc3;
            }
            return loc1;
        }

        public function getMatrix3D(arg1:int):Object
        {
            var loc1:*=this.getCurrentKeyframe(arg1, "matrix3D");
            return loc1 ? loc1.matrix3D : null;
        }

        public function getMatrix(arg1:int):flash.geom.Matrix
        {
            var loc1:*=this.getCurrentKeyframe(arg1, "matrix");
            return loc1 ? loc1.matrix : null;
        }

        public function useRotationConcat(arg1:int):Boolean
        {
            var loc1:*=this.getCurrentKeyframe(arg1, "rotationConcat");
            return loc1 ? loc1.useRotationConcat : false;
        }

        public var keyframes:Array;

        private var _spanStart:int;

        private var _transformationPointZ:int;

        private var _transformationPoint:flash.geom.Point;

        private var _initialPosition:Array;

        private var _initialMatrix:flash.geom.Matrix;

        private var _duration:int=0;

        private var _is3D:Boolean=false;

        private var _overrideRotate:Boolean;

        private var _overrideScale:Boolean;

        private var _overrideSkew:Boolean;
    }
}


//      class MotionEvent
package fl.motion
{
    import flash.events.*;

    public class MotionEvent extends flash.events.Event
    {
        public function MotionEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new fl.motion.MotionEvent(this.type, this.bubbles, this.cancelable);
        }

        public static const MOTION_START:String="motionStart";

        public static const MOTION_END:String="motionEnd";

        public static const MOTION_UPDATE:String="motionUpdate";

        public static const TIME_CHANGE:String="timeChange";
    }
}


//      class RotateDirection
package fl.motion
{
    public class RotateDirection extends Object
    {
        public function RotateDirection()
        {
            super();
            return;
        }

        public static const AUTO:String="auto";

        public static const NONE:String="none";

        public static const CW:String="cw";

        public static const CCW:String="ccw";
    }
}


//      class SimpleEase
package fl.motion
{
    public class SimpleEase extends Object implements fl.motion.ITween
    {
        public function SimpleEase(arg1:XML=null)
        {
            super();
            this.parseXML(arg1);
            return;
        }

        public function get ease():Number
        {
            return this._ease;
        }

        public function set ease(arg1:Number):void
        {
            this._ease = arg1 > 1 ? 1 : arg1 < -1 ? -1 : isNaN(arg1) ? 0 : arg1;
            return;
        }

        public function get target():String
        {
            return this._target;
        }

        public function set target(arg1:String):void
        {
            this._target = arg1;
            return;
        }

        private function parseXML(arg1:XML=null):fl.motion.SimpleEase
        {
            if (arg1)
            {
                if (arg1.@ease.length())
                {
                    this.ease = Number(arg1.@ease);
                }
                if (arg1.@target.length())
                {
                    this.target = arg1.@target;
                }
            }
            return this;
        }

        public function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return easeQuadPercent(arg1, arg2, arg3, arg4, this.ease);
        }

        public static function easeQuadPercent(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number):Number
        {
            if (arg4 <= 0)
            {
                return NaN;
            }
            if (arg1 <= 0)
            {
                return arg2;
            }
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            if (loc1 >= 1)
            {
                return arg2 + arg3;
            }
            if (!arg5)
            {
                return arg3 * arg1 + arg2;
            }
            if (arg5 > 1)
            {
                arg5 = 1;
            }
            else if (arg5 < -1)
            {
                arg5 = -1;
            }
            if (arg5 < 0)
            {
                return arg3 * arg1 * (arg1 * (-arg5) + (1 + arg5)) + arg2;
            }
            return arg3 * arg1 * ((2 - arg1) * arg5 + (1 - arg5)) + arg2;
        }

        public static function easeNone(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg4 <= 0)
            {
                return NaN;
            }
            if (arg1 <= 0)
            {
                return arg2;
            }
            if (arg1 >= arg4)
            {
                return arg2 + arg3;
            }
            return arg3 * arg1 / arg4 + arg2;
        }

        private var _ease:Number=0;

        private var _target:String="";
    }
}


//      class Source
package fl.motion
{
    import flash.geom.*;

    public class Source extends Object
    {
        public function Source(arg1:XML=null)
        {
            super();
            this.parseXML(arg1);
            return;
        }

        private function parseXML(arg1:XML=null):fl.motion.Source
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            if (!arg1)
            {
                return this;
            }
            if (arg1.@instanceName)
            {
                this.instanceName = String(arg1.@instanceName);
            }
            if (arg1.@symbolName)
            {
                this.symbolName = String(arg1.@symbolName);
            }
            if (arg1.@linkageID)
            {
                this.linkageID = String(arg1.@linkageID);
            }
            if (!isNaN(arg1.@frameRate))
            {
                this.frameRate = Number(arg1.@frameRate);
            }
            var loc1:*=arg1.elements();
            var loc5:*=0;
            var loc6:*=loc1;
            for each (loc2 in loc6)
            {
                if (loc2.localName() == "transformationPoint")
                {
                    loc3 = loc2.children()[0];
                    this.transformationPoint = new flash.geom.Point(Number(loc3.@x), Number(loc3.@y));
                    continue;
                }
                if (loc2.localName() != "dimensions")
                {
                    continue;
                }
                loc4 = loc2.children()[0];
                this.dimensions = new flash.geom.Rectangle(Number(loc4.@left), Number(loc4.@top), Number(loc4.@width), Number(loc4.@height));
            }
            return this;
        }

        public var frameRate:Number=NaN;

        public var elementType:String="";

        public var symbolName:String="";

        public var instanceName:String="";

        public var linkageID:String="";

        public var x:Number=0;

        public var y:Number=0;

        public var scaleX:Number=1;

        public var scaleY:Number=1;

        public var skewX:Number=0;

        public var skewY:Number=0;

        public var rotation:Number=0;

        public var transformationPoint:flash.geom.Point;

        public var dimensions:flash.geom.Rectangle;
    }
}


//      class Tweenables
package fl.motion
{
    public class Tweenables extends Object
    {
        public function Tweenables()
        {
            super();
            return;
        }

        public static const X:String="x";

        public static const Y:String="y";

        public static const Z:String="z";

        public static const SCALE_X:String="scaleX";

        public static const SCALE_Y:String="scaleY";

        public static const SKEW_X:String="skewX";

        public static const SKEW_Y:String="skewY";

        public static const ROTATION:String="rotation";

        public static const ROTATION_X:String="rotationX";

        public static const ROTATION_Y:String="rotationY";

        public static const ROTATION_CONCAT:String="rotationConcat";
    }
}


//      namespace motion_internal
package fl.motion
{
    public namespace motion_internal="http://www.adobe.com/2009/flash/motion/internal";
}


//  package res
//    package battle
//      package bossinsert
//        class MCBossInsert
package res.battle.bossinsert
{
    import flash.display.*;

    public dynamic class MCBossInsert extends flash.display.MovieClip
    {
        public function MCBossInsert()
        {
            super();
            return;
        }

        public var boss:flash.display.MovieClip;

        public var textf:flash.display.MovieClip;
    }
}


//        class MCTextSet
package res.battle.bossinsert
{
    import flash.display.*;
    import flash.text.*;

    public dynamic class MCTextSet extends flash.display.MovieClip
    {
        public function MCTextSet()
        {
            super();
            return;
        }

        public var messageText:flash.text.TextField;

        public var nameText:flash.text.TextField;

        public var sTypeText:flash.text.TextField;
    }
}


//      package images
//        class FlagShipMarkImage
package res.battle.images
{
    import flash.display.*;

    public dynamic class FlagShipMarkImage extends flash.display.BitmapData
    {
        public function FlagShipMarkImage(arg1:int=18, arg2:int=18)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgRaderBG
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgRaderBG extends flash.display.BitmapData
    {
        public function ImgRaderBG(arg1:int=120, arg2:int=120)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgRaderWave
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgRaderWave extends flash.display.BitmapData
    {
        public function ImgRaderWave(arg1:int=100, arg2:int=100)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgTextStartBattle
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgTextStartBattle extends flash.display.BitmapData
    {
        public function ImgTextStartBattle(arg1:int=545, arg2:int=168)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgWhiteBlur
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgWhiteBlur extends flash.display.MovieClip
    {
        public function ImgWhiteBlur()
        {
            super();
            return;
        }
    }
}


//        class ImgYasenStartText1
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText1 extends flash.display.BitmapData
    {
        public function ImgYasenStartText1(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgYasenStartText2
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText2 extends flash.display.BitmapData
    {
        public function ImgYasenStartText2(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgYasenStartText3
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText3 extends flash.display.BitmapData
    {
        public function ImgYasenStartText3(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgYasenStartText4
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText4 extends flash.display.BitmapData
    {
        public function ImgYasenStartText4(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgYasenStartText5
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText5 extends flash.display.BitmapData
    {
        public function ImgYasenStartText5(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgYasenStartText6
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText6 extends flash.display.BitmapData
    {
        public function ImgYasenStartText6(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgYasenStartText7
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText7 extends flash.display.BitmapData
    {
        public function ImgYasenStartText7(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgYasenStartText8
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText8 extends flash.display.BitmapData
    {
        public function ImgYasenStartText8(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class ImgYasenStartText9
package res.battle.images
{
    import flash.display.*;

    public dynamic class ImgYasenStartText9 extends flash.display.BitmapData
    {
        public function ImgYasenStartText9(arg1:int=170, arg2:int=170)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageTextStartRaigekikiImage
package res.battle.images
{
    import flash.display.*;

    public dynamic class MessageTextStartRaigekikiImage extends flash.display.BitmapData
    {
        public function MessageTextStartRaigekikiImage(arg1:int=800, arg2:int=120)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class SeikuuTextKakuhoImage
package res.battle.images
{
    import flash.display.*;

    public dynamic class SeikuuTextKakuhoImage extends flash.display.BitmapData
    {
        public function SeikuuTextKakuhoImage(arg1:int=198, arg2:int=62)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class SeikuuTextSoushitsuImage
package res.battle.images
{
    import flash.display.*;

    public dynamic class SeikuuTextSoushitsuImage extends flash.display.BitmapData
    {
        public function SeikuuTextSoushitsuImage(arg1:int=198, arg2:int=62)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class SeikuuTextYuseiImage
package res.battle.images
{
    import flash.display.*;

    public dynamic class SeikuuTextYuseiImage extends flash.display.BitmapData
    {
        public function SeikuuTextYuseiImage(arg1:int=198, arg2:int=62)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class SubmarineWaveImage
package res.battle.images
{
    import flash.display.*;

    public dynamic class SubmarineWaveImage extends flash.display.BitmapData
    {
        public function SubmarineWaveImage(arg1:int=132, arg2:int=82)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//      package kouku
//        package funnel
//          class MCBlackFade
package res.battle.kouku.funnel
{
    import flash.display.*;

    public dynamic class MCBlackFade extends flash.display.MovieClip
    {
        public function MCBlackFade()
        {
            super();
            return;
        }
    }
}


//          class MCEnemyPlaneType
package res.battle.kouku.funnel
{
    import flash.display.*;

    public dynamic class MCEnemyPlaneType extends flash.display.MovieClip
    {
        public function MCEnemyPlaneType()
        {
            super();
            return;
        }
    }
}


//          class MCFunnelCutinE
package res.battle.kouku.funnel
{
    import flash.display.*;

    public dynamic class MCFunnelCutinE extends flash.display.MovieClip
    {
        public function MCFunnelCutinE()
        {
            super();
            return;
        }

        public var plane1:flash.display.MovieClip;

        public var plane2:flash.display.MovieClip;

        public var plane3:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;
    }
}


//          class MCFunnelCutinF
package res.battle.kouku.funnel
{
    import flash.display.*;

    public dynamic class MCFunnelCutinF extends flash.display.MovieClip
    {
        public function MCFunnelCutinF()
        {
            super();
            return;
        }

        public var plane1:flash.display.MovieClip;

        public var plane2:flash.display.MovieClip;

        public var plane3:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;
    }
}


//      package mc
//        package explosion
//          class ExplosionKoukuu
package res.battle.mc.explosion
{
    import flash.display.*;

    public dynamic class ExplosionKoukuu extends flash.display.MovieClip
    {
        public function ExplosionKoukuu()
        {
            super();
            addFrameScript(7, this.frame8);
            return;
        }

        function frame8():*
        {
            return;
        }
    }
}


//        class AerialTorpedoMC
package res.battle.mc
{
    import flash.display.*;

    public dynamic class AerialTorpedoMC extends flash.display.MovieClip
    {
        public function AerialTorpedoMC()
        {
            super();
            return;
        }
    }
}


//        class AerialTorpedoSuperMC
package res.battle.mc
{
    import flash.display.*;

    public dynamic class AerialTorpedoSuperMC extends flash.display.MovieClip
    {
        public function AerialTorpedoSuperMC()
        {
            super();
            return;
        }

        public var t3:flash.display.MovieClip;
    }
}


//        class AntiAircraftMC
package res.battle.mc
{
    import flash.display.*;

    public dynamic class AntiAircraftMC extends flash.display.MovieClip
    {
        public function AntiAircraftMC()
        {
            super();
            return;
        }
    }
}


//        class MCSearchlight
package res.battle.mc
{
    import flash.display.*;

    public dynamic class MCSearchlight extends flash.display.MovieClip
    {
        public function MCSearchlight()
        {
            super();
            return;
        }
    }
}


//        class MCSearchlightLarge
package res.battle.mc
{
    import flash.display.*;

    public dynamic class MCSearchlightLarge extends flash.display.MovieClip
    {
        public function MCSearchlightLarge()
        {
            super();
            return;
        }
    }
}


//      package movieclips
//        package explosion
//          class ExplosionGyorai
package res.battle.movieclips.explosion
{
    import __AS3__.vec.*;
    import adobe.utils.*;
    import fl.motion.*;
    import flash.accessibility.*;
    import flash.desktop.*;
    import flash.display.*;
    import flash.errors.*;
    import flash.events.*;
    import flash.external.*;
    import flash.filters.*;
    import flash.geom.*;
    import flash.globalization.*;
    import flash.media.*;
    import flash.net.*;
    import flash.net.drm.*;
    import flash.printing.*;
    import flash.profiler.*;
    import flash.sampler.*;
    import flash.sensors.*;
    import flash.system.*;
    import flash.text.*;
    import flash.text.engine.*;
    import flash.text.ime.*;
    import flash.ui.*;
    import flash.utils.*;
    import flash.xml.*;

    public dynamic class ExplosionGyorai extends flash.display.MovieClip
    {
        public function ExplosionGyorai()
        {
            super();
            if (this.__animFactory___id0_af1 == null)
            {
                this.__animArray___id0_af1 = new Array();
                this.__motion___id0_af1 = new fl.motion.MotionBase();
                this.__motion___id0_af1.duration = 16;
                this.__motion___id0_af1.overrideTargetTransform();
                this.__motion___id0_af1.addPropertyArray("alphaMultiplier", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.832031, 0.667969, 0.5, 0.332031, 0.167969]);
                this.__motion___id0_af1.addPropertyArray("alphaOffset", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
                this.__motion___id0_af1.addPropertyArray("blendMode", ["normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal", "normal"]);
                this.__motion___id0_af1.addPropertyArray("blueMultiplier", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
                this.__motion___id0_af1.addPropertyArray("blueOffset", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
                this.__motion___id0_af1.addPropertyArray("cacheAsBitmap", [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
                this.__motion___id0_af1.addPropertyArray("greenMultiplier", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
                this.__motion___id0_af1.addPropertyArray("greenOffset", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
                this.__motion___id0_af1.addPropertyArray("opaqueBackground", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
                this.__motion___id0_af1.addPropertyArray("redMultiplier", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
                this.__motion___id0_af1.addPropertyArray("redOffset", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
                this.__motion___id0_af1.addPropertyArray("visible", [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]);
                this.__motion___id0_af1.motion_internal::spanStart = 0;
                this.____motion___id0_af1_matArray__ = new Array();
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.059998, 0, 0, 0.059998, 3, -2));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.154007, 0, 0, 0.154007, 8.35, -3.3));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.248001, 0, 0, 0.248001, 13.65, -4.5));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.341995, 0, 0, 0.341995, 18.95, -5.8));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.435989, 0, 0, 0.435989, 24.25, -7.1));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.529999, 0, 0, 0.529999, 29.6, -8.35));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.624008, 0, 0, 0.624008, 34.9, -9.6));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.718002, 0, 0, 0.718002, 40.25, -10.9));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.811996, 0, 0, 0.811996, 45.5, -12.15));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.905991, 0, 0, 0.905991, 50.85, -13.4));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(1, 0, 0, 1, 56, -15));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.963333, 0, 0, 0.963333, 53.9, -13.3));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.926666, 0, 0, 0.926666, 51.9, -11.6));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.889999, 0, 0, 0.889999, 49.8, -9.9));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.853333, 0, 0, 0.853333, 47.75, -8.15));
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix(0.816666, 0, 0, 0.816666, 45.7, -6.5));
                this.__motion___id0_af1.addPropertyArray("matrix", this.____motion___id0_af1_matArray__);
                this.__animArray___id0_af1.push(this.__motion___id0_af1);
                this.__motion___id0_af1 = new fl.motion.MotionBase();
                this.__motion___id0_af1.duration = 1;
                this.__motion___id0_af1.overrideTargetTransform();
                this.__motion___id0_af1.addPropertyArray("alphaMultiplier", [0]);
                this.__motion___id0_af1.addPropertyArray("blendMode", ["normal"]);
                this.__motion___id0_af1.addPropertyArray("cacheAsBitmap", [false]);
                this.__motion___id0_af1.addPropertyArray("opaqueBackground", [null]);
                this.__motion___id0_af1.addPropertyArray("visible", [true]);
                this.__motion___id0_af1.is3D = true;
                this.__motion___id0_af1.motion_internal::spanStart = 16;
                this.____motion___id0_af1_matArray__ = new Array();
                this.____motion___id0_af1_mat3DVec__ = new Vector.<Number>(16);
                this.____motion___id0_af1_mat3DVec__[0] = 0.779999;
                this.____motion___id0_af1_mat3DVec__[1] = 0;
                this.____motion___id0_af1_mat3DVec__[2] = 0;
                this.____motion___id0_af1_mat3DVec__[3] = 0;
                this.____motion___id0_af1_mat3DVec__[4] = 0;
                this.____motion___id0_af1_mat3DVec__[5] = 0.779999;
                this.____motion___id0_af1_mat3DVec__[6] = 0;
                this.____motion___id0_af1_mat3DVec__[7] = 0;
                this.____motion___id0_af1_mat3DVec__[8] = 0;
                this.____motion___id0_af1_mat3DVec__[9] = 0;
                this.____motion___id0_af1_mat3DVec__[10] = 1;
                this.____motion___id0_af1_mat3DVec__[11] = 0;
                this.____motion___id0_af1_mat3DVec__[12] = 42.650002;
                this.____motion___id0_af1_mat3DVec__[13] = -4.75;
                this.____motion___id0_af1_mat3DVec__[14] = 0;
                this.____motion___id0_af1_mat3DVec__[15] = 1;
                this.____motion___id0_af1_matArray__.push(new flash.geom.Matrix3D(this.____motion___id0_af1_mat3DVec__));
                this.__motion___id0_af1.addPropertyArray("matrix3D", this.____motion___id0_af1_matArray__);
                this.__animArray___id0_af1.push(this.__motion___id0_af1);
                this.__animFactory___id0_af1 = new fl.motion.AnimatorFactoryUniversal(null, this.__animArray___id0_af1);
                this.__animFactory___id0_af1.addTargetInfo(this, "__id0_", 0, true, 0, true, null, -1);
            }
            return;
        }

        public var __id0_:flash.display.MovieClip;

        public var __animFactory___id0_af1:fl.motion.AnimatorFactoryUniversal;

        public var __animArray___id0_af1:Array;

        public var ____motion___id0_af1_mat3DVec__:__AS3__.vec.Vector.<Number>;

        public var ____motion___id0_af1_matArray__:Array;

        public var __motion___id0_af1:fl.motion.MotionBase;
    }
}


//          class ExplosionLarge
package res.battle.movieclips.explosion
{
    import flash.display.*;

    public dynamic class ExplosionLarge extends flash.display.MovieClip
    {
        public function ExplosionLarge()
        {
            super();
            return;
        }
    }
}


//          class ExplosionMiddle
package res.battle.movieclips.explosion
{
    import flash.display.*;

    public dynamic class ExplosionMiddle extends flash.display.MovieClip
    {
        public function ExplosionMiddle()
        {
            super();
            return;
        }
    }
}


//          class ExplosionSmall
package res.battle.movieclips.explosion
{
    import flash.display.*;

    public dynamic class ExplosionSmall extends flash.display.MovieClip
    {
        public function ExplosionSmall()
        {
            super();
            return;
        }
    }
}


//        class BannerExtendMC
package res.battle.movieclips
{
    import flash.display.*;
    import flash.text.*;

    public dynamic class BannerExtendMC extends flash.display.MovieClip
    {
        public function BannerExtendMC()
        {
            super();
            addFrameScript(1, this.frame2, 3, this.frame4, 5, this.frame6);
            return;
        }

        function frame2():*
        {
            return;
        }

        function frame4():*
        {
            return;
        }

        function frame6():*
        {
            return;
        }

        public var extend:flash.display.MovieClip;

        public var textLeft:flash.text.TextField;

        public var textRight:flash.text.TextField;
    }
}


//        class DamageNumberMC
package res.battle.movieclips
{
    import flash.display.*;

    public dynamic class DamageNumberMC extends flash.display.MovieClip
    {
        public function DamageNumberMC()
        {
            super();
            return;
        }

        public var critdisp:flash.display.MovieClip;

        public var k1:flash.display.MovieClip;

        public var k2:flash.display.MovieClip;

        public var k3:flash.display.MovieClip;

        public var k4:flash.display.MovieClip;
    }
}


//      package plane
//        class PlaneEMC
package res.battle.plane
{
    import flash.display.*;

    public dynamic class PlaneEMC extends flash.display.MovieClip
    {
        public function PlaneEMC()
        {
            super();
            return;
        }

        public var attack_fire:flash.display.MovieClip;

        public var plane:flash.display.MovieClip;

        public var smoke:flash.display.MovieClip;
    }
}


//        class PlaneETrioMC
package res.battle.plane
{
    import flash.display.*;

    public dynamic class PlaneETrioMC extends flash.display.MovieClip
    {
        public function PlaneETrioMC()
        {
            super();
            return;
        }

        public var p1:flash.display.MovieClip;

        public var p2:flash.display.MovieClip;

        public var p3:flash.display.MovieClip;
    }
}


//        class PlaneFMC
package res.battle.plane
{
    import flash.display.*;

    public dynamic class PlaneFMC extends flash.display.MovieClip
    {
        public function PlaneFMC()
        {
            super();
            return;
        }

        public var attack_fire:flash.display.MovieClip;

        public var plane:flash.display.MovieClip;

        public var smoke:flash.display.MovieClip;
    }
}


//        class PlaneFTrioMC
package res.battle.plane
{
    import flash.display.*;

    public dynamic class PlaneFTrioMC extends flash.display.MovieClip
    {
        public function PlaneFTrioMC()
        {
            super();
            return;
        }

        public var p1:flash.display.MovieClip;

        public var p2:flash.display.MovieClip;

        public var p3:flash.display.MovieClip;
    }
}


//      package result
//        package img
//          class ImgKikanTaiha
package res.battle.result.img
{
    import flash.display.*;

    public dynamic class ImgKikanTaiha extends flash.display.BitmapData
    {
        public function ImgKikanTaiha(arg1:int=253, arg2:int=201)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        package mc
//          class MCKikanTaihaBox
package res.battle.result.mc
{
    import flash.display.*;
    import flash.text.*;

    public dynamic class MCKikanTaihaBox extends flash.display.MovieClip
    {
        public function MCKikanTaihaBox()
        {
            super();
            return;
        }

        public var line1:flash.text.TextField;

        public var line2:flash.text.TextField;

        public var line3:flash.text.TextField;
    }
}


//          class MCKikanTaihaSmoke
package res.battle.result.mc
{
    import flash.display.*;

    public dynamic class MCKikanTaihaSmoke extends flash.display.MovieClip
    {
        public function MCKikanTaihaSmoke()
        {
            super();
            return;
        }
    }
}


//      class AAExplodeMC
package res.battle
{
    import flash.display.*;

    public dynamic class AAExplodeMC extends flash.display.MovieClip
    {
        public function AAExplodeMC()
        {
            super();
            addFrameScript(23, this.frame24);
            return;
        }

        function frame24():*
        {
            stop();
            return;
        }

        public var smoke:flash.display.MovieClip;
    }
}


//      class AASmokeMC
package res.battle
{
    import flash.display.*;

    public dynamic class AASmokeMC extends flash.display.MovieClip
    {
        public function AASmokeMC()
        {
            super();
            return;
        }

        public var smoke:flash.display.MovieClip;
    }
}


//      class AntiAircraftSetMC
package res.battle
{
    import flash.display.*;

    public dynamic class AntiAircraftSetMC extends flash.display.MovieClip
    {
        public function AntiAircraftSetMC()
        {
            super();
            return;
        }

        public var gun1:flash.display.MovieClip;

        public var gun2:flash.display.MovieClip;
    }
}


//      class MCBakuraiEnd
package res.battle
{
    import flash.display.*;

    public dynamic class MCBakuraiEnd extends flash.display.MovieClip
    {
        public function MCBakuraiEnd()
        {
            super();
            return;
        }
    }
}


//      class MCBakuraiStart
package res.battle
{
    import flash.display.*;

    public dynamic class MCBakuraiStart extends flash.display.MovieClip
    {
        public function MCBakuraiStart()
        {
            super();
            return;
        }
    }
}


//      class MCChuhaString
package res.battle
{
    import flash.display.*;

    public dynamic class MCChuhaString extends flash.display.MovieClip
    {
        public function MCChuhaString()
        {
            super();
            return;
        }
    }
}


//      class MCCombatFormStatus
package res.battle
{
    import flash.display.*;

    public dynamic class MCCombatFormStatus extends flash.display.MovieClip
    {
        public function MCCombatFormStatus()
        {
            super();
            return;
        }
    }
}


//      class MCCombatFormText
package res.battle
{
    import flash.display.*;

    public dynamic class MCCombatFormText extends flash.display.MovieClip
    {
        public function MCCombatFormText()
        {
            super();
            return;
        }
    }
}


//      class MCCombinedMainFormation
package res.battle
{
    import flash.display.*;

    public dynamic class MCCombinedMainFormation extends flash.display.MovieClip
    {
        public function MCCombinedMainFormation()
        {
            super();
            return;
        }
    }
}


//      class MCCombinedSubFormation
package res.battle
{
    import flash.display.*;

    public dynamic class MCCombinedSubFormation extends flash.display.MovieClip
    {
        public function MCCombinedSubFormation()
        {
            super();
            return;
        }
    }
}


//      class MCCutin1
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutin1 extends flash.display.MovieClip
    {
        public function MCCutin1()
        {
            super();
            return;
        }

        public var ship:flash.display.MovieClip;

        public var statusWindow:flash.display.MovieClip;
    }
}


//      class MCCutin2
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutin2 extends flash.display.MovieClip
    {
        public function MCCutin2()
        {
            super();
            return;
        }

        public var ship:flash.display.MovieClip;

        public var statusWindow:flash.display.MovieClip;
    }
}


//      class MCCutin3
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutin3 extends flash.display.MovieClip
    {
        public function MCCutin3()
        {
            super();
            return;
        }

        public var ship:flash.display.MovieClip;

        public var statusWindow:flash.display.MovieClip;
    }
}


//      class MCCutin4
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutin4 extends flash.display.MovieClip
    {
        public function MCCutin4()
        {
            super();
            return;
        }

        public var ship:flash.display.MovieClip;

        public var statusWindow:flash.display.MovieClip;
    }
}


//      class MCCutinDaySuperTSF
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinDaySuperTSF extends flash.display.MovieClip
    {
        public function MCCutinDaySuperTSF()
        {
            super();
            return;
        }

        public var bg1:flash.display.MovieClip;

        public var bg2:flash.display.MovieClip;

        public var bg3:flash.display.MovieClip;

        public var item1:flash.display.MovieClip;

        public var item2:flash.display.MovieClip;

        public var plane:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;

        public var title:flash.display.MovieClip;

        public var weapon1:flash.display.MovieClip;

        public var weapon2:flash.display.MovieClip;
    }
}


//      class MCCutinDouble1
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinDouble1 extends flash.display.MovieClip
    {
        public function MCCutinDouble1()
        {
            super();
            return;
        }

        public var ship:flash.display.MovieClip;

        public var statusWindow:flash.display.MovieClip;
    }
}


//      class MCCutinDouble2
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinDouble2 extends flash.display.MovieClip
    {
        public function MCCutinDouble2()
        {
            super();
            return;
        }

        public var ship:flash.display.MovieClip;

        public var statusWindow:flash.display.MovieClip;
    }
}


//      class MCCutinDouble3
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinDouble3 extends flash.display.MovieClip
    {
        public function MCCutinDouble3()
        {
            super();
            return;
        }

        public var ship:flash.display.MovieClip;

        public var statusWindow:flash.display.MovieClip;
    }
}


//      class MCCutinDouble4
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinDouble4 extends flash.display.MovieClip
    {
        public function MCCutinDouble4()
        {
            super();
            return;
        }

        public var ship:flash.display.MovieClip;

        public var statusWindow:flash.display.MovieClip;
    }
}


//      class MCCutinSuperRR
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinSuperRR extends flash.display.MovieClip
    {
        public function MCCutinSuperRR()
        {
            super();
            return;
        }

        public var bg1:flash.display.MovieClip;

        public var bg2:flash.display.MovieClip;

        public var bg3:flash.display.MovieClip;

        public var gr1:flash.display.MovieClip;

        public var gr2:flash.display.MovieClip;

        public var gr3:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;

        public var we1:flash.display.MovieClip;

        public var we2:flash.display.MovieClip;

        public var we3:flash.display.MovieClip;
    }
}


//      class MCCutinSuperSR
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinSuperSR extends flash.display.MovieClip
    {
        public function MCCutinSuperSR()
        {
            super();
            return;
        }

        public var bg1:flash.display.MovieClip;

        public var bg2:flash.display.MovieClip;

        public var bg3:flash.display.MovieClip;

        public var gr1:flash.display.MovieClip;

        public var gr2:flash.display.MovieClip;

        public var gr3:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;

        public var we1:flash.display.MovieClip;

        public var we2:flash.display.MovieClip;

        public var we3:flash.display.MovieClip;
    }
}


//      class MCCutinSuperSSF
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinSuperSSF extends flash.display.MovieClip
    {
        public function MCCutinSuperSSF()
        {
            super();
            return;
        }

        public var bg:flash.display.MovieClip;

        public var gr1:flash.display.MovieClip;

        public var gr2:flash.display.MovieClip;

        public var gr3:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;

        public var we1:flash.display.MovieClip;

        public var we2:flash.display.MovieClip;

        public var we3:flash.display.MovieClip;
    }
}


//      class MCCutinSuperSSS
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinSuperSSS extends flash.display.MovieClip
    {
        public function MCCutinSuperSSS()
        {
            super();
            return;
        }

        public var bg1:flash.display.MovieClip;

        public var bg2:flash.display.MovieClip;

        public var bg3:flash.display.MovieClip;

        public var gr1:flash.display.MovieClip;

        public var gr2:flash.display.MovieClip;

        public var gr3:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;

        public var we1:flash.display.MovieClip;

        public var we2:flash.display.MovieClip;

        public var we3:flash.display.MovieClip;
    }
}


//      class MCCutinText1
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinText1 extends flash.display.MovieClip
    {
        public function MCCutinText1()
        {
            super();
            return;
        }

        public var bg:flash.display.MovieClip;

        public var weaponNameMC:flash.display.MovieClip;
    }
}


//      class MCCutinText2
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinText2 extends flash.display.MovieClip
    {
        public function MCCutinText2()
        {
            super();
            return;
        }

        public var bg:flash.display.MovieClip;

        public var weaponNameMC:flash.display.MovieClip;
    }
}


//      class MCCutinText3
package res.battle
{
    import flash.display.*;

    public dynamic class MCCutinText3 extends flash.display.MovieClip
    {
        public function MCCutinText3()
        {
            super();
            return;
        }

        public var bg:flash.display.MovieClip;

        public var weaponNameMC:flash.display.MovieClip;
    }
}


//      class MCDaihatsu
package res.battle
{
    import flash.display.*;

    public dynamic class MCDaihatsu extends flash.display.MovieClip
    {
        public function MCDaihatsu()
        {
            super();
            return;
        }
    }
}


//      class MCDamageControllCutin
package res.battle
{
    import flash.display.*;

    public dynamic class MCDamageControllCutin extends flash.display.MovieClip
    {
        public function MCDamageControllCutin()
        {
            super();
            return;
        }

        public var card1:flash.display.MovieClip;

        public var card2:flash.display.MovieClip;

        public var megamiText:flash.display.MovieClip;

        public var megamiText2:flash.display.MovieClip;

        public var megamiTextBG:flash.display.MovieClip;

        public var shipCanvas:flash.display.MovieClip;
    }
}


//      class MCFlare
package res.battle
{
    import flash.display.*;

    public dynamic class MCFlare extends flash.display.MovieClip
    {
        public function MCFlare()
        {
            super();
            return;
        }

        public var flare1:flash.display.MovieClip;

        public var flare2:flash.display.MovieClip;

        public var smoke_layer:flash.display.MovieClip;
    }
}


//      class MCFlareSmoke
package res.battle
{
    import flash.display.*;

    public dynamic class MCFlareSmoke extends flash.display.MovieClip
    {
        public function MCFlareSmoke()
        {
            super();
            return;
        }

        public var smoke1:flash.display.MovieClip;

        public var smoke2:flash.display.MovieClip;

        public var smoke3:flash.display.MovieClip;

        public var smoke4:flash.display.MovieClip;

        public var smoke5:flash.display.MovieClip;
    }
}


//      class MCFormation
package res.battle
{
    import flash.display.*;

    public dynamic class MCFormation extends flash.display.MovieClip
    {
        public function MCFormation()
        {
            super();
            return;
        }
    }
}


//      class MCFormationText
package res.battle
{
    import flash.display.*;

    public dynamic class MCFormationText extends flash.display.MovieClip
    {
        public function MCFormationText()
        {
            super();
            return;
        }
    }
}


//      class MCGekichinCutin
package res.battle
{
    import flash.display.*;

    public dynamic class MCGekichinCutin extends flash.display.MovieClip
    {
        public function MCGekichinCutin()
        {
            super();
            return;
        }

        public var bg:flash.display.MovieClip;

        public var card:flash.display.MovieClip;

        public var lightbeam:flash.display.MovieClip;

        public var lost2_b:flash.display.MovieClip;

        public var lost2_g:flash.display.MovieClip;

        public var lost_b:flash.display.MovieClip;

        public var lost_g:flash.display.MovieClip;

        public var lowermask:flash.display.MovieClip;

        public var particleCanvas:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;

        public var shipblur:flash.display.MovieClip;
    }
}


//      class MCGekichinCutinParticle
package res.battle
{
    import flash.display.*;

    public dynamic class MCGekichinCutinParticle extends flash.display.MovieClip
    {
        public function MCGekichinCutinParticle()
        {
            super();
            return;
        }
    }
}


//      class MCRocketEnd
package res.battle
{
    import flash.display.*;

    public dynamic class MCRocketEnd extends flash.display.MovieClip
    {
        public function MCRocketEnd()
        {
            super();
            return;
        }
    }
}


//      class MCRocketStart
package res.battle
{
    import flash.display.*;

    public dynamic class MCRocketStart extends flash.display.MovieClip
    {
        public function MCRocketStart()
        {
            super();
            return;
        }
    }
}


//      class MCSupportH
package res.battle
{
    import flash.display.*;

    public dynamic class MCSupportH extends flash.display.MovieClip
    {
        public function MCSupportH()
        {
            super();
            return;
        }

        public var a1:flash.display.MovieClip;

        public var a2:flash.display.MovieClip;

        public var a3:flash.display.MovieClip;

        public var a4:flash.display.MovieClip;

        public var a5:flash.display.MovieClip;

        public var a6:flash.display.MovieClip;
    }
}


//      class MCSupportR
package res.battle
{
    import flash.display.*;

    public dynamic class MCSupportR extends flash.display.MovieClip
    {
        public function MCSupportR()
        {
            super();
            return;
        }

        public var t1:flash.display.MovieClip;

        public var t2:flash.display.MovieClip;

        public var t3:flash.display.MovieClip;

        public var t4:flash.display.MovieClip;

        public var t5:flash.display.MovieClip;

        public var t6:flash.display.MovieClip;
    }
}


//      class MCTaihaString
package res.battle
{
    import flash.display.*;

    public dynamic class MCTaihaString extends flash.display.MovieClip
    {
        public function MCTaihaString()
        {
            super();
            return;
        }
    }
}


//      class MCTaikuCutin
package res.battle
{
    import flash.display.*;

    public dynamic class MCTaikuCutin extends flash.display.MovieClip
    {
        public function MCTaikuCutin()
        {
            super();
            return;
        }

        public var cloud_layer:flash.display.MovieClip;

        public var cut3:flash.display.MovieClip;

        public var ship:flash.display.MovieClip;

        public var slot1:flash.display.MovieClip;

        public var slot2:flash.display.MovieClip;

        public var slot3:flash.display.MovieClip;
    }
}


//      class MCTaikuCutinBomb
package res.battle
{
    import flash.display.*;

    public dynamic class MCTaikuCutinBomb extends flash.display.MovieClip
    {
        public function MCTaikuCutinBomb()
        {
            super();
            return;
        }
    }
}


//      class MCTaikuCutinCloud
package res.battle
{
    import flash.display.*;

    public dynamic class MCTaikuCutinCloud extends flash.display.MovieClip
    {
        public function MCTaikuCutinCloud()
        {
            super();
            return;
        }
    }
}


//      class MCTorpedo
package res.battle
{
    import flash.display.*;

    public dynamic class MCTorpedo extends flash.display.MovieClip
    {
        public function MCTorpedo()
        {
            super();
            return;
        }
    }
}


//      class MCTorpedo2
package res.battle
{
    import flash.display.*;

    public dynamic class MCTorpedo2 extends flash.display.MovieClip
    {
        public function MCTorpedo2()
        {
            super();
            return;
        }
    }
}


//      class MCTouchPlane
package res.battle
{
    import flash.display.*;

    public dynamic class MCTouchPlane extends flash.display.MovieClip
    {
        public function MCTouchPlane()
        {
            super();
            return;
        }

        public var plane:flash.display.MovieClip;

        public var txt_img:flash.display.MovieClip;
    }
}


//      class MCUchibi
package res.battle
{
    import flash.display.*;

    public dynamic class MCUchibi extends flash.display.MovieClip
    {
        public function MCUchibi()
        {
            super();
            return;
        }
    }
}


//      class MCYasenSelectButtons
package res.battle
{
    import flash.display.*;

    public dynamic class MCYasenSelectButtons extends flash.display.MovieClip
    {
        public function MCYasenSelectButtons()
        {
            super();
            return;
        }

        public var btnNoYasen:flash.display.MovieClip;

        public var btnYesYasen:flash.display.MovieClip;

        public var shapeNoYasen:flash.display.MovieClip;

        public var shapeYesYasen:flash.display.MovieClip;
    }
}


//      class PicketMC
package res.battle
{
    import flash.display.*;

    public dynamic class PicketMC extends flash.display.MovieClip
    {
        public function PicketMC()
        {
            super();
            return;
        }
    }
}


//      class UpperBarMC
package res.battle
{
    import flash.display.*;

    public dynamic class UpperBarMC extends flash.display.MovieClip
    {
        public function UpperBarMC()
        {
            super();
            return;
        }

        public var gear:flash.display.MovieClip;
    }
}


//    package images
//      package battle
//        class MessageBGGreenImage
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageBGGreenImage extends flash.display.BitmapData
    {
        public function MessageBGGreenImage(arg1:int=800, arg2:int=200)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageBGRedImage
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageBGRedImage extends flash.display.BitmapData
    {
        public function MessageBGRedImage(arg1:int=800, arg2:int=200)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageSubTextDown
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageSubTextDown extends flash.display.BitmapData
    {
        public function MessageSubTextDown(arg1:int=800, arg2:int=44)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageSubTextUp
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageSubTextUp extends flash.display.BitmapData
    {
        public function MessageSubTextUp(arg1:int=800, arg2:int=45)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageTextSakutekikiMikitouImage
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageTextSakutekikiMikitouImage extends flash.display.BitmapData
    {
        public function MessageTextSakutekikiMikitouImage(arg1:int=502, arg2:int=150)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageTextStartSakutekiImage
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageTextStartSakutekiImage extends flash.display.BitmapData
    {
        public function MessageTextStartSakutekiImage(arg1:int=800, arg2:int=120)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageTextTekikantaiHakken2Image
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageTextTekikantaiHakken2Image extends flash.display.BitmapData
    {
        public function MessageTextTekikantaiHakken2Image(arg1:int=680, arg2:int=150)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageTextTekikantaiHakkenDekizuImage
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageTextTekikantaiHakkenDekizuImage extends flash.display.BitmapData
    {
        public function MessageTextTekikantaiHakkenDekizuImage(arg1:int=608, arg2:int=150)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageTextTekikantaiHakkenImage
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageTextTekikantaiHakkenImage extends flash.display.BitmapData
    {
        public function MessageTextTekikantaiHakkenImage(arg1:int=434, arg2:int=150)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class MessageTextTekikantaiMiyuImage
package res.images.battle
{
    import flash.display.*;

    public dynamic class MessageTextTekikantaiMiyuImage extends flash.display.BitmapData
    {
        public function MessageTextTekikantaiMiyuImage(arg1:int=436, arg2:int=150)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class PlaneFriendImage
package res.images.battle
{
    import flash.display.*;

    public dynamic class PlaneFriendImage extends flash.display.BitmapData
    {
        public function PlaneFriendImage(arg1:int=132, arg2:int=92)
        {
            super(arg1, arg2);
            return;
        }
    }
}


//        class SakutekiLineMC
package res.images.battle
{
    import flash.display.*;

    public dynamic class SakutekiLineMC extends flash.display.MovieClip
    {
        public function SakutekiLineMC()
        {
            super();
            return;
        }
    }
}


//    package movieclips
//      package battle
//        class BabbleMC
package res.movieclips.battle
{
    import flash.display.*;

    public dynamic class BabbleMC extends flash.display.MovieClip
    {
        public function BabbleMC()
        {
            super();
            return;
        }
    }
}


//    package port
//      package sally
//        class MCSupportCutin
package res.port.sally
{
    import flash.display.*;

    public dynamic class MCSupportCutin extends flash.display.MovieClip
    {
        public function MCSupportCutin()
        {
            super();
            return;
        }

        public var bg:flash.display.MovieClip;

        public var kira1:flash.display.MovieClip;

        public var kira10:flash.display.MovieClip;

        public var kira11:flash.display.MovieClip;

        public var kira12:flash.display.MovieClip;

        public var kira2:flash.display.MovieClip;

        public var kira3:flash.display.MovieClip;

        public var kira4:flash.display.MovieClip;

        public var kira5:flash.display.MovieClip;

        public var kira6:flash.display.MovieClip;

        public var kira7:flash.display.MovieClip;

        public var kira8:flash.display.MovieClip;

        public var kira9:flash.display.MovieClip;

        public var ships:flash.display.MovieClip;

        public var textImg:flash.display.MovieClip;
    }
}


//    package sally
//      class MCEscapeSelectButtons
package res.sally
{
    import flash.display.*;
    import flash.text.*;

    public dynamic class MCEscapeSelectButtons extends flash.display.MovieClip
    {
        public function MCEscapeSelectButtons()
        {
            super();
            return;
        }

        public var btnEscape:flash.display.MovieClip;

        public var btnNoEscape:flash.display.MovieClip;

        public var escape_candidate:flash.display.MovieClip;

        public var shapeEscape:flash.display.MovieClip;

        public var shapeNoEscape:flash.display.MovieClip;

        public var ship_hp_txt:flash.text.TextField;

        public var ship_lv_txt:flash.text.TextField;

        public var ship_name_txt:flash.text.TextField;

        public var tow_candidate:flash.display.MovieClip;
    }
}


//  package res_battle_fla
//    class HPゲージ点滅_4
package res_battle_fla
{
    import flash.display.*;

    public dynamic class HPゲージ点滅_4 extends flash.display.MovieClip
    {
        public function HPゲージ点滅_4()
        {
            super();
            addFrameScript(39, this.frame40, 79, this.frame80, 119, this.frame120, 121, this.frame122);
            return;
        }

        function frame40():*
        {
            gotoAndPlay("ga4");
            return;
        }

        function frame80():*
        {
            gotoAndPlay("ga3");
            return;
        }

        function frame120():*
        {
            gotoAndPlay("ga2");
            return;
        }

        function frame122():*
        {
            stop();
            return;
        }
    }
}


//    class second_fleet_aerial_torpedo_water_70
package res_battle_fla
{
    import flash.display.*;

    public dynamic class second_fleet_aerial_torpedo_water_70 extends flash.display.MovieClip
    {
        public function second_fleet_aerial_torpedo_water_70()
        {
            super();
            addFrameScript(24, this.frame25);
            return;
        }

        function frame25():*
        {
            gotoAndPlay(1);
            return;
        }
    }
}


//    class second_fleet_torpedo_holder_24
package res_battle_fla
{
    import flash.display.*;

    public dynamic class second_fleet_torpedo_holder_24 extends flash.display.MovieClip
    {
        public function second_fleet_torpedo_holder_24()
        {
            super();
            addFrameScript(43, this.frame44);
            return;
        }

        function frame44():*
        {
            stop();
            return;
        }
    }
}


//  package scene
//    package battle
//      package mc
//        class MCRationHukidashi
package scene.battle.mc
{
    import flash.display.*;

    public dynamic class MCRationHukidashi extends flash.display.MovieClip
    {
        public function MCRationHukidashi()
        {
            super();
            return;
        }
    }
}


//        class MCRationKira
package scene.battle.mc
{
    import flash.display.*;

    public dynamic class MCRationKira extends flash.display.MovieClip
    {
        public function MCRationKira()
        {
            super();
            return;
        }
    }
}


//        class MCTaiGearBtn
package scene.battle.mc
{
    import flash.display.*;

    public dynamic class MCTaiGearBtn extends flash.display.MovieClip
    {
        public function MCTaiGearBtn()
        {
            super();
            return;
        }

        public var gear:flash.display.MovieClip;
    }
}


//  class BattleAssets
package
{
    import common.models.*;
    import common.util.*;
    import flash.events.*;
    import flash.system.*;

    public class BattleAssets extends flash.events.EventDispatcher
    {
        public function BattleAssets()
        {
            super();
            return;
        }

        public static function isSameBGM(arg1:Boolean, arg2:int, arg3:int):Boolean
        {
            var loc1:*;
            return (loc1 = DataFacade.getMapData().getBGMObj(arg2, arg3)).isSameBGM(arg1);
        }

        public static function getBGM_ID(arg1:Boolean, arg2:Boolean, arg3:int, arg4:int, arg5:int):int
        {
            var loc1:*=DataFacade.getMapData().getBGMObj(arg3, arg4);
            if (arg1 == true)
            {
                return loc1.isDayBGM(arg2);
            }
            return loc1.isNightBGM(arg2);
        }

        public static function getBGMCls(arg1:Boolean, arg2:Boolean, arg3:int, arg4:int, arg5:int):Class
        {
            var loc1:*=getBGM_ID(arg1, arg2, arg3, arg4, arg5);
            return getBGMClsFromID(loc1);
        }

        public static function getBGMClsFromID(arg1:int):Class
        {
            try
            {
                var loc2:*=flash.system.ApplicationDomain.currentDomain.getDefinition("res.sounds.battle.BGM_" + arg1) as Class;
                return loc2;
            }
            catch (error:ReferenceError)
            {
            };
            return null;
        }

        public static function getBGMURL(arg1:int):String
        {
            var loc1:*=null;
            if (common.util.SwfVer.BATTLEBGM.length >= arg1)
            {
                loc1 = "?version=" + common.util.SwfVer.BATTLEBGM[arg1 - 1];
            }
            else
            {
                loc1 = "";
            }
            return SettingFacade.URLROOT_GRAPHIC + "swf/sound_b_bgm_" + arg1 + ".swf" + loc1;
        }

        public static function unitTest(arg1:int):String
        {
            var loc1:*=0;
            var loc3:*=0;
            var loc2:*="";
            loc1 = 1;
            while (loc1 <= 5)
            {
                loc3 = 1;
                while (loc3 <= 5)
                {
                    loc2 = loc2 + (loc1 + "-" + loc3 + " 昼(ザコ): " + getBGM_ID(true, false, loc1, loc3, arg1) + "\n");
                    loc2 = loc2 + (loc1 + "-" + loc3 + " 夜(ザコ): " + getBGM_ID(false, false, loc1, loc3, arg1) + "\n");
                    loc2 = loc2 + (loc1 + "-" + loc3 + " 昼(ボス): " + getBGM_ID(true, true, loc1, loc3, arg1) + "\n");
                    loc2 = loc2 + (loc1 + "-" + loc3 + " 夜(ボス): " + getBGM_ID(false, true, loc1, loc3, arg1) + "\n");
                    ++loc3;
                }
                ++loc1;
            }
            return loc2;
        }

        public static function get BGM_kikan_taiha():Class
        {
            try
            {
                var loc2:*=flash.system.ApplicationDomain.currentDomain.getDefinition("res.sounds.battle.BGM_kikangekiha_haiboku1") as Class;
                return loc2;
            }
            catch (error:ReferenceError)
            {
            };
            return null;
        }

        public static function get SE_artillery():Class
        {
            return _getSECls("res.sounds.battle.SE_artillery");
        }

        public static function get SE_battle_card():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_card");
        }

        public static function get SE_battle_don():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_don");
        }

        public static function get SE_battle_don2():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_don2");
        }

        public static function get SE_battle_cutinMove():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_cutinMove");
        }

        public static function get SE_battle_fannelCutIn():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_fannelCutIn");
        }

        public static function get SE_battle_plane1():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_plane1");
        }

        public static function get SE_savepoint():Class
        {
            return _getSECls("res.sounds.SE_savepoint");
        }

        public static function get SE_sonar002():Class
        {
            return _getSECls("res.sounds.battle.SE_sonar002");
        }

        public static function get SE_dip():Class
        {
            return _getSECls("res.sounds.battle.SE_dip");
        }

        public static function get SE_battle_shoot():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_shoot");
        }

        public static function get SE_battle_hikouki():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_hikouki");
        }

        public static function get SE_battle_hikouki2():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_hikouki2");
        }

        public static function get SE_battle_gyorai():Class
        {
            return _getSECls("res.sounds.battle.SE_battle_gyorai");
        }

        public static function get SE_battle_click():Class
        {
            return _getSECls("res.sounds.SE_battle_click");
        }

        public static function get SE_battle_telop():Class
        {
            return _getSECls("res.sounds.SE_battle_telop");
        }

        public static function get SE_battle_shoumeidan():Class
        {
            return _getSECls("res.sounds.battle.SE_shoumeidan");
        }

        public static function get SE_battle_Bam():Class
        {
            return _getSECls("res.sounds.battle.SE_Bam");
        }

        private static function _getSECls(arg1:String):Class
        {
            var loc1:*=null;
            try
            {
                loc1 = flash.system.ApplicationDomain.currentDomain.getDefinition(arg1) as Class;
            }
            catch (error:ReferenceError)
            {
                loc1 = null;
            }
            return loc1;
        }
    }
}


//  class mask_png$171f8cd4bc336f6d3d773669f0734981-1863831852
package
{
    import flash.display.*;

    public class mask_png$171f8cd4bc336f6d3d773669f0734981-1863831852 extends flash.display.Bitmap
    {
        public function mask_png$171f8cd4bc336f6d3d773669f0734981-1863831852()
        {
            super();
            return;
        }
    }
}


//  class shield_png$f90866d61f09304ed4b65cd1a8d0dbbc1744783129
package
{
    import flash.display.*;

    public class shield_png$f90866d61f09304ed4b65cd1a8d0dbbc1744783129 extends flash.display.Bitmap
    {
        public function shield_png$f90866d61f09304ed4b65cd1a8d0dbbc1744783129()
        {
            super();
            return;
        }
    }
}
